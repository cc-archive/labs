<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.0.1" created="2014-11-21 15:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>CC Labs</title>
	<link>http://labs.creativecommons.org</link>
	<description>Just another WordPress site</description>
	<pubDate>Fri, 21 Nov 2014 15:01:17 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://labs.creativecommons.org</wp:base_site_url>
	<wp:base_blog_url>http://labs.creativecommons.org</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>nathan</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[nathan]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login>ml</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[ml]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>4</wp:author_id><wp:author_login>matthiassamwald</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[matthiassamwald]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>5</wp:author_id><wp:author_login>alankelon</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[alankelon]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>6</wp:author_id><wp:author_login>jakin</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[jakin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>7</wp:author_id><wp:author_login>ksiomelo</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[ksiomelo]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>8</wp:author_id><wp:author_login>rejon</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[rejon]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>9</wp:author_id><wp:author_login>alex</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[alex]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>10</wp:author_id><wp:author_login>tannewt</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[tannewt]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>11</wp:author_id><wp:author_login>nkinkade</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[nkinkade]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>12</wp:author_id><wp:author_login>asheesh</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[asheesh]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>13</wp:author_id><wp:author_login>tpkennes</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[tpkennes]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>14</wp:author_id><wp:author_login>cwebber</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[cwebber]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>15</wp:author_id><wp:author_login>hugo dworak</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[hugo dworak]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>16</wp:author_id><wp:author_login>ankitg</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[ankitg]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>17</wp:author_id><wp:author_login>mihai</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[mihai]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>18</wp:author_id><wp:author_login>steren</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[steren]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>19</wp:author_id><wp:author_login>frank</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[frank]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>20</wp:author_id><wp:author_login>davemccabe</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[davemccabe]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>21</wp:author_id><wp:author_login>thwang</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[thwang]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>22</wp:author_id><wp:author_login>greg</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[greg]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>23</wp:author_id><wp:author_login>brian</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[brian]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>25</wp:author_id><wp:author_login>erlehmann</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[erlehmann]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>26</wp:author_id><wp:author_login>nimal</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[nimal]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>27</wp:author_id><wp:author_login>blaise</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[blaise]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>28</wp:author_id><wp:author_login>akila87</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[akila87]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>29</wp:author_id><wp:author_login>igorlukanin</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[igorlukanin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>30</wp:author_id><wp:author_login>akozak</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[akozak]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>31</wp:author_id><wp:author_login>john</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[john]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>32</wp:author_id><wp:author_login>lunpa</wp:author_login><wp:author_email></wp:author_email><wp:author_display_name><![CDATA[lunpa]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>2</wp:term_id><wp:category_nicename>add-in</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Add-In]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>adobe</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[adobe]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>4</wp:term_id><wp:category_nicename>agshare</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[AgShare]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>api</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[api]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>atom</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[atom]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>beagle</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[beagle]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>8</wp:term_id><wp:category_nicename>berlios</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[berlios]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>9</wp:term_id><wp:category_nicename>bioinformatics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[bioinformatics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>botnet</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[botnet]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>11</wp:term_id><wp:category_nicename>bsd</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[bsd]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>12</wp:term_id><wp:category_nicename>case-studies</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[case studies]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>13</wp:term_id><wp:category_nicename>cc-license-manager</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CC License Manager]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>cc-network</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CC Network]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>15</wp:term_id><wp:category_nicename>cc-rel-2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CC REL]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>16</wp:term_id><wp:category_nicename>ccpublisher</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ccPublisher]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>ccpublisher-upload-export-opendata</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ccPublisher upload export opendata]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>18</wp:term_id><wp:category_nicename>code-sprint</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[code sprint]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>19</wp:term_id><wp:category_nicename>debian</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Debian]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>20</wp:term_id><wp:category_nicename>describing-oer</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Describing OER]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>development</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[development]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>22</wp:term_id><wp:category_nicename>discovered</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[DiscoverEd]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>23</wp:term_id><wp:category_nicename>drm</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[drm]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>24</wp:term_id><wp:category_nicename>embedding</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[embedding]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>25</wp:term_id><wp:category_nicename>evaluation</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[evaluation]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>26</wp:term_id><wp:category_nicename>export</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[export]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>27</wp:term_id><wp:category_nicename>fontview</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[fontview]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>28</wp:term_id><wp:category_nicename>graphics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[graphics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29</wp:term_id><wp:category_nicename>gsoc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[GSoC]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>30</wp:term_id><wp:category_nicename>gunarpenikis</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[gunarpenikis]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>31</wp:term_id><wp:category_nicename>haudio</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[haudio]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>32</wp:term_id><wp:category_nicename>illustrator</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[illustrator]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>33</wp:term_id><wp:category_nicename>indesign</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[indesign]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>34</wp:term_id><wp:category_nicename>infrastructure</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[infrastructure]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>35</wp:term_id><wp:category_nicename>inkscape</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[inkscape]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>36</wp:term_id><wp:category_nicename>internal</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[internal]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>37</wp:term_id><wp:category_nicename>interns-2007</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Interns 2007]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>38</wp:term_id><wp:category_nicename>irc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[irc]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>39</wp:term_id><wp:category_nicename>krita</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[krita]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>40</wp:term_id><wp:category_nicename>lgm2007</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[lgm2007]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>41</wp:term_id><wp:category_nicename>liblicense</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[liblicense]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>42</wp:term_id><wp:category_nicename>license</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[license]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>43</wp:term_id><wp:category_nicename>license-engine</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[license engine]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>44</wp:term_id><wp:category_nicename>licenses</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[licenses]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>45</wp:term_id><wp:category_nicename>lrmi</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[LRMI]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>46</wp:term_id><wp:category_nicename>mac-os-x</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Mac OS X]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>47</wp:term_id><wp:category_nicename>mediawiki</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[mediawiki]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>48</wp:term_id><wp:category_nicename>metadata</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[metadata]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>49</wp:term_id><wp:category_nicename>metrics</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Metrics]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>50</wp:term_id><wp:category_nicename>microformats</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[microformats]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>51</wp:term_id><wp:category_nicename>neurocommons</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[neurocommons]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>52</wp:term_id><wp:category_nicename>nutch</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[nutch]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>53</wp:term_id><wp:category_nicename>one-laptop-per-child</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[one laptop per child]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>54</wp:term_id><wp:category_nicename>opencontentlibrary</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[opencontentlibrary]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>55</wp:term_id><wp:category_nicename>opendata</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[opendata]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>56</wp:term_id><wp:category_nicename>openid</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[openid]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>57</wp:term_id><wp:category_nicename>openoffice</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[OpenOffice]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>58</wp:term_id><wp:category_nicename>opensource</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[opensource]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>59</wp:term_id><wp:category_nicename>people</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[people]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>60</wp:term_id><wp:category_nicename>php</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[php]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>61</wp:term_id><wp:category_nicename>platform-integration</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[platform integration]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>62</wp:term_id><wp:category_nicename>powder</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[powder]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>63</wp:term_id><wp:category_nicename>press</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[press]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>64</wp:term_id><wp:category_nicename>prototype</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[prototype]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>65</wp:term_id><wp:category_nicename>provenance</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[provenance]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>66</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[python]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>67</wp:term_id><wp:category_nicename>rammx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ramm.x]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>68</wp:term_id><wp:category_nicename>rdf</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rdf]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>69</wp:term_id><wp:category_nicename>rdfa</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rdfa]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>70</wp:term_id><wp:category_nicename>registry</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[registry]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>71</wp:term_id><wp:category_nicename>releases</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[releases]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>72</wp:term_id><wp:category_nicename>rss</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[rss]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>73</wp:term_id><wp:category_nicename>sanity</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[sanity]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>74</wp:term_id><wp:category_nicename>schema-org</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[schema.org]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>75</wp:term_id><wp:category_nicename>scribus</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[scribus]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>76</wp:term_id><wp:category_nicename>search</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[search]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>77</wp:term_id><wp:category_nicename>semantic-mediawiki</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[semantic mediawiki]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>78</wp:term_id><wp:category_nicename>serif</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[serif]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>79</wp:term_id><wp:category_nicename>slides</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[slides]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>80</wp:term_id><wp:category_nicename>software</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[software]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>81</wp:term_id><wp:category_nicename>standard</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[standard]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>82</wp:term_id><wp:category_nicename>standards</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[standards]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>83</wp:term_id><wp:category_nicename>status-update</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[status update]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>84</wp:term_id><wp:category_nicename>summer-of-code</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[summer of code]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>85</wp:term_id><wp:category_nicename>syndication</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[syndication]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>86</wp:term_id><wp:category_nicename>system-integrated-licensing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[system integrated licensing]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>87</wp:term_id><wp:category_nicename>techblog</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[techblog]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>88</wp:term_id><wp:category_nicename>techsummit</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[techsummit]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>89</wp:term_id><wp:category_nicename>text-mining</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[text mining]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>90</wp:term_id><wp:category_nicename>tools</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tools]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>91</wp:term_id><wp:category_nicename>upload</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[upload]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>92</wp:term_id><wp:category_nicename>video</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[video]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>93</wp:term_id><wp:category_nicename>w3c</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[w3c]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>94</wp:term_id><wp:category_nicename>wiki</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wiki]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>95</wp:term_id><wp:category_nicename>wordpress</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wordpress]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>96</wp:term_id><wp:category_nicename>wplicense</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[wplicense]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>97</wp:term_id><wp:category_nicename>xmp</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[xmp]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>98</wp:term_id><wp:category_nicename>xtech</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[xtech]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>99</wp:term_id><wp:tag_slug>2008</wp:tag_slug><wp:tag_name><![CDATA[2008]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>100</wp:term_id><wp:tag_slug>64-bit</wp:tag_slug><wp:tag_name><![CDATA[64 bit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>2</wp:term_id><wp:tag_slug>add-in</wp:tag_slug><wp:tag_name><![CDATA[Add-In]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>agshare</wp:tag_slug><wp:tag_name><![CDATA[AgShare]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>101</wp:term_id><wp:tag_slug>amazon</wp:tag_slug><wp:tag_name><![CDATA[Amazon]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>102</wp:term_id><wp:tag_slug>amazon-s3</wp:tag_slug><wp:tag_name><![CDATA[Amazon S3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>103</wp:term_id><wp:tag_slug>amd64</wp:tag_slug><wp:tag_name><![CDATA[amd64]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>104</wp:term_id><wp:tag_slug>arista</wp:tag_slug><wp:tag_name><![CDATA[arista]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>105</wp:term_id><wp:tag_slug>ascii-art</wp:tag_slug><wp:tag_name><![CDATA[ascii art]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>106</wp:term_id><wp:tag_slug>attribution</wp:tag_slug><wp:tag_name><![CDATA[attribution]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>107</wp:term_id><wp:tag_slug>basket</wp:tag_slug><wp:tag_name><![CDATA[basket]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>108</wp:term_id><wp:tag_slug>brainstorm</wp:tag_slug><wp:tag_name><![CDATA[brainstorm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>109</wp:term_id><wp:tag_slug>bugtrackers</wp:tag_slug><wp:tag_name><![CDATA[bugtrackers]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>110</wp:term_id><wp:tag_slug>buildout</wp:tag_slug><wp:tag_name><![CDATA[buildout]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>111</wp:term_id><wp:tag_slug>cache</wp:tag_slug><wp:tag_name><![CDATA[cache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>case-studies</wp:tag_slug><wp:tag_name><![CDATA[case studies]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>cc-network</wp:tag_slug><wp:tag_name><![CDATA[CC Network]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>112</wp:term_id><wp:tag_slug>cc-rel</wp:tag_slug><wp:tag_name><![CDATA[cc rel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>113</wp:term_id><wp:tag_slug>cc-wiki</wp:tag_slug><wp:tag_name><![CDATA[cc wiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>114</wp:term_id><wp:tag_slug>cc-logger</wp:tag_slug><wp:tag_name><![CDATA[CC-Logger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>115</wp:term_id><wp:tag_slug>ccapi</wp:tag_slug><wp:tag_name><![CDATA[cc.api]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>116</wp:term_id><wp:tag_slug>cc-engine</wp:tag_slug><wp:tag_name><![CDATA[cc.engine]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>117</wp:term_id><wp:tag_slug>cclicense</wp:tag_slug><wp:tag_name><![CDATA[cc.license]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>118</wp:term_id><wp:tag_slug>cc0</wp:tag_slug><wp:tag_name><![CDATA[cc0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>119</wp:term_id><wp:tag_slug>cclearn</wp:tag_slug><wp:tag_name><![CDATA[cclearn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>ccrel</wp:tag_slug><wp:tag_name><![CDATA[ccrel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>121</wp:term_id><wp:tag_slug>ci</wp:tag_slug><wp:tag_name><![CDATA[ci]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>122</wp:term_id><wp:tag_slug>civicrm</wp:tag_slug><wp:tag_name><![CDATA[civicrm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>123</wp:term_id><wp:tag_slug>cobertura</wp:tag_slug><wp:tag_name><![CDATA[cobertura]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>code-sprint</wp:tag_slug><wp:tag_name><![CDATA[code sprint]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>124</wp:term_id><wp:tag_slug>code-creativecommons-org</wp:tag_slug><wp:tag_name><![CDATA[code.creativecommons.org]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>125</wp:term_id><wp:tag_slug>commoner</wp:tag_slug><wp:tag_name><![CDATA[commoner]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>126</wp:term_id><wp:tag_slug>community</wp:tag_slug><wp:tag_name><![CDATA[community]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>127</wp:term_id><wp:tag_slug>coverage</wp:tag_slug><wp:tag_name><![CDATA[coverage]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>128</wp:term_id><wp:tag_slug>css</wp:tag_slug><wp:tag_name><![CDATA[css]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>129</wp:term_id><wp:tag_slug>css3</wp:tag_slug><wp:tag_name><![CDATA[css3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>130</wp:term_id><wp:tag_slug>debian-2</wp:tag_slug><wp:tag_name><![CDATA[debian]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>131</wp:term_id><wp:tag_slug>deeds</wp:tag_slug><wp:tag_name><![CDATA[deeds]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>132</wp:term_id><wp:tag_slug>deployment</wp:tag_slug><wp:tag_name><![CDATA[deployment]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>development</wp:tag_slug><wp:tag_name><![CDATA[development]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>133</wp:term_id><wp:tag_slug>digital-media-and-learning-competition</wp:tag_slug><wp:tag_name><![CDATA[digital media and learning competition]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>discovered</wp:tag_slug><wp:tag_name><![CDATA[DiscoverEd]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>134</wp:term_id><wp:tag_slug>discovery</wp:tag_slug><wp:tag_name><![CDATA[discovery]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>135</wp:term_id><wp:tag_slug>django</wp:tag_slug><wp:tag_name><![CDATA[django]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>136</wp:term_id><wp:tag_slug>documentation</wp:tag_slug><wp:tag_name><![CDATA[documentation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>137</wp:term_id><wp:tag_slug>domains</wp:tag_slug><wp:tag_name><![CDATA[domains]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>138</wp:term_id><wp:tag_slug>drupal</wp:tag_slug><wp:tag_name><![CDATA[drupal]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>139</wp:term_id><wp:tag_slug>ec2</wp:tag_slug><wp:tag_name><![CDATA[EC2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>140</wp:term_id><wp:tag_slug>eggs</wp:tag_slug><wp:tag_name><![CDATA[eggs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>141</wp:term_id><wp:tag_slug>emacs</wp:tag_slug><wp:tag_name><![CDATA[emacs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>142</wp:term_id><wp:tag_slug>ethiopian-food</wp:tag_slug><wp:tag_name><![CDATA[Ethiopian food]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>143</wp:term_id><wp:tag_slug>filter</wp:tag_slug><wp:tag_name><![CDATA[filter]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>144</wp:term_id><wp:tag_slug>flickr</wp:tag_slug><wp:tag_name><![CDATA[flickr]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>145</wp:term_id><wp:tag_slug>frameworks</wp:tag_slug><wp:tag_name><![CDATA[frameworks]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>146</wp:term_id><wp:tag_slug>free-software</wp:tag_slug><wp:tag_name><![CDATA[free software]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>147</wp:term_id><wp:tag_slug>free-software-foundation</wp:tag_slug><wp:tag_name><![CDATA[Free Software Foundation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>gcs</wp:tag_slug><wp:tag_name><![CDATA[gcs]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>149</wp:term_id><wp:tag_slug>geoip</wp:tag_slug><wp:tag_name><![CDATA[GeoIP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>150</wp:term_id><wp:tag_slug>gettext</wp:tag_slug><wp:tag_name><![CDATA[gettext]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>git</wp:tag_slug><wp:tag_name><![CDATA[git]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>152</wp:term_id><wp:tag_slug>git-svn</wp:tag_slug><wp:tag_name><![CDATA[git-svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>153</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>154</wp:term_id><wp:tag_slug>google-summer-of-code</wp:tag_slug><wp:tag_name><![CDATA[Google Summer of Code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>155</wp:term_id><wp:tag_slug>gpl</wp:tag_slug><wp:tag_name><![CDATA[GPL]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>29</wp:term_id><wp:tag_slug>gsoc</wp:tag_slug><wp:tag_name><![CDATA[GSoC]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>156</wp:term_id><wp:tag_slug>hastac</wp:tag_slug><wp:tag_name><![CDATA[HASTAC]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>157</wp:term_id><wp:tag_slug>html5</wp:tag_slug><wp:tag_name><![CDATA[html5]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>158</wp:term_id><wp:tag_slug>hudson</wp:tag_slug><wp:tag_name><![CDATA[hudson]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>159</wp:term_id><wp:tag_slug>ideas</wp:tag_slug><wp:tag_name><![CDATA[ideas]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>160</wp:term_id><wp:tag_slug>imagemagick</wp:tag_slug><wp:tag_name><![CDATA[imagemagick]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>infrastructure</wp:tag_slug><wp:tag_name><![CDATA[infrastructure]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>161</wp:term_id><wp:tag_slug>internationalization</wp:tag_slug><wp:tag_name><![CDATA[internationalization]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>162</wp:term_id><wp:tag_slug>interns-2008</wp:tag_slug><wp:tag_name><![CDATA[interns 2008]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>163</wp:term_id><wp:tag_slug>ip</wp:tag_slug><wp:tag_name><![CDATA[IP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>irc</wp:tag_slug><wp:tag_name><![CDATA[irc]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>164</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[java]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>165</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[javascript]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>166</wp:term_id><wp:tag_slug>jena</wp:tag_slug><wp:tag_name><![CDATA[Jena]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>167</wp:term_id><wp:tag_slug>jinja2</wp:tag_slug><wp:tag_name><![CDATA[jinja2]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>168</wp:term_id><wp:tag_slug>journalism</wp:tag_slug><wp:tag_name><![CDATA[journalism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>169</wp:term_id><wp:tag_slug>juliaseeliger</wp:tag_slug><wp:tag_name><![CDATA[juliaseeliger]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>170</wp:term_id><wp:tag_slug>learning-registry</wp:tag_slug><wp:tag_name><![CDATA[learning registry]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>171</wp:term_id><wp:tag_slug>libtidy</wp:tag_slug><wp:tag_name><![CDATA[libtidy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>172</wp:term_id><wp:tag_slug>licence-tools</wp:tag_slug><wp:tag_name><![CDATA[licence tools]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>42</wp:term_id><wp:tag_slug>license</wp:tag_slug><wp:tag_name><![CDATA[license]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>44</wp:term_id><wp:tag_slug>licenses</wp:tag_slug><wp:tag_name><![CDATA[licenses]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>173</wp:term_id><wp:tag_slug>loggy</wp:tag_slug><wp:tag_name><![CDATA[Loggy]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>174</wp:term_id><wp:tag_slug>lucene</wp:tag_slug><wp:tag_name><![CDATA[Lucene]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>175</wp:term_id><wp:tag_slug>mac-os-x-2</wp:tag_slug><wp:tag_name><![CDATA[mac os x]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>176</wp:term_id><wp:tag_slug>macarthur-foundation</wp:tag_slug><wp:tag_name><![CDATA[Macarthur foundation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>177</wp:term_id><wp:tag_slug>maxwinde</wp:tag_slug><wp:tag_name><![CDATA[maxwinde]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>47</wp:term_id><wp:tag_slug>mediawiki</wp:tag_slug><wp:tag_name><![CDATA[mediawiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>178</wp:term_id><wp:tag_slug>meta</wp:tag_slug><wp:tag_name><![CDATA[meta]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>48</wp:term_id><wp:tag_slug>metadata</wp:tag_slug><wp:tag_name><![CDATA[metadata]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>179</wp:term_id><wp:tag_slug>metics</wp:tag_slug><wp:tag_name><![CDATA[Metics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>49</wp:term_id><wp:tag_slug>metrics</wp:tag_slug><wp:tag_name><![CDATA[Metrics]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>180</wp:term_id><wp:tag_slug>microdata</wp:tag_slug><wp:tag_name><![CDATA[microdata]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>181</wp:term_id><wp:tag_slug>migration</wp:tag_slug><wp:tag_name><![CDATA[migration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>182</wp:term_id><wp:tag_slug>moritzmetz</wp:tag_slug><wp:tag_name><![CDATA[moritzmetz]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>183</wp:term_id><wp:tag_slug>mozilla-firefox</wp:tag_slug><wp:tag_name><![CDATA[Mozilla Firefox]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>184</wp:term_id><wp:tag_slug>mozilla-service</wp:tag_slug><wp:tag_name><![CDATA[mozilla service]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>185</wp:term_id><wp:tag_slug>mozservice09</wp:tag_slug><wp:tag_name><![CDATA[mozservice09]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>186</wp:term_id><wp:tag_slug>msu</wp:tag_slug><wp:tag_name><![CDATA[MSU]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>187</wp:term_id><wp:tag_slug>mysql</wp:tag_slug><wp:tag_name><![CDATA[mysql]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>188</wp:term_id><wp:tag_slug>namespace</wp:tag_slug><wp:tag_name><![CDATA[namespace]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>189</wp:term_id><wp:tag_slug>network</wp:tag_slug><wp:tag_name><![CDATA[network]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>52</wp:term_id><wp:tag_slug>nutch</wp:tag_slug><wp:tag_name><![CDATA[nutch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>190</wp:term_id><wp:tag_slug>oer</wp:tag_slug><wp:tag_name><![CDATA[OER]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>191</wp:term_id><wp:tag_slug>ontology</wp:tag_slug><wp:tag_name><![CDATA[ontology]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>192</wp:term_id><wp:tag_slug>open-clip-art</wp:tag_slug><wp:tag_name><![CDATA[open clip art]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>193</wp:term_id><wp:tag_slug>open-source</wp:tag_slug><wp:tag_name><![CDATA[open source]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>56</wp:term_id><wp:tag_slug>openid</wp:tag_slug><wp:tag_name><![CDATA[openid]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>57</wp:term_id><wp:tag_slug>openoffice</wp:tag_slug><wp:tag_name><![CDATA[OpenOffice]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>58</wp:term_id><wp:tag_slug>opensource</wp:tag_slug><wp:tag_name><![CDATA[opensource]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>194</wp:term_id><wp:tag_slug>org-babel</wp:tag_slug><wp:tag_name><![CDATA[org-babel]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>195</wp:term_id><wp:tag_slug>org-mode</wp:tag_slug><wp:tag_name><![CDATA[org-mode]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>packaging</wp:tag_slug><wp:tag_name><![CDATA[packaging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>60</wp:term_id><wp:tag_slug>php</wp:tag_slug><wp:tag_name><![CDATA[php]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>197</wp:term_id><wp:tag_slug>picasa</wp:tag_slug><wp:tag_name><![CDATA[picasa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>198</wp:term_id><wp:tag_slug>plug-in</wp:tag_slug><wp:tag_name><![CDATA[plug-in]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>199</wp:term_id><wp:tag_slug>po</wp:tag_slug><wp:tag_name><![CDATA[po]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>200</wp:term_id><wp:tag_slug>public-domain</wp:tag_slug><wp:tag_name><![CDATA[public domain]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>201</wp:term_id><wp:tag_slug>pyrdfa</wp:tag_slug><wp:tag_name><![CDATA[pyrdfa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>66</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[python]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>69</wp:term_id><wp:tag_slug>rdfa</wp:tag_slug><wp:tag_name><![CDATA[rdfa]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>202</wp:term_id><wp:tag_slug>results</wp:tag_slug><wp:tag_name><![CDATA[results]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>203</wp:term_id><wp:tag_slug>roundup</wp:tag_slug><wp:tag_name><![CDATA[roundup]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>204</wp:term_id><wp:tag_slug>rst</wp:tag_slug><wp:tag_name><![CDATA[rst]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>205</wp:term_id><wp:tag_slug>s3</wp:tag_slug><wp:tag_name><![CDATA[S3]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>206</wp:term_id><wp:tag_slug>s3sync</wp:tag_slug><wp:tag_name><![CDATA[S3Sync]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>73</wp:term_id><wp:tag_slug>sanity</wp:tag_slug><wp:tag_name><![CDATA[sanity]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>207</wp:term_id><wp:tag_slug>schema</wp:tag_slug><wp:tag_name><![CDATA[schema]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>208</wp:term_id><wp:tag_slug>scp</wp:tag_slug><wp:tag_name><![CDATA[SCP]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>76</wp:term_id><wp:tag_slug>search</wp:tag_slug><wp:tag_name><![CDATA[search]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>209</wp:term_id><wp:tag_slug>segmentation-fault</wp:tag_slug><wp:tag_name><![CDATA[segmentation fault]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>77</wp:term_id><wp:tag_slug>semantic-mediawiki</wp:tag_slug><wp:tag_name><![CDATA[semantic mediawiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>210</wp:term_id><wp:tag_slug>smw</wp:tag_slug><wp:tag_name><![CDATA[smw]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>80</wp:term_id><wp:tag_slug>software</wp:tag_slug><wp:tag_name><![CDATA[software]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>211</wp:term_id><wp:tag_slug>source-marking</wp:tag_slug><wp:tag_name><![CDATA[source marking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>212</wp:term_id><wp:tag_slug>specifications</wp:tag_slug><wp:tag_name><![CDATA[specifications]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>213</wp:term_id><wp:tag_slug>sphinx</wp:tag_slug><wp:tag_name><![CDATA[sphinx]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>82</wp:term_id><wp:tag_slug>standards</wp:tag_slug><wp:tag_name><![CDATA[standards]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>214</wp:term_id><wp:tag_slug>structured-data</wp:tag_slug><wp:tag_name><![CDATA[structured data]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>215</wp:term_id><wp:tag_slug>student-journalism</wp:tag_slug><wp:tag_name><![CDATA[student journalism]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>216</wp:term_id><wp:tag_slug>student-journalism-20</wp:tag_slug><wp:tag_name><![CDATA[student journalism 2.0]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>84</wp:term_id><wp:tag_slug>summer-of-code</wp:tag_slug><wp:tag_name><![CDATA[summer of code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>217</wp:term_id><wp:tag_slug>svn</wp:tag_slug><wp:tag_name><![CDATA[svn]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>218</wp:term_id><wp:tag_slug>system-administration</wp:tag_slug><wp:tag_name><![CDATA[system administration]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>219</wp:term_id><wp:tag_slug>task-and-project-tracking-system</wp:tag_slug><wp:tag_name><![CDATA[task and project tracking system]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>220</wp:term_id><wp:tag_slug>tcp</wp:tag_slug><wp:tag_name><![CDATA[tcp]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>221</wp:term_id><wp:tag_slug>technical-case-studies</wp:tag_slug><wp:tag_name><![CDATA[technical case studies]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>88</wp:term_id><wp:tag_slug>techsummit</wp:tag_slug><wp:tag_name><![CDATA[techsummit]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>222</wp:term_id><wp:tag_slug>templates</wp:tag_slug><wp:tag_name><![CDATA[templates]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>223</wp:term_id><wp:tag_slug>testing</wp:tag_slug><wp:tag_name><![CDATA[testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>224</wp:term_id><wp:tag_slug>transcoding</wp:tag_slug><wp:tag_name><![CDATA[transcoding]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>225</wp:term_id><wp:tag_slug>translation</wp:tag_slug><wp:tag_name><![CDATA[translation]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>226</wp:term_id><wp:tag_slug>translations</wp:tag_slug><wp:tag_name><![CDATA[translations]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>227</wp:term_id><wp:tag_slug>update</wp:tag_slug><wp:tag_name><![CDATA[update]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>228</wp:term_id><wp:tag_slug>varnish</wp:tag_slug><wp:tag_name><![CDATA[varnish]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>92</wp:term_id><wp:tag_slug>video</wp:tag_slug><wp:tag_name><![CDATA[video]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>229</wp:term_id><wp:tag_slug>virtualenv</wp:tag_slug><wp:tag_name><![CDATA[virtualenv]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>230</wp:term_id><wp:tag_slug>webm</wp:tag_slug><wp:tag_name><![CDATA[webm]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>94</wp:term_id><wp:tag_slug>wiki</wp:tag_slug><wp:tag_name><![CDATA[wiki]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>231</wp:term_id><wp:tag_slug>wikimedia</wp:tag_slug><wp:tag_name><![CDATA[wikimedia]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>232</wp:term_id><wp:tag_slug>wikimedia-commons</wp:tag_slug><wp:tag_name><![CDATA[wikimedia commons]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>95</wp:term_id><wp:tag_slug>wordpress</wp:tag_slug><wp:tag_name><![CDATA[wordpress]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>233</wp:term_id><wp:tag_slug>wordpress-mu</wp:tag_slug><wp:tag_name><![CDATA[wordpress-mu]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>234</wp:term_id><wp:tag_slug>wsgi</wp:tag_slug><wp:tag_name><![CDATA[wsgi]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>235</wp:term_id><wp:tag_slug>wsgi_cache</wp:tag_slug><wp:tag_name><![CDATA[wsgi_cache]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>236</wp:term_id><wp:tag_slug>zpt</wp:tag_slug><wp:tag_name><![CDATA[zpt]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=4.0.1</generator>

	<item>
				<title>The CC Tech Blog</title>
		<link>http://labs.creativecommons.org/2007/04/11/the-cc-tech-blog/</link>
		<pubDate>Wed, 11 Apr 2007 00:52:59 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/11/the-cc-tech-blog/</guid>
		<description></description>
		<content:encoded><![CDATA[Welcome to the Creative Commons Tech Blog.  The CC Tech Blog is a new blog from <a href="http://creativecommons.org">Creative Commons</a>, in particular the geeks at CC.  It's a  place where we'll blog the purely technical details of our projects, the things that probably aren't of interest to the wider community.  If you're interested in Python coding, WordPress hacking, HTTP acceleration, XML parsing or GUI toolkits, this might be the place for you.  

This is a work in progress, so if you have suggestions, ideas or questions, you can find us on <a href="http://wiki.creativecommons.org/IRC">IRC</a> or the <a href="http://wiki.creativecommons.org/Mailing_Lists">cc-devel</a> mailing list.

Enjoy!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2007-04-11 00:52:59</wp:post_date>
		<wp:post_date_gmt>2007-04-11 00:52:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-cc-tech-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techblog"><![CDATA[techblog]]></category>
	</item>
	<item>
				<title>wpLicense 0.7.6</title>
		<link>http://labs.creativecommons.org/2007/04/11/wplicense-076/</link>
		<pubDate>Wed, 11 Apr 2007 12:47:43 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/11/wplicense-076/</guid>
		<description></description>
		<content:encoded><![CDATA[Today I released <a href="http://wiki.creativecommons.org/WpLicense">wpLicense</a> 0.7.6 (<strike>download</strike> see update below).  It's a minor bug fix, but one worth noting.  Thanks to Tiago and CristÃ³bal for both reporting the bug.

The bug was simple: the <a href="http://wiki.creativecommons.org/WpLicense_Function_Reference">documentation</a> says that the <code>licenseUri</code> function returns the URI of the selected license.  And that's what the internal wpLicense code relied on.  However, the implementation actually <code>echo</code>'d the URI, introducing a race condition: if things were timed <em>just right</em>, the problem wasn't apparent.  But too often they weren't, and then it was.

There are some outstanding issues with wpLicense, particularly with rendering the selection interface under Internet Explorer.  That's just one of the tasks new <a href="http://creativecommons.org/about/opportunities#web">web engineer</a> will be tackling when he or she comes on board.  Which reminds me, we're still accepting resumes.

<hr noshade="noshade" /><strong>UPDATE:</strong> Yeah, so 0.7.6 only had half the fix; well, the entire fix, but I was braindead with the default parameter value.  So I give you <a href="http://mirrors.creativecommons.org/software/wplicense/download/wplicense-0.7.6.1.zip">0.7.6.1</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2007-04-11 12:47:43</wp:post_date>
		<wp:post_date_gmt>2007-04-11 12:47:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wplicense-076</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="category" nicename="wplicense"><![CDATA[wplicense]]></category>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Eric]]></wp:comment_author>
			<wp:comment_author_email>eric@outhink.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.spinxpress.com</wp:comment_author_url>
			<wp:comment_author_IP>71.111.1.40</wp:comment_author_IP>
			<wp:comment_date>2007-04-11 23:18:48</wp:comment_date>
			<wp:comment_date_gmt>2007-04-11 23:18:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great to see this...look forward to hearing about what you guys are up to :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Garrett]]></wp:comment_author>
			<wp:comment_author_email>chris@chrisg.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.chrisg.com/</wp:comment_author_url>
			<wp:comment_author_IP>86.156.10.88</wp:comment_author_IP>
			<wp:comment_date>2007-08-14 14:35:08</wp:comment_date>
			<wp:comment_date_gmt>2007-08-14 14:35:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have tried 0.9-rc1 and can't get it to work (wp2.2 + firefox2), it doesn't render correctly in options and doesn't save my selections or output anything in the footer. Is it worth trying 0.7.6.1. instead?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Marc]]></wp:comment_author>
			<wp:comment_author_email>alain@yahoo.fr</wp:comment_author_email>
			<wp:comment_author_url>http://japan-best.com</wp:comment_author_url>
			<wp:comment_author_IP>183.76.250.169</wp:comment_author_IP>
			<wp:comment_date>2012-05-14 00:42:13</wp:comment_date>
			<wp:comment_date_gmt>2012-05-14 00:42:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, I too had a problem of it doesn’t render correctly in FF, as well as safari, and the contact dont appear in safar
any tipos
Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>XMP and open source article on Linux.com</title>
		<link>http://labs.creativecommons.org/2007/04/11/xmp-and-open-source-article-on-newsforge/</link>
		<pubDate>Wed, 11 Apr 2007 23:41:12 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/11/xmp-and-open-source-article-on-newsforge/</guid>
		<description></description>
		<content:encoded><![CDATA[Nathan Willis writes about <a href="http://www.linux.com/article.pl?sid=07/03/23/1926259">XMP making inroads in open source imaging software</a> at Linux.com. Nice closing:
<blockquote>Take Creative Commons, for example, which has already embraced XMP, even providing custom XMP templates with which Photoshop users can add Creative Commons licensing information. The size of the collective CC-licensed works on the Internet far outscales any personal or corporate collection; who better to leverage that collection than the free software community?</blockquote>
See <a href="http://wiki.creativecommons.org/XMP">XMP on the CC developer wiki</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2007-04-11 23:41:12</wp:post_date>
		<wp:post_date_gmt>2007-04-11 23:41:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmp-and-open-source-article-on-newsforge</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="press"><![CDATA[press]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>Summer of Code Projects</title>
		<link>http://labs.creativecommons.org/2007/04/12/summer-of-code-projects/</link>
		<pubDate>Thu, 12 Apr 2007 12:56:50 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/12/summer-of-code-projects/</guid>
		<description></description>
		<content:encoded><![CDATA[We're very happy to have five students working on Creative Commons and Science Commons projects in conjunction with this year's Google "Summer of Code":http://code.google.com/soc.  Briefly, they are:

* Cassio de Albuquerque Melo, working on a plug-in for OpenOffice.org to "support CC licensing":http://wiki.creativecommons.org/OpenOfficeOrg_Addin
* Jason Kivlighn, working on adding licensing support to "Tracker":http://www.gnome.org/projects/tracker/
* Alan Kelon Oliveira de Moraes, working on making "Nutch":http://lucene.apache.org/nutch/ "RDFa":http://rdfa.info aware
* Taylor R. Campbell, working on RDF Tools in Scheme (Science Commons, they'll have to explain)
* Matthias Samwald, working on, well, something Science-y and Semantic Web-y... again, they'll have to explain

Congratulations to the students selected, and thanks to everyone who submitted applications.  There were lots of really good applications, which is incredibly encouraging.  I'm really excited to see where the projects go this summer, and we hope to have the students blogging about their progress here.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2007-04-12 12:56:50</wp:post_date>
		<wp:post_date_gmt>2007-04-12 12:56:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-of-code-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Cassio Melo]]></wp:comment_author>
			<wp:comment_author_email>cassio.ufpe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cin.ufpe.br/~cam2/info/english</wp:comment_author_url>
			<wp:comment_author_IP>201.50.179.219</wp:comment_author_IP>
			<wp:comment_date>2007-04-12 14:58:19</wp:comment_date>
			<wp:comment_date_gmt>2007-04-12 14:58:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Congratulations for all students accepted in the program! Thanks to mentors! I'm glad to be joining in CC group this summer. You will receive regular feedback about my project. 

Cheers,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive More Summer of Code projects &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2007/04/12/more-summer-of-code-projects/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.164.234</wp:comment_author_IP>
			<wp:comment_date>2007-04-12 20:51:33</wp:comment_date>
			<wp:comment_date_gmt>2007-04-12 20:51:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Nathan blogged the five accepted Creative Commons/Science Commons projects. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive Summer of Code Project: Including RDFa support in Nutch: Updating the ccNutch plug-in &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2007/04/13/summer-of-code-project-including-rdfa-support-in-nutch-updating-the-ccnutch-plug-in/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.164.234</wp:comment_author_IP>
			<wp:comment_date>2007-04-13 14:58:22</wp:comment_date>
			<wp:comment_date_gmt>2007-04-13 14:58:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] one of the selected students for Google Summer of Code 2007 and I&#8217;m pleased to be joining Creative Commons community this [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>WordPress MU v. Lyceum</title>
		<link>http://labs.creativecommons.org/2007/04/12/wordpress-mu-v-lyceum/</link>
		<pubDate>Thu, 12 Apr 2007 17:55:04 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/12/wordpress-mu-v-lyceum/</guid>
		<description></description>
		<content:encoded><![CDATA[We're preparing to launch "hosted blogging":http://wiki.creativecommons.org/CCi_Blogs service for our "international affiliates":http://creativecommons.org/worldwide, and the TechBlog is actually the first blog to run on the new "WordPress MU":http://mu.wordpress.org installation.  Sort of "eating our own dog food":http://en.wikipedia.org/wiki/Eating_one%27s_own_dog_food, I suppose.  Much of the pre-launch work (beyond the obvious theme tweaking, etc) was in evaluating which WordPress-based multi-user blog product was more appropriate: "Lyceum":http://en.wikipedia.org/wiki/Lyceum_%28software%29 or "WordPress MU":http://en.wikipedia.org/wiki/WordPress_MU.

<!--more-->

I admit that going into the evaluation, I was predisposed to like Lyceum.  This predisposition, like so many, was based on completely irrelevant facts: I like the way their website looks, I dislike the wordpress.org forums[1], that sort of thing.  And initially it looked like Lyceum was going to be the winner.  Both their website and the Wikipedia article on Lyceum[2] stated that a difference between MU and Lyceum was MU's requirement that every user have their own blog.  That was clearly a deal breaker for us: we needed multiple multi-user blogs, not multiple single user blogs (and we didn't want a pile of single-user blogs lying around as a side effect of implementing the multi-user blogs).  However, after installing MU and poking at it a bit, this doesn't seem to be the case any longer.

The primary difference really comes down to how they handle the database tables.  WordPress MU creates a separate set of tables for every blog.  Lyceum modifies the basic WordPress table structure to add blog information to the tables.  And there seems to be some debate over which is more efficient and scalable: tons of rows, or tons of tables.  In the end, I'm not smart enough (or maybe I just don't care enough) to evaluate which statement is truer.  We chose WordPress MU for a couple reasons:

* Wordpress.com uses it, so it's *at least* scalable enough for an installation of that size (which we won't even approach).
* It appears that some of the core WordPress developers work on it, and it shares much of the same table schema information with WordPress.  This leads me believe that it will track the core WordPress development closer.

So in the end, it came down to a gut feeling more than anything else.  I suppose this is the best sort of evaluation you could ask for: one where you have two great pieces of software, and it really comes down to these intangibles.  It certainly speaks well of the open source community, and the WordPress core in particular.

fn1. More than I dislike most forums, which is saying something.

fn2. Since edited.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2007-04-12 17:55:04</wp:post_date>
		<wp:post_date_gmt>2007-04-12 17:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wordpress-mu-v-lyceum</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="evaluation"><![CDATA[evaluation]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Creative Commons and WordPress &laquo; Andy Skelton]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://andy.wordpress.com/2007/05/07/creative-commons-and-wordpress/</wp:comment_author_url>
			<wp:comment_author_IP>208.96.40.132</wp:comment_author_IP>
			<wp:comment_date>2007-05-08 00:17:42</wp:comment_date>
			<wp:comment_date_gmt>2007-05-08 00:17:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] It&#8217;s no secret that they like WordPress. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Jeremy]]></wp:comment_author>
			<wp:comment_author_email>jeremy.visser@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jeremy.sunriseroad.net/</wp:comment_author_url>
			<wp:comment_author_IP>203.158.56.234</wp:comment_author_IP>
			<wp:comment_date>2007-05-08 03:41:45</wp:comment_date>
			<wp:comment_date_gmt>2007-05-08 03:41:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, the FAQ on the Lyceum website is slightly inaccurate where it talks about the difference between WPMU and Lyceum. The FAQ states that, like you said, WPMU blogs can only have one user, and can't have users without a blog. This has since changed, and you can sign up on a WPMU installation and select "Gimme a blog" or "Just a username, please".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[drmike]]></wp:comment_author>
			<wp:comment_author_email>theapparatus@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://daria.be</wp:comment_author_url>
			<wp:comment_author_IP>152.43.1.4</wp:comment_author_IP>
			<wp:comment_date>2007-05-09 13:10:27</wp:comment_date>
			<wp:comment_date_gmt>2007-05-09 13:10:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The 'one blog = one user' and 'users without blogs' was how the software was originally designed way back when.

hmm, 'users without blogs'.  now there's a name for a band if I ever heard one. :)

Hope to see you soon on the MU support forums.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Lloyd Budd]]></wp:comment_author>
			<wp:comment_author_email>foolswisdom@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://foolswisdom.com/</wp:comment_author_url>
			<wp:comment_author_IP>154.5.114.228</wp:comment_author_IP>
			<wp:comment_date>2007-05-10 00:15:11</wp:comment_date>
			<wp:comment_date_gmt>2007-05-10 00:15:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How are you enjoying your MU installation?

Yes, some of the main core WordPress developers also maintain MU led by Donncha. Yes, MU tracks WordPress very closely and the differences are isolated for maintainability.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>More Summer of Code projects</title>
		<link>http://labs.creativecommons.org/2007/04/12/more-summer-of-code-projects/</link>
		<pubDate>Thu, 12 Apr 2007 20:51:24 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/12/more-summer-of-code-projects/</guid>
		<description></description>
		<content:encoded><![CDATA[Nathan <a href="http://techblog.creativecommons.org/2007/04/12/summer-of-code-projects/">blogged the five accepted Creative Commons/Science Commons projects</a>.

There's also at least one CC-related SoC project being mentored by another oganization: <a href="http://code.google.com/soc/inkscape/appinfo.html?csaid=C7DF84C10F57F82D">ccHost/Inkscape integration</a> by Bruno LuÃ­s GonÃ§alves Dilly, mentored by Bryce Harrington for the Inkscape project. Bruno was a CC SoC student last year and Bryce just completed a contract project for CC...

It's also worth noting three of the proposals we would have loved to accept, if only Google had given us eight slots instead of five (no complaints!):
<ul>
	<li>An OpenOffice plugin for finding and importing CC licensed content (see <a href="http://creativecommons.org/weblog/entry/7204">ThinkFree's implementation</a>, contrast with the accepted OO.o project to CC license OO.o documents, similar to the <a href="http://wiki.creativecommons.org/Microsoft_Office_Addin">MS Office Addin</a>).</li><li>A CC licensing module for Gallery2.</li><li>CC census, extending our adoption statistics project.</li>
</ul>
Many other projects are outlined on the <a href="http://wiki.creativecommons.org/Developer_Challenges">CC developer challenge pages</a>. Sorry only five could be accepted with Google financial support!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2007-04-12 20:51:24</wp:post_date>
		<wp:post_date_gmt>2007-04-12 20:51:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-summer-of-code-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>Summer of Code Project: &quot;Including RDFa support in Nutch: Updating the ccNutch plug-in&quot;</title>
		<link>http://labs.creativecommons.org/2007/04/13/summer-of-code-project-including-rdfa-support-in-nutch-updating-the-ccnutch-plug-in/</link>
		<pubDate>Fri, 13 Apr 2007 14:58:14 +0000</pubDate>
		<dc:creator><![CDATA[alankelon]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/13/summer-of-code-project-including-rdfa-support-in-nutch-updating-the-ccnutch-plug-in/</guid>
		<description></description>
		<content:encoded><![CDATA[Hello!

I'm one of the <a href="http://techblog.creativecommons.org/2007/04/12/summer-of-code-projects/">selected students</a> for Google Summer of Code 2007 and I'm pleased to be joining Creative Commons community this summer. My project title is <a href="http://code.google.com/soc/cc/appinfo.html?csaid=33FD37DB5A5F2E4C">Including RDFa support in Nutch: Updating the ccNutch plug-in</a> under mentoring of<a href="http://yergler.net/"> Nathan R. Yergler</a>. The abstract (with hyperlinks missing in soc page) is:
<blockquote><a href="http://www.w3.org/TR/2007/WD-xhtml-rdfa-primer-20070312">RDFa</a> is emerging standard from W3 Consortium to provide a <a href="http://www.w3.org/2001/sw/BestPractices/HTML/2005-rdfa-syntax">syntax</a> that expresses semantics in structured data using a set of elements and attributes that embeds RDF in HTML, such as a license on a document or
a photoâ€™s creator name and its camera setting information.

<a href="http://lucene.apache.org/nutch">Nutch</a> is an open source search engine that uses <a href="http://lucene.apache.org/">Lucene</a> for searching the Web (or a subset of it) or in a customized form for an intranet. <a href="http://wiki.creativecommons.org/CcNutch">ccNutch</a> is a plug-in for Nutch to search Creative Commons content. Currently, ccNutch indexes only text documents and does not support RDFa very well.

The inclusion of RDFa in ccNutch will be a great improvement for the advances of semantic web because we could easily index image, audio and video contained in web pages through their RDFa meta-data and then search them. In this way, we will be increasing our range of searchable artifacts available under creative licenses that is a worth to try.</blockquote>
My first step is to update ccNutch with the source code from Lucene repository. Then I'll start to write the Requirements Document and Architecture to define precisely what I'll do. To do so, I'm going to study the ccNutch and Nutch code base more deeply as well to study the RDFa standard. After that, I'll write the Project Plan document to define our schedule, milestones and make risk assessment.

Right now, let me introduce myself: My name is Alan Kelon, I'm 23 years old and I live in <a href="http://en.wikipedia.org/wiki/Recife">Recife</a>, Brazil. I am a 1st year Ph.D.  student in Computer Science (in Portuguese)  at <a href="http://www.cin.ufpe.br">Informatics Center</a> (in Portuguese), <a href="http://www.ufpe.br">Federal University of Pernambuco</a> (in Portuguese), a.k.a. CIn/UFPE. The university and my house are very close to <a href="http://en.wikipedia.org/wiki/Ricardo_Brennand_Institute" title="Ricardo Brennand Institute">Ricardo Brennand Institute</a> :-)  I also hold a M.Sc. degree in Computer Science from Federal University of Pernambuco (2005-2007) â€“ entitled as "A Software Process Proposal to Open Source Software Factories" â€“ and a B.Sc. in Computer Science from <a href="http://www.ufpb.br">Federal University of ParaÃ­ba</a> (2005).  In 2006, I was a teaching assistant in a Software Engineer graduate level  class. The course was entitled "Software Engineering: Building Open Source  Software Factories".  This year edition of the course will be starting at the end of this month and I'll be lecturer again. This year, I lectured in a undergraduate leval class entitled "Advanced Topics in Software Engineering: Open Source Software".

Since my undergrad studies I'm involved with free software. The first contact was to to build and maintain a Beowulf Linux cluster and to developed a high availability system from 10/2002 to 01/2005. In the past, I was also with <a href="http://www.debian.org">Debian</a> in my local community,  played with <a href="http://www.andromda.org">AndroMDA</a> in the very early stages of <a href="http://openerp.persapiens.org">OpenERP</a>, developed <a href="http://vensso.sourceforge.net">VENSSO CRM</a> (in Portuguese), mentored/founded <a href="http://sourceforge.net/projects/gvsproject">GVS</a> and <a href="http://sourceforge.net/project/telescope">Telescope</a>. This last one is my active research project as part of my Ph.D.  Finally, I lead the research group on Open Source and Distributed Software Development at Informatics Center, Federal University of Pernambuco, and <a href="http://salu.cesar.org.br/ncm_cesar/servlet/newstorm.ns.presentation.NavigationServlet?publicationCode=15&amp;pageCode=1229">C.E.S.A.R</a> â€“ Recife Center for Advanced Studies and Systems â€“, with strong collaboration of the local software industry, where I have the  opportunity to advocate the open source development model and philosophy.

All in all: "Talk is cheap, show me the code". Let's do it now ;-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2007-04-13 14:58:14</wp:post_date>
		<wp:post_date_gmt>2007-04-13 14:58:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-of-code-project-including-rdfa-support-in-nutch-updating-the-ccnutch-plug-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="nutch"><![CDATA[nutch]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Israel]]></wp:comment_author>
			<wp:comment_author_email>wegols2@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>157.100.229.12</wp:comment_author_IP>
			<wp:comment_date>2010-08-18 19:13:20</wp:comment_date>
			<wp:comment_date_gmt>2010-08-18 19:13:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Alan, I was reading about Nutch plugin you mentioned in this article and I find very interesting, I have version 1.1 of Nutch. I wonder if the plugin was successfully developed, if I can integrate into my version of Nutch or already installed by default. Greetings from Ecuador


Hola Alan, estuve leyendo acerca del plugin para Nutch que mencionas en este artículo y me parece muy interesante, tengo la versión 1.1 de Nutch. Me pregunto si el plugin fue desarrollado con éxito, si lo puedo integrar en mi version de Nutch o si ya viene instalado por defecto. Saludos desde Ecuador]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Summer of Code: &quot;Indexing Embedded License Claims in Tracker&quot;</title>
		<link>http://labs.creativecommons.org/2007/04/14/summer-of-code-indexing-embedded-license-claims-in-tracker/</link>
		<pubDate>Sat, 14 Apr 2007 00:38:03 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/14/summer-of-code-indexing-embedded-license-claims-in-tracker/</guid>
		<description></description>
		<content:encoded><![CDATA[Hello all,

I'm Jason Kivlighn, a selected student for Google's Summer of Code.  Here's the gist of my project:

<blockquote>Working under Creative Commons, I will extended the <a href="http://www.gnome.org/projects/tracker/">Tracker</a> search and indexing engine to support the extraction of license claims. Because of the various forms that the license may take, I will build support based on the recommendations of Creative Commons, as outlined at http://creativecommons.org/technology/usingmarkup...
At the very least, the project will result in Tracker gaining support for indexing license claims embedding in MP3, OGG, PDF, HTML, and XML formats.</blockquote>

<a href="http://code.google.com/soc/cc/appinfo.html?csaid=1B2CE25E80A89A15">http://code.google.com/soc/cc/appinfo.html?csaid=1B2CE25E80A89A15</a>

Now for a little about myself.  I'm an undergraduate at the University of Washington in Seattle majoring in Computer Engineering.  I've been an Open Source enthusiast since I found Linux as a development platform about 6 years ago.  I developed <a href="http://krecipes.sf.net">Krecipes</a> for a few years and now am working on <a href="http://mdn.wikidot.com">Sidestream</a>, a network for artists to distribute their works.  I like hacking together projects here and there as I see fit.  My <a href="http://students.washington.edu/jkivligh/uwroutes/">UW campus shortest route finder</a> was a fun little project to settle the "What's the fastest way from X to Y" disputes once-and-for-all.

My spring quarter is a hassle of Comp. Eng. studies and TA'ing for the 'Programming Languages' course; but as summer rolls around, I'll be ready for a summer of hacking with Tracker and CC :-)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2007-04-14 00:38:03</wp:post_date>
		<wp:post_date_gmt>2007-04-14 00:38:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-of-code-indexing-embedded-license-claims-in-tracker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>Summer of Code Project: â€œOpenOffice.org Writer Add-in for Publishing CC Licensed Documentsâ€</title>
		<link>http://labs.creativecommons.org/2007/04/14/summer-of-code-project-openofficeorg-writer-add-in-for-publishing-cc-licensed-documents/</link>
		<pubDate>Sat, 14 Apr 2007 19:45:17 +0000</pubDate>
		<dc:creator><![CDATA[ksiomelo]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/14/summer-of-code-project-%e2%80%9copenofficeorg-writer-add-in-for-publishing-cc-licensed-documents%e2%80%9d/</guid>
		<description></description>
		<content:encoded><![CDATA[Hi there!

I also was selected for the Google Summer of Code with this project mentored by Nathan R. Yergler. An introduction about the project:

<blockquote>
The goal of this project is to provide a tool for supporting the process of licensing documents. <a href="http://wiki.creativecommons.org/Microsoft_Office_Addin">Microsoft Office has a Creative Commons plug-in</a> to put licenses metadata in its documents. I propose a similar <a href="http://wiki.creativecommons.org/OpenOfficeOrg_Addin">Creative Commons add-in for OpenOffice.org</a> that would allow license information to be embedded in OpenOffice.org documents. Despite being a requested feature for OpenOffice.org for more than two years, nothing has materialized. Having a simple way to add Creative Commons licenses will help to spread those licenses much more broadly. Making licenses available as Autotext for example, is one way this can be reached.</blockquote>

At first moment, I will concentrate on OOo Writer plugin, but of course, I have plans to extend this functionality to Calc and Impress as well. Get the full proposal <a href="http://www.cin.ufpe.br/~cam2/soc2007proposal.txt">here</a>. If you have any suggestion, please let me know.

Let me introduce myself. My name is Cassio Melo, I'm 22 old and I live in Recife, Brazil. I'm an undergraduate at the same university of Alan Kelon (<a href="http://www.cin.ufpe.br">Informatics Center</a>, <a href="http://www.ufpe.br">Federal University of Pernambuco</a>). 

Beyond my passion for Computer Science, I also have interests in Business and Economy. <a href="http://www.e-drexler.com/p/idx04/00/0404drexlerBioCV.html">Eric Drexler</a> and <a href="http://www.claytonchristensen.com/">Clayton Christensen</a> are my preferred authors.

I did work for a summer in my undergraduate course at Federal University of Pernambuco with the <a href="https://simple.dev.java.net/">SimPLe</a>, which is an open source software factory using Product Line approach for action games domain.

This year, I developed an OOo plugin to replace the existing OOo notes. Public distribution will begin in the near future.

Additionally I have a year of industrial experience, having worked as a software engineer on <a href="http://www.cesar.org.br">C.E.S.A.R</a>,  developing a <a href="http://wdbc2006.cesar.org.br/wp-content/uploads/23959.pdf">tool</a> (codenamed BART project) for software components search and retrieval. We also have developed plugins for Eclipse, MS Word and OpenOffice.org for supporting artifacts searching. As a member of the <a href="http://www.rise.com.br">R.i.S.E</a> group, I've worked on algorithms for ranking software components.

You can view my full profile <a href="http://www.cin.ufpe.br/~cam2/info/english">here</a>.

Finally, I would like to share the thanks with my friends. We hope to bring new energy and enthusiasm to CC projects. :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2007-04-14 19:45:17</wp:post_date>
		<wp:post_date_gmt>2007-04-14 19:45:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-of-code-project-openofficeorg-writer-add-in-for-publishing-cc-licensed-documents</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>Summer of Code: &quot;Converting biomedical text mining data to RDF, integrating results with existing Neurocommons RDF data, generating a RDFa-based web interface for presentation&quot;</title>
		<link>http://labs.creativecommons.org/2007/04/18/summer-of-code-converting-biomedical-text-mining-data-to-rdf-integrating-results-with-existing-neurocommons-rdf-data-generating-a-rdfa-based-web-interface-for-presentation/</link>
		<pubDate>Wed, 18 Apr 2007 16:59:45 +0000</pubDate>
		<dc:creator><![CDATA[matthiassamwald]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/18/summer-of-code-converting-biomedical-text-mining-data-to-rdf-integrating-results-with-existing-neurocommons-rdf-data-generating-a-rdfa-based-web-interface-for-presentation/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>About the project</strong>

The <a href="http://sciencecommons.org:81/projects/data/">Neurocommons project</a> wants to lay the foundation for a Semantic Web for neuroscience by creating resources that others will want to link to, extend, and build upon, and in so doing, to set an example that can be replicated in other scientific disciplines. One aspect of that goal is to make relationships in biomedical texts openly accessible on the Semantic Web.

The proposed project will add to the value of the Neurocommons project in two ways:

1) It will use the <a href="http://www.ebi.ac.uk/webservices/whatizit/info.jsf">Whatizit text mining resource</a> of the <a href="http://www.ebi.ac.uk/">European Bioinformatics Institute</a> as a source to generate RDF.
The text mining data of Whatizit are of a high quality and provide rich information that complements existing text mining data from the Neurocommons project. The RDF derived from Whatizit will be integrated with the existing Neurocommons annotations, resulting in a significantly increased coverage. The software written will demonstrate a typical pipeline for conversion of text mining results to good quality RDF.
The Whatizit service can mine either Pubmed abstracts or free text supplied by a user. We will provide a simple interface so that open access scientific articles can be easily acquired and mined by the tool, so that users with rights to non-open access scientific articles can mine that text and submit the resultant RDF, which, as knowledge, is not protected by copyright.

2) Software will be written to set up a website to present the information derived from the Neurocommons textmining and the Whatizit derived facts. Pages on this website will use <a href="http://www.w3.org/TR/xhtml-rdfa-primer/">RDFa</a> for markup, integrating the human readable text with the machine readable markup in a single document.

The resulting resource will not only be valuable for neuroscientific researchers â€“ it will also serve as a model implementation that unifies text mining, Semantic Web standards and the philosophy of Science Commons / Creative Commons for the advancement of scientific research and global information exchange in general.

<strong>About myself</strong>

My name is Matthias Samwald and I come from Austria. I have studied neurobiology at the University of Vienna from 2000 to 2005. The work of my doctoral thesis, starting in 2005, is focussed on the use of Semantic Web technologies in neuroscience and biomedicine. Since 2006 I am a member of the World Wide Web Consortium (W3C) as an â€˜invited expertâ€™. I am an active participant of the <a href="http://www.w3.org/2001/sw/hcls/">â€œSemantic Web in Health Care and Life Science Interest Groupâ€</a> of the W3C.

<a href="http://neuroscientific.net/curriculum">My curriculum</a>
<a href="http://neuroscientific.net/semantic">My doctoral thesis and corresponding publications
</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2007-04-18 16:59:45</wp:post_date>
		<wp:post_date_gmt>2007-04-18 16:59:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-of-code-converting-biomedical-text-mining-data-to-rdf-integrating-results-with-existing-neurocommons-rdf-data-generating-a-rdfa-based-web-interface-for-presentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bioinformatics"><![CDATA[bioinformatics]]></category>
		<category domain="category" nicename="neurocommons"><![CDATA[neurocommons]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="text-mining"><![CDATA[text mining]]></category>
	</item>
	<item>
				<title>CC Tools @ Berlios Unavailable</title>
		<link>http://labs.creativecommons.org/2007/04/23/cc-tools-berlios-unavailable/</link>
		<pubDate>Mon, 23 Apr 2007 11:38:51 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/23/cc-tools-berlios-unavailable/</guid>
		<description></description>
		<content:encoded><![CDATA[Back in November, 2005, SourceForge wasn't looking so hot: no Subversion support, despite repeated promises for it, seemingly increasing down time, that sort of thing.  "Berlios":http://en.wikipedia.org/wiki/Berlios seemed to be the obvious alternative, and so we moved the "ccPublisher":http://wiki.creativecommons.org/CcPublisher project to it.  It was undergoing a period of really active refactoring, and Subversion actually made some of that easier.  SourceForge actually launched their Subversion service not long after we left, but there was never a compelling reason to merge things back together -- the two codebases didn't have tons of intersection points and there was never a pressing need that would raise the idea to the top of the task list.

Unfortunately Berlios has apparently taken a big dirt nap.  I was traveling over the weekend and when I came back online yesterday there were several messages asking about ccPublisher downloads (which were hosted at Berlios).  At this point it appears Berlios has been down for at least 72 hours.  I haven't been able to find anything online about what happened or when (if) service is expected to return.  The bad news (yes, that wasn't really the bad news) is that we don't have backups (outside of Berlios, of course) for the ccPublisher installers.

So until we get things figured out, downloads of "ccPublisher":http://wiki.creativecommons.org/CcPublisher, the "command line tools":http://wiki.creativecommons.org/Command_Line_Tools, and anything else hosted at Berlios (just some libraries, I think) are all unavailable.  We're working on getting things restored and will keep everyone updated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2007-04-23 11:38:51</wp:post_date>
		<wp:post_date_gmt>2007-04-23 11:38:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-tools-berlios-unavailable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="berlios"><![CDATA[berlios]]></category>
		<category domain="category" nicename="ccpublisher"><![CDATA[ccPublisher]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive Berlios.de back online &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2007/04/23/berliosde-back-online/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.164.234</wp:comment_author_IP>
			<wp:comment_date>2007-04-23 21:37:30</wp:comment_date>
			<wp:comment_date_gmt>2007-04-23 21:37:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the downtime we reported this morning, Berlios is back online. ccPublisher downloads are now available again. We&#8217;ll be [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>StuffIt 10 Considered Harmful</title>
		<link>http://labs.creativecommons.org/2007/05/01/stuffit-10-considered-harmful/</link>
		<pubDate>Tue, 01 May 2007 14:52:13 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/01/stuffit-10-considered-harmful/</guid>
		<description></description>
		<content:encoded><![CDATA[Mac OS X users of "ccPublisher":http://wiki.creativecommons.org/CcPublisher have long been plagued by the following error:

<code>No module named os.  Check console.log for complete error report.</code>

The source of this has been a mystery.  For a while the pattern suggested it was only older, non-supported versions of Mac OS X.  Then my suspicion was Intel-based Macs.  But neither of those really held up under scrutiny.  Last month a "thread":http://mail.python.org/pipermail/pythonmac-sig/2007-April/018882.html on the Python Mac SIG(Special Interest Group) mailing list revealed the culprit: Stuffit 10.

<div align="center"><img src='http://techblog.creativecommons.org/files/2007/05/stuffit_prefs.png' alt='StuffIt 11 Preferences' /></div>

StuffIt has an option to "continue expanding" archives, so if you have a gzipped tar file, it will do both passes: un-gzip, un-tar at once.  However, Python applications packaged for Mac OS X using the "py2app":http://cheeseshop.python.org/pypi/py2app/ utility contain an additional zip file, hidden in the application.  This zip file contains the Python runtime library.  Apparently StuffIt 10 traverses into application bundles and continues the unzip process if you've chosen to "continue expanding".

From my brief testing this morning, it appears that StuffIt 11 is smarter in this respect -- even with "continue expanding" checked it doesn't traverse into application bundles.  So if you've run into this problem, either unzip from the command line or upgrade StuffIt.  Future releases of CC software for OS X will use DMG(disk image) files to avoid this problem in the future.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2007-05-01 14:52:13</wp:post_date>
		<wp:post_date_gmt>2007-05-01 14:52:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stuffit-10-considered-harmful</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ccpublisher"><![CDATA[ccPublisher]]></category>
		<category domain="category" nicename="mac-os-x"><![CDATA[Mac OS X]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
	</item>
	<item>
				<title>Atom License Extension</title>
		<link>http://labs.creativecommons.org/2007/05/04/atom-license-extension/</link>
		<pubDate>Fri, 04 May 2007 05:51:39 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/04/atom-license-extension/</guid>
		<description></description>
		<content:encoded><![CDATA[Thanks to the work of James Snell the<a href="http://www.snellspace.com/wp/?p=649"> Atom License Extension has been approved for publishing as an Experimental RFC</a>.

Read about CC license support in RSS 1.0, RSS 2.0, and Atom 1.0 on our <a href="http://wiki.creativecommons.org/Syndication">wiki page about syndication</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2007-05-04 05:51:39</wp:post_date>
		<wp:post_date_gmt>2007-05-04 05:51:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>atom-license-extension</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="atom"><![CDATA[atom]]></category>
		<category domain="category" nicename="rss"><![CDATA[rss]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="syndication"><![CDATA[syndication]]></category>
	</item>
	<item>
				<title>Videos</title>
		<link>http://labs.creativecommons.org/videos/</link>
		<pubDate>Wed, 14 Jan 2009 18:56:13 +0000</pubDate>
		<dc:creator><![CDATA[alex]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?page_id=261</guid>
		<description></description>
		<content:encoded><![CDATA[CC technical videos. Screencasts, tech summits, etc.

              <div class="column-container video-container">
                <div class="video">
                	<a href="/videos/tech-summit-dec-2008"><img src="/files/2009/01/tech-summit-dec-2008.jpg" width="200" height="150" alt="CC Technology Summit (Dec 2008)" style="border:2px solid #ccc;" /></a>
                <h3><a href="/videos/tech-summit-dec-2008">Technology Summit (Dec 2008)</a></h3>
                <p>In December 2008, Creative Commons hosted its second technology summit at MIT.</p>
                </div>
                <div class="video">
                	<a href="/videos/cc-technology-summit-june-2008/"><img src="/files/2009/01/tech-summit-june-2008.jpg" width="200" height="150" alt="CC Technology Summit (Dec 2008)" style="border:2px solid #ccc;" /></a>
                <h3><a href="/videos/cc-technology-summit-june-2008/">Technology Summit (June 2008)</a></h3>
                <p>Creative Commons held its inaugural Technology Summit June 18, 2008 at Google in Mountain View, California.</p>
                </div>
                <div class="video">
                	<a href="/videos/translating-with-pootle/"><img src="/files/2009/01/translation-screencast.jpg" width="200" height="150" alt="Translating with Pootle" style="border:2px solid #ccc;" /></a>
                <h3><a href="/videos/translating-with-pootle/">Translating with Pootle</a></h3>
                <p>Creative Commons' Asheesh Laroia explains how to use the Pootle translation system, in this series of screencasts.</p>
                </div>
              </div>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2009-01-14 18:56:13</wp:post_date>
		<wp:post_date_gmt>2009-01-14 18:56:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>videos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC Technology Summit (Dec 2008)</title>
		<link>http://labs.creativecommons.org/videos/tech-summit-dec-2008/</link>
		<pubDate>Wed, 14 Jan 2009 19:07:48 +0000</pubDate>
		<dc:creator><![CDATA[alex]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?page_id=263</guid>
		<description></description>
		<content:encoded><![CDATA[ <embed src="http://www.archive.org/flow/FlowPlayerLight.swf?config=%7Bembedded%3Atrue%2CshowFullScreenButton%3Atrue%2CshowMuteVolumeButton%3Atrue%2CshowMenu%3Atrue%2CautoBuffering%3Atrue%2CautoPlay%3Afalse%2CinitialScale%3A%27fit%27%2CmenuItems%3A%5Bfalse%2Cfalse%2Cfalse%2Cfalse%2Ctrue%2Ctrue%2Cfalse%5D%2CusePlayOverlay%3Afalse%2CshowPlayListButtons%3Atrue%2CplayList%3A%5B%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F1%2DAbelson%2DWelcome%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F2%2DYergler%2DBuilding%2DCC%2DNetwork%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F3%2DCopyright%2DRegistries%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F4%2DSeneviratne%2DFlickr%2DAttribution%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F5%2DTorpie%2DGovernment%2DLicensing%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F6%2DAdida%2DLife%2DAfter%2DREC%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F7%2DRees%2DOpen%2DSource%2DKnowledge%2DManagement%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F8%2DPearson%2DFairShare%2DNC%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27cc%2Dtechsummit%2D200812%2Dvideo%2F9%2DYergler%2DClosing%5F512kb%2Emp4%27%7D%5D%2CcontrolBarGloss%3A%27high%27%2CshowVolumeSlider%3Atrue%2CbaseURL%3A%27http%3A%2F%2Fwww%2Earchive%2Eorg%2Fdownload%2F%27%2Cloop%3Afalse%2CcontrolBarBackgroundColor%3A%270x000000%27%7D" width="640" height="508" type="application/x-shockwave-flash"></embed> 

In December 2008, Creative Commons hosted its second technology summit at MIT.  Additional information and links to slides may be found <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2008-12-12">in the wiki</a>.

<h2>Download</h2>
The CC Technology Summit is available in OGG and MPEG formats at <a href="http://www.archive.org/details/cc-techsummit-200812-video">the Internet Archive</a>.  Audio files in FLAC, OGG, WAV and MP3 are also available from the <a href="http://www.archive.org/details/cc-techsummit-200812-audio">open source audio</a> collection.

<h2>License</h2>
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img style="border-width: 0" src="http://i.creativecommons.org/l/by/3.0/us/88x31.png" alt="Creative Commons License" /></a>

<em>CC Technlogy Summit (Dec 2008)</em> by <em>Creative Commons</em> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution</a> (CC BY) license. Please link to this page when providing attribution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2009-01-14 19:07:48</wp:post_date>
		<wp:post_date_gmt>2009-01-14 19:07:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tech-summit-dec-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[CC Technology Summit Video - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2009/01/16/cc-technology-summit-video/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-16 23:58:52</wp:comment_date>
			<wp:comment_date_gmt>2009-01-16 23:58:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] are building a real community around it. If you weren&#8217;t able to attend, we now have audio and video available. And if you missed the first one, the video for that is available as [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CC Technology Summit (June 2008)</title>
		<link>http://labs.creativecommons.org/videos/cc-technology-summit-june-2008/</link>
		<pubDate>Thu, 15 Jan 2009 17:23:32 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?page_id=283</guid>
		<description></description>
		<content:encoded><![CDATA[ <object width="480" height="385"><param name="movie" value="http://www.youtube.com/p/5FB4CD82432031E7"></param><embed src="http://www.youtube.com/p/5FB4CD82432031E7" type="application/x-shockwave-flash" width="480" height="385"></embed></object> 

Creative Commons held its inaugural Technology Summit June 18, 2008 at Google in Mountain View, California.  Additional information and links to slides may be found <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2008-06-18">in the wiki</a>. 

<h2>License</h2>
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img style="border-width: 0" src="http://i.creativecommons.org/l/by/3.0/us/88x31.png" alt="Creative Commons License" /></a>

<em>CC Technlogy Summit (June 2008)</em> by <em>Creative Commons</em> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution</a> (CC BY) license. Please link to this page when providing attribution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2009-01-15 17:23:32</wp:post_date>
		<wp:post_date_gmt>2009-01-15 17:23:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-technology-summit-june-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Translating with Pootle</title>
		<link>http://labs.creativecommons.org/videos/translating-with-pootle/</link>
		<pubDate>Thu, 15 Jan 2009 17:27:32 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?page_id=292</guid>
		<description></description>
		<content:encoded><![CDATA[<embed src="http://www.archive.org/flow/FlowPlayerLight.swf?config=%7Bembedded%3Atrue%2CshowFullScreenButton%3Atrue%2CshowMuteVolumeButton%3Atrue%2CshowMenu%3Atrue%2CautoBuffering%3Atrue%2CautoPlay%3Afalse%2CinitialScale%3A%27fit%27%2CmenuItems%3A%5Bfalse%2Cfalse%2Cfalse%2Cfalse%2Ctrue%2Ctrue%2Cfalse%5D%2CusePlayOverlay%3Afalse%2CshowPlayListButtons%3Atrue%2CplayList%3A%5B%7Burl%3A%27TranslatingWithPootle%2Fpootle%2Dscreencast%2Done%5F512kb%2Emp4%27%7D%2C%7Burl%3A%27TranslatingWithPootle%2Fpootle%2Dscreencast%2Dtwo%5F512kb%2Emp4%27%7D%5D%2CcontrolBarGloss%3A%27high%27%2CshowVolumeSlider%3Atrue%2CbaseURL%3A%27http%3A%2F%2Fwww%2Earchive%2Eorg%2Fdownload%2F%27%2Cloop%3Afalse%2CcontrolBarBackgroundColor%3A%270x000000%27%7D" width="640" height="508" scale="noscale" bgcolor="111111" type="application/x-shockwave-flash" allowFullScreen="true" allowScriptAccess="always" allowNetworking="all" pluginspage="http://www.macromedia.com/go/getflashplayer"></embed> 
Creative Commons’ Asheesh Laroia explains how to use the Pootle translation system, in this series of screencasts.

<h2>Download</h2>
Translating with Pootle screencasts are available in OGG and MPEG4 formats at <a href="http://www.archive.org/details/TranslatingWithPootle">the Internet Archive</a>.

<h2>License</h2>
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img style="border-width: 0" src="http://i.creativecommons.org/l/by/3.0/us/88x31.png" alt="Creative Commons License" /></a>

<em>Translating with Pootle</em> by <em>Creative Commons</em> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">Creative Commons Attribution</a> (CC BY) license. Please link to this page when providing attribution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2009-01-15 17:27:32</wp:post_date>
		<wp:post_date_gmt>2009-01-15 17:27:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>translating-with-pootle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>261</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Home</title>
		<link>http://labs.creativecommons.org/home/</link>
		<pubDate>Mon, 31 Oct 2011 20:23:55 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?page_id=1702</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1702</wp:post_id>
		<wp:post_date>2011-10-31 20:23:55</wp:post_date>
		<wp:post_date_gmt>2011-10-31 20:23:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>home</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>wiki.creativecommons.org skin available</title>
		<link>http://labs.creativecommons.org/2007/04/23/wikicreativecommonsorg-skin-available/</link>
		<pubDate>Mon, 23 Apr 2007 21:33:48 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/23/wikicreativecommonsorg-skin-available/</guid>
		<description></description>
		<content:encoded><![CDATA[The skin for Creative Commons' "wiki":http://wiki.creativecommons.org is now available from Subversion.  You can find decidedly minimalist details (where else) "in the wiki":http://wiki.creativecommons.org/CcWikiSkin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1703</wp:post_id>
		<wp:post_date>2007-04-23 21:33:48</wp:post_date>
		<wp:post_date_gmt>2007-04-23 21:33:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wikicreativecommonsorg-skin-available</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
	</item>
	<item>
				<title>Berlios.de back online</title>
		<link>http://labs.creativecommons.org/2007/04/23/berliosde-back-online/</link>
		<pubDate>Mon, 23 Apr 2007 21:37:22 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/04/23/berliosde-back-online/</guid>
		<description></description>
		<content:encoded><![CDATA[After the downtime we "reported":http://techblog.creativecommons.org/2007/04/23/cc-tools-berlios-unavailable/ this morning, Berlios is back online.  ccPublisher "downloads":http://wiki.creativecommons.org/CcPublisher are now available again.  We'll be mirroring the downloads to another server to protect against future outages.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1704</wp:post_id>
		<wp:post_date>2007-04-23 21:37:22</wp:post_date>
		<wp:post_date_gmt>2007-04-23 21:37:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>berliosde-back-online</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="berlios"><![CDATA[berlios]]></category>
		<category domain="category" nicename="ccpublisher"><![CDATA[ccPublisher]]></category>
	</item>
	<item>
				<title>Palimpsest</title>
		<link>http://labs.creativecommons.org/2007/05/04/palimpsest/</link>
		<pubDate>Fri, 04 May 2007 06:08:18 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/04/palimpsest/</guid>
		<description></description>
		<content:encoded><![CDATA[Terry Hancock, a frequent poster on the law-oriented cc-licenses list, is working on an interesting metadata library called <a href="http://light-princess.org/palimpsest/">Palimpsest</a>:
<blockquote>[W]hich has a mnemonic association with what the program does, and does have a clever backronym for those who want one:
<strong>P</strong>ython
<strong>A</strong>ttribution &amp;
<strong>L</strong>icensing
<strong>I</strong>nformation
<strong>M</strong>etadata
<strong>P</strong>rocessor, with
<strong>S</strong>ystematic
<strong>E</strong>xtensibility for
<strong>S</strong>undry
<strong>T</strong>ypes</blockquote>
Terry's goals for the project:
<ul>
	<li>Read/write support of Adobe XMP embedded metadata</li><li>Read/write support of native â€œnamed fieldâ€ data</li><li>Read/write support of comments</li><li>Read/write support of visible text labelling for formats that need it</li><li>General adaptation to the 15 Dublin Core named fields for all data</li><li>Discovery of attribution and licensing data in comments and annotations, if not available elsewhere</li><li>License-aware processing (expansion of common abbreviations of terms, etc)</li><li>Open-ended pluggable support for virtually any multimedia datatype</li><li>Highly portable, so that it can be used on clients or servers on any operating system</li><li>Dead-simple, so people will actually want to <em>use</em> it</li>
</ul>
I'm glad to see Terry tackling this project. It'll be hard to get the abstractions right, but valuable if it works.

I love the project logo:
<a href="http://light-princess.org/palimpsest/" title="Palimpsest logo"><img src="http://techblog.creativecommons.org/files/2007/05/pal_logo.jpg" alt="Palimpsest logo" /></a>
Not because it is a particularly great logo, but because it's the first logo I've seen that could be mistaken for a captcha. Intentional or not, bound to be independently invented many times, and perhaps copied by me at least once.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2007-05-04 06:08:18</wp:post_date>
		<wp:post_date_gmt>2007-05-04 06:08:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>palimpsest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>CcWiki:Todo</title>
		<link>http://labs.creativecommons.org/2007/05/10/ccwikitodo/</link>
		<pubDate>Thu, 10 May 2007 03:31:14 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/10/ccwikitodo/</guid>
		<description></description>
		<content:encoded><![CDATA[Today's <a href="http://freshmeat.net/projects/mediawiki/?branch_id=45379&amp;release_id=253266">release of MediaWiki 1.10</a> reminds me that the CC Wiki is badly in need of an upgrade (from 1.6).  Here's the <a href="http://wiki.creativecommons.org/CcWiki:Todo">todo list</a>:

<ul>
	<li> Upgrade to MediaWiki 1.10</li>
	<li> Add more spam prevention, remove barriers
<ul>
	<li> possibly no image upload on new accounts?</li>
	<li> add capcha?</li>
	<li> remove need for email confirmation?</li>
</ul>
</li>
	<li> Install OpenId extension</li>
	<li> Install Semantic MediaWiki extension
<ul>
	<li> Migrate lists of stuff to articles with queryable assertions, e.g., <a href="http://wiki.creativecommons.org/Content_curators" title="Content curators">content curators</a>, <a href="http://wiki.creativecommons.org/Books" title="Books">books</a></li>
</ul>
</li>
</ul>

That's in addition to migrating and adding lots more content there and doing a theme refresh.

The release also reminds me to look at an old patch to <a href="http://bugzilla.wikimedia.org/show_bug.cgi?id=2837">AJAX-ify Creative Commons license selection option in installer</a>, makie it work in 1.10, and try to get it into the mainline.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2007-05-10 03:31:14</wp:post_date>
		<wp:post_date_gmt>2007-05-10 03:31:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccwikitodo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="openid"><![CDATA[openid]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
	</item>
	<item>
				<title>VMware Workstation 6 released</title>
		<link>http://labs.creativecommons.org/2007/05/10/vmware-workstation-6-released/</link>
		<pubDate>Thu, 10 May 2007 16:56:56 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/10/vmware-workstation-6-released/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been a fan of "VMware":http://vmware.com for years.  Both at my previous job and this one, their Workstation product has made cross-platform development sane.  So I just noticed they released a new version of "VMware Workstation":http://www.vmware.com/products/ws/, 6.0.  The new version includes lots of new features, but two things caught my eye.

First, they have "Eclipse":http://eclipse.org integration for debugging and testing.  I don't think I can do the feature justice -- "this blog post":http://quikchange.livejournal.com/170570.html goes into some detail.  Basically it allows you to take a Java application you're developing in Eclipse, select a particular VM, and then build, deploy, launch and connect remote debugging.  And when you're done (optionally) revert the VM to the original state.  I don't do much Java work, but this is seems like a great idea.

Second, the look and feel of VMware under Linux has been improved and (more importantly) the icons (most of them, anyway), have been licensed under "CC Attribute-ShareAlike":http://creativecommons.org/licenses/by-sa/2.5/.  More details available "here":http://www.chipx86.com/blog/?p=206.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2007-05-10 16:56:56</wp:post_date>
		<wp:post_date_gmt>2007-05-10 16:56:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vmware-workstation-6-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
	</item>
	<item>
				<title>Adobe XMP Toolkit 4.1.1 -- under BSD</title>
		<link>http://labs.creativecommons.org/2007/05/13/adobe-xmp-toolkit-411-under-bsd/</link>
		<pubDate>Sun, 13 May 2007 00:31:11 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/13/adobe-xmp-toolkit-411-under-bsd/</guid>
		<description></description>
		<content:encoded><![CDATA[Adobe's <a href="http://www.adobe.com/devnet/xmp/">XMP Toolkit</a> is now available under the BSD license!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2007-05-13 00:31:11</wp:post_date>
		<wp:post_date_gmt>2007-05-13 00:31:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adobe-xmp-toolkit-411-under-bsd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive More XMP Toolkit Plugs &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2007/05/13/more-xmp-toolkit-plugs/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.164.234</wp:comment_author_IP>
			<wp:comment_date>2007-05-13 21:24:34</wp:comment_date>
			<wp:comment_date_gmt>2007-05-13 21:24:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] a follow-up to Mike&#8217;s post about XMP, I (through CC) have been working with Adobe XMP&#8217;s product manager, Gunar Penikis, on how CC [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Libre Graphics Meeting</title>
		<link>http://labs.creativecommons.org/2007/05/13/libre-graphics-meeting/</link>
		<pubDate>Sun, 13 May 2007 00:39:42 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/13/libre-graphics-meeting/</guid>
		<description></description>
		<content:encoded><![CDATA[CC staff Jon Phillips and Alex Roberts attended the <a href="http://libregraphicsmeeting.org/">Libre Graphics Meeting</a> in Montreal last weekend. Jon posted his <a href="http://rejon.org//media/2007/05/open-content-library-lgm-2007.pdf">slides (PDF)</a>. Alex posted a <a href="http://redprocess.com/is/libre/">heartening update titled Libre</a> on his personal blog, which I'll repost here:
<blockquote>The title is a bit of a misnomer, since my laptop runs OSX and I use Adobe software at work. At least right now, various parts of my <em>workflow</em> (and I sure do dislike that term) will be changing soon. Hereâ€™s why.

Last weekend I attended the second, annual, <a href="http://www.libregraphicsmeeting.org/">Libre Graphics Meeting</a>, in Montreal. A time of firsts for me: my first time visiting Canada; my first LGM; and the first time Iâ€™d met, in person, many of the hackers and artists in the F/OSS community. Some of whom inspired me to become a designer, and give me the lofty goal of working in free culture. So that was incredible.

LGM featured a lot of talks going over new developments in the community, it was great to see the directions all the art tools are going â€” <a href="http://www.scribus.net/">Scribus</a>, Krita, <a href="http://inkscape.org/">Inkscape</a>, etc. But what really got me hyped, and excited about the future, were the demos. Iâ€™ll admit Iâ€™ve been out of the OSS art loop for a while, having little time to check out the latest trunk builds of everything, but seeing them all in use really inspired me that yes, these tools work, and yes, they can in fact be used in place of the commercial giants. Scribus has, by far, come the farthest since I first saw it. I believe itâ€™s fairly safe to assume that I could use it, instead of InDesign, for much of the print work I do. Iâ€™ll be sure to report on my progress in that regard.

That being said, while you can use the open source tools for production, you do need an open mind and ability to learn what they can do â€” both similarly and differently. For instance, Inkscape has some incredible features that you wonâ€™t find in Illustrator â€” gradients on strokes; advanced object linking, allowing you to create complex effects that remain completely editable; full access to the underlying XML, so you can directly edit any content. But unlike Illustrator, Inkscape doesnâ€™t yet handle CMYK or spot colours, and has no support for any kind of blending modes (coming soon). So I doubt Iâ€™d be able to move 100% away from non-free tools, for the foreseeable future, but it really isnâ€™t too often I find myself tasked with print work. So a minor inconvenience at worst.

The whole experience makes me extremely excited over these improved possibilities, of using the tools in the real world, and the joy of contributing back where I can. This includes <em>Serif</em> and <em>FontView</em> â€” my font manager, and viewer apps respectively. A good amount of hacking on FontView went on over the weekend, solving a number of large bugs, which also made me happy.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2007-05-13 00:39:42</wp:post_date>
		<wp:post_date_gmt>2007-05-13 00:39:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libre-graphics-meeting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fontview"><![CDATA[fontview]]></category>
		<category domain="category" nicename="graphics"><![CDATA[graphics]]></category>
		<category domain="category" nicename="illustrator"><![CDATA[illustrator]]></category>
		<category domain="category" nicename="indesign"><![CDATA[indesign]]></category>
		<category domain="category" nicename="inkscape"><![CDATA[inkscape]]></category>
		<category domain="category" nicename="krita"><![CDATA[krita]]></category>
		<category domain="category" nicename="opencontentlibrary"><![CDATA[opencontentlibrary]]></category>
		<category domain="category" nicename="scribus"><![CDATA[scribus]]></category>
		<category domain="category" nicename="serif"><![CDATA[serif]]></category>
		<category domain="category" nicename="slides"><![CDATA[slides]]></category>
	</item>
	<item>
				<title>More XMP Toolkit Plugs</title>
		<link>http://labs.creativecommons.org/2007/05/13/more-xmp-toolkit-plugs/</link>
		<pubDate>Sun, 13 May 2007 21:24:26 +0000</pubDate>
		<dc:creator><![CDATA[rejon]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/13/more-xmp-toolkit-plugs/</guid>
		<description></description>
		<content:encoded><![CDATA[In a follow-up to <a href="http://techblog.creativecommons.org/2007/05/13/adobe-xmp-toolkit-411-under-bsd/">Mike's post about XMP</a>, <a href="http://creativecommons.org">I</a> (through CC) have been working with <a href="http://labs.adobe.com/technologies/xmptoolkit/">Adobe XMP's product manager</a>, <a href="http://blogs.adobe.com/gunar/">Gunar Penikis</a>, on how CC and Adobe can work together on XMP. Also, in the same line, I'm friends with and working with <a href="http://cyrilleberger.blogspot.com/2007/05/thanks-to-adobe-for-freeing-xmp.html">Cyrille Berger</a> and <a href="http://www.figuiere.net/hub/blog/?2007/05/11/518-thanks-you-adobe-for-xmp">Hubert Figuiere</a>, who have <a href="http://cyrilleberger.blogspot.com/2007/05/thanks-to-adobe-for-freeing-xmp.html">each</a> <a href="http://www.figuiere.net/hub/blog/?2007/05/11/518-thanks-you-adobe-for-xmp">noted</a> how positive of a step releasing XMP SDK/Toolkit under a BSD license is for the larger community.

I'm having some other discussions with all the above mentioned folks with regards to how this is going to pan out, but all I can say is that it is going to encouage <a href="http://wiki.creativecommons.org/XMP">XMP</a> to flourish, and return help smooth out metadata and embedding across the board.

This really frees up the space for more developments]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2007-05-13 21:24:26</wp:post_date>
		<wp:post_date_gmt>2007-05-13 21:24:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-xmp-toolkit-plugs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="lgm2007"><![CDATA[lgm2007]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="people"><![CDATA[people]]></category>
		<category domain="category" nicename="standard"><![CDATA[standard]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive Exempi 1.99.0 Released &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2007/05/30/exempi-1990-released/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.164.234</wp:comment_author_IP>
			<wp:comment_date>2007-05-30 17:07:37</wp:comment_date>
			<wp:comment_date_gmt>2007-05-30 17:07:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] on from Jon&#8217;s follow-up, Hubert Figuiere has released Exempi 1.99.0, now based on Adobe&#8217;s XMP [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>XMP Toolkit 4.1.1 Officially Released under BSD License</title>
		<link>http://labs.creativecommons.org/2007/05/14/xmp-toolkit-411-officially-released-under-bsd-license/</link>
		<pubDate>Mon, 14 May 2007 21:23:52 +0000</pubDate>
		<dc:creator><![CDATA[rejon]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/14/xmp-toolkit-411-officially-released-under-bsd-license/</guid>
		<description></description>
		<content:encoded><![CDATA[That's right, <a href="http://blogs.adobe.com/gunar/">Gunar from Adobe</a>, <a href="http://blogs.adobe.com/gunar/2007/05/xmp_411_sdk_available_under_bsd_license.html">blogged it today</a> and sent me an email! This is super great news that I want to blockquote:

<blockquote><p>
The <a href="http://www.adobe.com/devnet/xmp/">4.1.1 XMP Toolkit (SDK)</a> has been finalized and moved to the Adobe's Developers Center.  The 4.1 Toolkit is now available under the <a href="http://www.adobe.com/devnet/xmp/sdk/eula.html">BSD license</a> for open source developers.
</p><p>
Although the previous Adobe open source license is quite open, we decided that is was best to use a standard open source license that is respected in the open source community.  <a href="http://opensource.org/">Opensource.org</a> was invaluable in reviewing the many different open source licenses that are available.
</p><p>
The 4.1.1 XMP release is significant because it include the source code for developers to read, write and update XMP in popular image, document and video file formats including JPEG, PSD, TIFF, AVI, WAV, MPEG, MP3, MOV, INDD, PS, EPS and PNG.
</p>
<!-- technorati tags start --><p>Technorati Tags: <a href="http://www.technorati.com/tag/Adobe" rel="tag">Adobe</a>, <a href="http://www.technorati.com/tag/XMP" rel="tag">XMP</a></p></blockquote>

Also, <a href="http://digg.com/software/Adobe_Releases_XMP_Toolkit_4_1_1_under_BSD_License/blog">please help digg this</a> so more can find out about it!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2007-05-14 21:23:52</wp:post_date>
		<wp:post_date_gmt>2007-05-14 21:23:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmp-toolkit-411-officially-released-under-bsd-license</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="category" nicename="bsd"><![CDATA[bsd]]></category>
		<category domain="category" nicename="gunarpenikis"><![CDATA[gunarpenikis]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="standard"><![CDATA[standard]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>Elias Torres on Operator, RDFa, Open Data</title>
		<link>http://labs.creativecommons.org/2007/05/17/elias-torres-on-operator-rdfa-open-data/</link>
		<pubDate>Thu, 17 May 2007 18:26:52 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/17/elias-torres-on-operator-rdfa-open-data/</guid>
		<description></description>
		<content:encoded><![CDATA[Elias Torres is one of the best people to watch for news about technologies relevant to what we're doing at Creative Commons.Â  He's been working with CC tech advisor <a href="http://ben.adida.net/">Ben Adida</a> on <a href="http://rdfa.info">RDFa</a>.

Start with <a href="http://torrez.us/archives/2007/05/17/531/">Elias' XTech 2007 post and presentation</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2007-05-17 18:26:52</wp:post_date>
		<wp:post_date_gmt>2007-05-17 18:26:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>elias-torres-on-operator-rdfa-open-data</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="opendata"><![CDATA[opendata]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="slides"><![CDATA[slides]]></category>
		<category domain="category" nicename="xtech"><![CDATA[xtech]]></category>
	</item>
	<item>
				<title>CC: The Clear Choice for BotNets Everywhere</title>
		<link>http://labs.creativecommons.org/2007/05/17/cc-the-clear-choice-for-botnets-everywhere/</link>
		<pubDate>Thu, 17 May 2007 21:43:50 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/17/cc-the-clear-choice-for-botnets-everywhere/</guid>
		<description></description>
		<content:encoded><![CDATA[I was working this morning and noticed that "#cc":http://wiki.creativecommons.org/IRC, our IRC channel, was particularly active.  But I couldn't figure out what they were talking about.  It didn't look like any conversation about licensing _I'd_ ever seen.  And then I realized: it was a botnet rental negotiation.  What I especially loved is the question, "you a fed?" Presumably *K_Soze* is under the false impression that if a law enforcement officer answers the question dishonestly, they're guilty of entrapment.

Presented for your enjoyment, the logs:

[09:19am] K_Soze: Evenin all
[09:20am] K_Soze: I'm wondering what seller sells?
[09:20am] Seller: hi K_Soze
[09:20am] Seller: that depends...
[09:20am] Seller: what you want to buy?
[09:21am] K_Soze: Well that's always the question... but it's also a matter of whether people can supply... and people can supply the right quality and quantity?
[09:21am] Seller: K_Soze: you will have to be more specific?
[09:22am] K_Soze: I thought a channel called cc , talking a guy called seller was specific enough, but maybe not....
[09:23am] Seller: you are not a fed are you?
[09:23am] K_Soze: There's no need to get spooked... I've dealt with people on this chan before who I'm sure will vouch for me
[09:24am] Seller: lets just say I like to help people out
[09:24am] Seller: you got a problem - i got a solution
[09:25am] K_Soze: Yeah but not everyone is looking for such a high quality solution... the cc bit is generally easy... it's other more...... "mechanical" things I'm interested in...
[09:25am] Seller: hmmm
[09:25am] Seller: i sell by the thousands
[09:25am] Seller: top quality
[09:26am] K_Soze: Thousands? Well I've spoken to people who sell by the thousands... they ask if I want one or two thousand....
[09:26am] K_Soze: but that's obviously not what' i'm interested in
[09:26am] Seller: you dont want a couple thousand mechanical friends?
[09:26am] Seller: to help out?
[09:26am] K_Soze: No, I want more than a couple...
[09:26am] Seller: how much more?
[09:27am] K_Soze: Well I guess it's not so much the number as the commotion such a bunch of friends could induce...
[09:28am] Seller: can do pings, can do http, can do smtp
[09:28am] K_Soze: Geographically dispersed?
[09:28am] Seller: very very effective
[09:28am] Seller: all over the place - china, russia, usa
[09:29am] Seller: australia
[09:29am] Seller: i can mix them up for ya
[09:29am] K_Soze: Hrmmmm.....
[09:29am] K_Soze: by the job or by day / week?
[09:29am] Seller: you rent them per week
[09:29am] Seller: web interface - very easy
[09:30am] K_Soze: web? no IRC?
[09:30am] Seller: yep web - very easy
[09:30am] K_Soze: hrmm interesting.... would be curious to give them a run.... this collection... they attracting much attention?
[09:31am] Seller: barely used so far
[09:31am] nathany: uh, do you guys realize this channel is for Creative Commons license-related discussion?
[09:31am] Seller: oh oops
[09:31am] Seller: K_Soze: see ya later
[09:31am] nathany: yeah, oops
[09:31am] Seller left the chat room.
[09:31am] K_Soze: cc = Creative commons? laters.
[09:31am] K_Soze left the chat room. ("leaving")
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2007-05-17 21:43:50</wp:post_date>
		<wp:post_date_gmt>2007-05-17 21:43:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-the-clear-choice-for-botnets-everywhere</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="botnet"><![CDATA[botnet]]></category>
		<category domain="category" nicename="irc"><![CDATA[irc]]></category>
	</item>
	<item>
				<title>ccPublisher 5.0 requirements</title>
		<link>http://labs.creativecommons.org/2007/05/18/ccpublisher-50-requirements/</link>
		<pubDate>Fri, 18 May 2007 03:56:49 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/18/ccpublisher-50-requirements/</guid>
		<description></description>
		<content:encoded><![CDATA[Described at <a href="http://movemydata.org">Move My Data</a>. Found via <a href="http://www.megginson.com/blogs/quoderat/2007/03/28/open-data-matters-more-than-open-source/#comment-28382">this comment</a>.

(But don't get too excited -- <a href="http://wiki.creativecommons.org/CcPublisher">ccPublisher</a> is actually only at version  2.2.1 and Move My Data looks like vaporware at this point.)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2007-05-18 03:56:49</wp:post_date>
		<wp:post_date_gmt>2007-05-18 03:56:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccpublisher-50-requirements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ccpublisher"><![CDATA[ccPublisher]]></category>
		<category domain="category" nicename="export"><![CDATA[export]]></category>
		<category domain="category" nicename="opendata"><![CDATA[opendata]]></category>
		<category domain="category" nicename="upload"><![CDATA[upload]]></category>
	</item>
	<item>
				<title>Exempi 1.99.0 Released</title>
		<link>http://labs.creativecommons.org/2007/05/30/exempi-1990-released/</link>
		<pubDate>Wed, 30 May 2007 17:07:29 +0000</pubDate>
		<dc:creator><![CDATA[alex]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/05/30/exempi-1990-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Following on from Jon's <a href="http://techblog.creativecommons.org/2007/05/13/more-xmp-toolkit-plugs/">follow-up</a>, Hubert Figuiere has <a href="http://www.figuiere.net/hub/blog/?2007/05/29/523-exempi-1990">released Exempi 1.99.0</a>, now based on Adobe's XMP SDK.

His blog post includes a nice snippet of code showing how to apply a CC license to a PDF:
<blockquote><code>
#include &lt;exempi/xmp.h&gt;
...
XmpFilePtr f;
f = xmp_files_open_new("test.pdf", XMP_OPEN_FORUPDATE);
XmpPtr xmp = xmp_files_get_new_xmp(f);
xmp_set_property(xmp, NS_XAP_RIGHTS, "Copyright", "(c) ACME Inc., some rights reserved"
" - This work is licensed to the public under the Creative Commons Attribution-ShareAlike "
"license http://creativecommons.org/licenses/by-sa/2.0/");
xmp_files_put_xmp(f, xmp);
xmp_free(xmp);
xmp_files_close(f, XMP_CLOSE_SAFEUPDATE);
</code></blockquote>
Excellent news for the community, and for the continuing saga of XMP.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2007-05-30 17:07:29</wp:post_date>
		<wp:post_date_gmt>2007-05-30 17:07:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exempi-1990-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>Indexing License Metadata in Tracker, Week 1</title>
		<link>http://labs.creativecommons.org/2007/06/12/indexing-license-metadata-in-tracker-week-1/</link>
		<pubDate>Tue, 12 Jun 2007 04:56:30 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/12/indexing-license-metadata-in-tracker-week-1/</guid>
		<description></description>
		<content:encoded><![CDATA[Week 1 of Google Summer of Code is complete and already I'm seeing much progress.  There's a mess of formats to embed licenses into and a mess of ways to embed them.  My first task has been straightening out where licenses are embedded in each format and how exactly to go about extracting them.  Here's where I'm at:

<table border="1">
<thead>
<tr>
<td><strong>Format</strong></td><td><strong>Form of Metadata</strong></td><td><strong>Location of Metadata</strong></td><td><strong>Extraction with Tracker</strong></td><td><strong>Test content</strong></td>
</tr>
</thead>
<tr>
  <td>MP3</td>
  <td><ul><li>XMP</li><li>Native id3 tags</li></ul></td>
  <td><ul><li>For id3v24, the PRIV,XMP field</li><li>WCOP tag</li></ul></td>
  <td>Extracting MP3 tags has moved from an ID3 parser to handing off the work to GStreamer/MPlayer/Totem.  As far as I can tell, this prevents me from extracting the XMP.</td>
  <td>XMP embedded with Exempi</td>
</tr>
<tr>
  <td>PDF</td>
  <td>XMP</td>
  <td>metadata field</td>
  <td>Extend the current PDF extractor (which uses Poppler) to read the metadata field.  However reading the metadata field isn't wrapped in Poppler's glib bindings, but I have written and submitted a patch.</td>
  <td>XMP embedded with Exempi</td>
</tr>
<tr>
  <td>OGG</td>
  <td><ul><li>XMP</li><li>Native comment field</li></ul></td>
  <td><ul><li>XMP comment field</li><li>LICENSE comment field</li></ul></td>
  <td>Extend the GStreamer extractor to check for the presence of an XMP comment field.  GStreamer places this within the EXTENDED_COMMENTS tag (requires GStreamer 0.10.10).</td>
  <td>XMP embedded with vorbiscomment</td>
</tr>
<tr>
  <td>JPEG</td>
  <td>XMP</td>
  <td>Exif XML Packet field</td>
  <td>Extend the Imagemagick extractor, using 'convert file.jpg xmp:-' to read XMP</td>
  <td>XMP embedded with Exempi</td>
</tr>
<tr>
  <td>PNG</td>
  <td>XMP</td>
  <td>iTXt, XML:com:adobe:xmp field</td>
  <td>Extend the PNG extractor, adding a check for XML:com:adobe:xmp.  (For backwards compatibility, the ability to read iTXt in libpng is disabled by default until version 1.3.)</td>
  <td>XMP embedded with Exempi</td>
</tr>
<tr>
  <td>HTML</td>
  <td>RDFa</td>
  <td>&amp;lt;a rel="license" href="..."&amp;gt;&amp;lt;/a&amp;gt;</td>
  <td>Write a new HTML extractor, using libxml2, and scan for RDFa</td>
  <td>Various actual sites, including creativecommons.org</td>
</tr>
<tr>
  <td>SVG</td>
  <td>RDF</td>
  <td>/svg/metadata/rdf</td>
  <td>I could specifically parse the XML, checking for the RDF schema used by Inkscape.  Should I check for XMP also???</td>
  <td>Inkscape</td>
</tr>
<tr>
  <td>Any XML</td>
  <td>XMP</td>
  <td>Wherever valid</td>
  <td>Write a generic XML extractor (and/or extractor for each particular format), scanning with libxml2</td>
  <td></td>
</tr>
<tr>
  <td>OpenOffice.org (OASIS)</td>
  <td colspan="3">OO.org CC License Add-In SoC Project is working on the spec</td>
  <td>OO.org Add-In</td>
</tr>
<tr>
  <td>MS Office</td>
  <td colspan="2">DocumentSummaryInformation Infile, CreativeCommons_LicenseURL property</td>
  <td>Extend existing msoffice extractor</td>
  <td><a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=113b53dd-1cc0-4fbe-9e1d-b91d07c76504&amp;displaylang=en">MSOffice Add-in</a></td>
</tr>
</table>

If this is all well and good, I'd like to help update the CC Wiki with updated embedding specifications.

As far as coding goes, I wrote the code for Tracker to check for and extract metadata from XMP sidecar files.  XMP is parsed by Hubert's XMP library.  The timing of Adobe's release of their XMP Toolkit and Hubert subsequently release of Exempi 1.99.x, have been an early boon to the project.  The 'license' tag in the CC namespace is the only metadata extracted at the moment.

I've also been hacking the extractors of the above list of formats to determine the feasibility and processes of extracting license metadata from each.

Where I stand now is that feedback on the above would be much appreciated and if all is well I can get the XMP sidecar code I have pushed into Tracker's Subversion repository soon.

Happy hacking, indeed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2007-06-12 04:56:30</wp:post_date>
		<wp:post_date_gmt>2007-06-12 04:56:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indexing-license-metadata-in-tracker-week-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Hoersten]]></wp:comment_author>
			<wp:comment_author_email>luke.hoersten@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://openradix.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.153.207.6</wp:comment_author_IP>
			<wp:comment_date>2007-06-12 14:20:13</wp:comment_date>
			<wp:comment_date_gmt>2007-06-12 14:20:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What is the correct way to do MP3 tag embedding these days? Last year I did GSoC and finished my project. Unfortunately, it was unable to be patched into Banshee because they were waiting for Gnome CVS to move to SVN. When the move did happen, Banshee moved to Gstreamer tag reading. As far as I can tell, Gstreamer doesn't handle the tags we need for MP3 license tag parsing.

My point: has anyone gotten involved with the Gstreamer project to fix this or have any more info on it? Until Gstreamer can do what we need, license handing wont be in Banshee =/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[Cassio Melo]]></wp:comment_author>
			<wp:comment_author_email>cassio.ufpe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cin.ufpe.br/~cam2/info/english</wp:comment_author_url>
			<wp:comment_author_IP>201.50.201.250</wp:comment_author_IP>
			<wp:comment_date>2007-06-12 17:30:23</wp:comment_date>
			<wp:comment_date_gmt>2007-06-12 17:30:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great job Jason! Does MS Addin put CC metadata into documents? Cheers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Kivlighn]]></wp:comment_author>
			<wp:comment_author_email>jkivlighn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>67.160.97.153</wp:comment_author_IP>
			<wp:comment_date>2007-06-12 18:48:50</wp:comment_date>
			<wp:comment_date_gmt>2007-06-12 18:48:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just downloaded and installed the MS Add-in.  Apparently the CC metadata is added to the Custom properties (the DocumentSummaryInformation section) of the file.  Here's a sample dump, using libgsf, of the CC-related properties:

prop 'CreativeCommons_Derivatives'
        = "Share Alike"
prop 'CreativeCommons_Licensed'
        = TRUE
prop 'CreativeCommons_CommercialUse'
        = "Yes"
prop 'CreativeCommons_LicenseURL'
        = "http://creativecommons.org/licenses/by-sa/2.5/"
prop 'CreativeCommons_Jurisdiction'
        = ""]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Kivlighn]]></wp:comment_author>
			<wp:comment_author_email>jkivlighn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>67.160.97.153</wp:comment_author_IP>
			<wp:comment_date>2007-06-12 23:41:35</wp:comment_date>
			<wp:comment_date_gmt>2007-06-12 23:41:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know that in GStreamer there are tags GST_TAG_LICENSE and GST_TAG_COPYRIGHT.  For MP3's GST_TAG_COPYRIGHT is taken from the TCOP tag.  I see that GST_TAG_LICENSE isn't used, though I take it that it should be the value of the WCOP tag.  It seems trivial to make this update.  I'll look into GStreamer for more info and maybe go for a patch, unless somebody has more info.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Kivlighn]]></wp:comment_author>
			<wp:comment_author_email>jkivlighn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>67.160.97.153</wp:comment_author_IP>
			<wp:comment_date>2007-06-13 05:53:14</wp:comment_date>
			<wp:comment_date_gmt>2007-06-13 05:53:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[GStreamer's id3v2 tag parser doesn't handle WZZZ tags (which includes the license URL tag, WCOP).  Here's a patch to fix that:

http://bugzilla.gnome.org/show_bug.cgi?id=447000

I'll see how that goes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Kivlighn]]></wp:comment_author>
			<wp:comment_author_email>jkivlighn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>67.160.97.153</wp:comment_author_IP>
			<wp:comment_date>2007-06-14 20:53:39</wp:comment_date>
			<wp:comment_date_gmt>2007-06-14 20:53:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I should also point out that for my latest progress, check out:

http://wiki.creativecommons.org/Tracker_CC_Indexing]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Indexing License Metadata in Tracker, Week 2</title>
		<link>http://labs.creativecommons.org/2007/06/19/indexing-license-metadata-in-tracker-week-2/</link>
		<pubDate>Tue, 19 Jun 2007 19:55:42 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/19/indexing-license-metadata-in-tracker-week-2/</guid>
		<description></description>
		<content:encoded><![CDATA[I've made progress extracting licenses from the following formats:  Vorbis, MP3, FLAC, PDF, JPEG, TIFF, PNG, PDF, HTML, and MSOffice.  They are by no means all done, but for several formats I have patches and am awaiting approval from <a href="http://www.gnome.org/projects/tracker/">Tracker</a>.

I've written a <a href="http://bugzilla.gnome.org/show_bug.cgi?id=447000">GStreamer bug report</a> and submitted a patch to allow reading the WCOP (License URI) id3v2 tag.  Discussion continues there.

No luck with video metadata (AVI, Matroska, OGM, Quicktime).  Things are just too ad-hoc in that arena to get anything worthwhile done.  For Tracker, GStreamer is doing all the work on extracting video metadata, but as far as I can tell, nothing relating to licenses ever gets extracted and passed on to Tracker.  GStreamer would need to be updated to read the tags, but that can't be done unless there are consistent specs on how to do so.  Exempi can embed XMP into MOV and AVI, but I don't know how to get it back out.  It may or may not be feasible to write an extractor that only extracts XMP using Exempi.

Information on various file formats' metadata is available here: <a href="http://wiki.creativecommons.org/Tracker_CC_Indexing">http://wiki.creativecommons.org/Tracker_CC_Indexing</a>  While Tracker won't specifically be indexing every format mentioned, I'm trying to document the formats relevant to Creative Commons.  If I'm missing any important formats, please let me know.

Overall, things are progressing well.  At the rate things are going, by the end of the summer I'll have become a manual for file format specifications :-/

Cheers]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2007-06-19 19:55:42</wp:post_date>
		<wp:post_date_gmt>2007-06-19 19:55:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indexing-license-metadata-in-tracker-week-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Hoersten]]></wp:comment_author>
			<wp:comment_author_email>Luke.Hoersten@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://openradix.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.153.196.45</wp:comment_author_IP>
			<wp:comment_date>2007-06-20 13:25:05</wp:comment_date>
			<wp:comment_date_gmt>2007-06-20 13:25:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent work with the GStreamer patch. It's long over due and should enable a lot of MP3 players the ability (or at least the option) to display license info.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>System Integrated Licensing</title>
		<link>http://labs.creativecommons.org/2007/06/19/system-integrated-licensing/</link>
		<pubDate>Tue, 19 Jun 2007 20:24:54 +0000</pubDate>
		<dc:creator><![CDATA[tannewt]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/19/system-integrated-licensing/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been asked, as a tech intern here at Creative Commons, to create a way of locally tracking file licenses on a system.  A while back Jon <a href="http://wiki.creativecommons.org/Licenses_in_Operating_Systems_Specification">wrote down his ideas</a> about system-wide license tracking  on the Creative Commons wiki.  The purpose of this system would be to provide an interface for developers to access the available licenses on a system.  Additionally,  like the existing online license chooser, this library, called libLicense, will feature a way to choose a license through toggling certain flags available for a family of licenses.  Naturally, the first family available will be the Creative Commons licenses. The larger goal for the summer is to utilize this library in a few initial systems.  Currently, I'm looking at integration into <a href="http://www.gnome.org">Gnome</a> and Sugar (from the <a href="http://www.laptop.org">One Laptop Per Child</a> project).  This further work will occur after libLicense is working.

<strong> Data</strong>

To run libLicense the data of all the licenses will need to be stored in some sort of fashion. My initial thought is this:
<ul>
	<li>All data will be stored in a directory.  On Linux this directory would be /usr/share/licenses .  (This is borrowed from Jon's thoughts.)</li>
	<li>Families of licenses will be stored in a subdirectory of the licenses directory.  For example, the Creative Commons licenses would be stored within creative_commons.</li>
	<li>Within these family directories each specific license will be stored in a file with the naming scheme &lt;bitcode&gt;-&lt;short name&gt;-&lt;jurisdiction&gt;-&lt;locale&gt;.license .  These files will store the license uri, name, status (active or retired), description and legal text.  How this will be stored is up in the air.  My intial thoughts include  separating each attribute on a line or having a format similar to .desktop files.</li>
	<li>In addition to storing license data, some family information must be stored, namely the family bit flags.  In the case of the Creative Commons licenses, the bit flags would be Attribution, Share-Alike, Non-Commercial and No Derivatives.  They would combine to create the bitcode present in the license filename. These bit flags would be the heart of the license chooser logic.  If the combination does not exist, the flags are incompatible.</li>
</ul>
<strong>API</strong>
The library would potentially have these functions:

<strong>get_jurisdiction(uri) </strong>- returns the jurisdiction for the given license.
<strong>get_jurisdictions(short or bitcode) </strong>- returns the available jurisdiction for the given short name or bitcode.
<strong>get_locale(uri)</strong> - returns the locale for the given license.
<strong>get_locales(jurisdiction, short or bitcode)</strong> - returns the available locales for the given jurisdiction and short name or bitcode.
<strong> get_name(uri)</strong> - returns the name of the license.
<strong> get_version(uri)</strong> - returns the version of the license.
<strong> get_versions(short, jurisdiction) </strong>- returns the available versions for the given short name or bitcode and jurisdiction.
<strong> get_short(uri) </strong>- returns the short name for the given uri.
<strong> has_flag(attribute,uri)</strong> - returns if the flag is set for the given uri.
<strong>family_flags(family) </strong>- returns the flags available for a given family.
<strong>family(uri)</strong> - returns the family the given uri belongs to.
<strong> get_notification(uri[,url]) </strong>- returns the notification string for the given url with an option to provide a verification url.
<strong> verify_uri(uri) </strong>- returns whether or not the given uri is recognized by the system.
<strong> get_license(family,flags, jurisdiction,locale)</strong> - returns the uri which satisfies the given attributes.
<strong> get_all_licenses() </strong>- returns all general licenses available.
<strong> get_general_licenses(family) </strong>- returns all general licenses in a family.
<strong> get_families()</strong> - returns a list of available families.

Did I miss something?  Does something not make sense?  Please post a comment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2007-06-19 20:24:54</wp:post_date>
		<wp:post_date_gmt>2007-06-19 20:24:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>system-integrated-licensing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="one-laptop-per-child"><![CDATA[one laptop per child]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="system-integrated-licensing"><![CDATA[system integrated licensing]]></category>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Hoersten]]></wp:comment_author>
			<wp:comment_author_email>luke.hoersten@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://openradix.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.153.207.6</wp:comment_author_IP>
			<wp:comment_date>2007-06-20 21:18:47</wp:comment_date>
			<wp:comment_date_gmt>2007-06-20 21:18:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How will this be kept up-to-date? Some kind of program to sync up with the specified family websites?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>30</wp:comment_id>
			<wp:comment_author><![CDATA[Jon Phillips]]></wp:comment_author>
			<wp:comment_author_email>jon@rejon.org</wp:comment_author_email>
			<wp:comment_author_url>http://rejon.org</wp:comment_author_url>
			<wp:comment_author_IP>24.7.58.49</wp:comment_author_IP>
			<wp:comment_date>2007-06-22 03:47:10</wp:comment_date>
			<wp:comment_date_gmt>2007-06-22 03:47:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We are going to rely on packagers to deal with updates.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Enhanced Metadata Graduates from Labs</title>
		<link>http://labs.creativecommons.org/2007/06/21/enhanced-metadata-graduates-from-labs/</link>
		<pubDate>Thu, 21 Jun 2007 20:52:15 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/21/enhanced-metadata-graduates-from-labs/</guid>
		<description></description>
		<content:encoded><![CDATA[Early this morning we launched some functionality on the main "license chooser":http://creativecommons.org/license previously available only on "Labs":http://labs.creativecommons.org.  As many (ok, at least a few) people have noted, we previously stopped embedding RDF in the HTML generated by the chooser.  As we've "noted":http://wiki.creativecommons.org/Extend_Metadata#Embedding_RDF_in_HTML in the past, RDF in a comment has several draw backs, not the least of which is that it's opaque to parsers.  The new update to the license chooser restores the embedded metadata using "RDFa":http://rdfa.info.

As the name implies, RDFa is a way of expressing RDF using _attributes_ in the HTML.  This is similar to microformats, but different in that any RDFa parser can read any RDFa information -- no special knowledge required.  So the new metadata once again allows you to encode the name of your work, your name, and the type of work, all in the HTML.  A full example (with all fields filled in) is shown here:

<div align="center">
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/">
<img alt="Creative Commons License" src="http://i.creativecommons.org/l/by/3.0/88x31.png" />
</a>
<br />
<span>CC TechBlog</span> by 
<a href="http://creativecommons.org" rel="attributionURL">Creative Commons</a> is licensed under a 
<a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a>.
<br />Based on a work at 
<a href="http://creativecommons.org" rel="source">creativecommons.org</a>.
<br />Permissions beyond the scope of this license may be available at 
<a href="http://creativecommons.org/policies" rel="morePermissions">http://creativecommons.org/policies</a>.
</div>

So how do you know the metadata is there?  Check out the "RDFa Bookmarklets":http://www.w3.org/2006/07/SWD/RDFa/impl/js/ which demonstrate how you can expose the information using some simple Javascript.

*UPDATE* Unfortunately WordPress MU strips out attributes it doesn't recognize, so the example above isn't as complete as it could be.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2007-06-21 20:52:15</wp:post_date>
		<wp:post_date_gmt>2007-06-21 20:52:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enhanced-metadata-graduates-from-labs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
	</item>
	<item>
				<title>It&#039;s coming! CC OpenOffice.Org Add-in</title>
		<link>http://labs.creativecommons.org/2007/06/27/its-coming-cc-openofficeorg-add-in/</link>
		<pubDate>Wed, 27 Jun 2007 14:32:58 +0000</pubDate>
		<dc:creator><![CDATA[ksiomelo]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/27/its-coming-cc-openofficeorg-add-in/</guid>
		<description></description>
		<content:encoded><![CDATA[As you may know, I am working on this project as part of the Google Summer of Code program. Before starting, François Dechelle was already engaged and now we are joining efforts to develop this potentially-popular application!

The current state of the prototype is already adding the licenses in the body of the document. 

<img src="http://www.cin.ufpe.br/~cam2/screen1m.jpg" alt="The license wizard" />

After the license have been chosen, it becomes available as an Auto-Text, being able to be easily replicable in the document without having to create a new wizard. The name of the license and the URL are also being stored in the document' metadata.

<img src="http://www.cin.ufpe.br/~cam2/screen2m.jpg" alt="License text inserted" />

Currently I am working on a weird bug which is not allowing the ooo API to retrieve some images of the available licenses at http://i.creativecommons.org/l/ (it was working perfectly few days ago...)

We're going to commit a stable version ready for download in the next weeks, but if you are eager to use it you can check out this folder at cctools repository:

<a href="http://cctools.svn.sourceforge.net/viewvc/cctools/ccooo/">./ccooo/</a>

Feedbacks and suggestions are welcome!

Cheers
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2007-06-27 14:32:58</wp:post_date>
		<wp:post_date_gmt>2007-06-27 14:32:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>its-coming-cc-openofficeorg-add-in</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[ksiomelo]]></wp:comment_author>
			<wp:comment_author_email>cassio.ufpe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cin.ufpe.br/~cam2/info/english</wp:comment_author_url>
			<wp:comment_author_IP>201.50.225.240</wp:comment_author_IP>
			<wp:comment_date>2007-06-27 14:38:38</wp:comment_date>
			<wp:comment_date_gmt>2007-06-27 14:38:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sorry for the English mistakes I've eventually committed =)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>7</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[John Williams]]></wp:comment_author>
			<wp:comment_author_email>johnfrombluff@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>139.80.92.74</wp:comment_author_IP>
			<wp:comment_date>2007-07-10 01:21:31</wp:comment_date>
			<wp:comment_date_gmt>2007-07-10 01:21:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks so much for this work!

I am using OOo on Linux (Ubunut), could you tell me how to install/try out this addin please?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>33</wp:comment_id>
			<wp:comment_author><![CDATA[ksiomelo]]></wp:comment_author>
			<wp:comment_author_email>cassio.ufpe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cin.ufpe.br/~cam2/info/english</wp:comment_author_url>
			<wp:comment_author_IP>201.50.226.177</wp:comment_author_IP>
			<wp:comment_date>2007-07-14 22:41:38</wp:comment_date>
			<wp:comment_date_gmt>2007-07-14 22:41:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you try to install it from the Extension Manager (or Package Manager in previous versions) in ooo? Tools &gt; Extension Manager , then click on "add..." and select the ccooo.oxt file. Restart the ooo to take effect! =) 

Let me know if you succeed]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>7</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>More Summer of Code -- Liblicense, Tracker, Beagle,...</title>
		<link>http://labs.creativecommons.org/2007/06/30/more-summer-of-code-liblicense-tracker-beagle/</link>
		<pubDate>Sat, 30 Jun 2007 01:32:32 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/30/more-summer-of-code-liblicense-tracker-beagle/</guid>
		<description></description>
		<content:encoded><![CDATA[Let's see, where am I at.

Code in GStreamer to read the license URI is getting pushed through.  Now there's <a href="http://bugzilla.gnome.org/show_bug.cgi?id=451939">Bug #451939</a> that updates the GStreamer API with a license and copyright uri tag.  When this all gets pushed through, access to the license URI will be available through GST_TAG_LICENSE_URI and/or GST_TAG_COPYRIGHT_URI.

In Tracker, I've written code to handle generic indexing of embedded/sidecar XMP.  Previously it just extracted the license, and now any elements can be pulled out and indexed.  Currently, Dublin Core and CC elements are indexed.  The code is still local, and yet to be committed.

In another direction, I've been lending a hand to <a href="http://wiki.creativecommons.org/Liblicense">liblicense</a>.  As mentioned in Scott's previous post, I've got two i/o modules ready.  Both are based on <a href="http://www.figuiere.net/hub/blog/?Exempi">Exempi</a>.  One reads/writes license metadata directly into Quicktime, AVI, PDF, PNG, TIFF, and JPEG formats.  The other read/writes sidecar XMP for any format.  There's more to come.

I also want to look into a liblicense config module and frontend for KDE4.  I figure I can put my KDE programming experience to good use.

And in yet another direction, I'm looking into indexing licenses in Beagle.  After browsing the code, I can adapt most of what I learned about license metadata while working with Tracker to extending Beagle.  I even notice that their image formats filters already support extracting XMP, so adding the extra license checks is straightforward.  A preliminary patch and request for feedback has been posted on their mailing list.

All in all, I've done some work here and there, for this project and that...
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2007-06-30 01:32:32</wp:post_date>
		<wp:post_date_gmt>2007-06-30 01:32:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-summer-of-code-liblicense-tracker-beagle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="beagle"><![CDATA[beagle]]></category>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:comment>
			<wp:comment_id>34</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Hoersten]]></wp:comment_author>
			<wp:comment_author_email>luke.hoersten@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://openradix.org/</wp:comment_author_url>
			<wp:comment_author_IP>24.153.207.6</wp:comment_author_IP>
			<wp:comment_date>2007-07-02 18:15:50</wp:comment_date>
			<wp:comment_date_gmt>2007-07-02 18:15:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome work! This will allow me to push CC support in Banshee!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Liblicense is alpha!</title>
		<link>http://labs.creativecommons.org/2007/06/29/liblicense-is-alpha/</link>
		<pubDate>Fri, 29 Jun 2007 21:46:45 +0000</pubDate>
		<dc:creator><![CDATA[tannewt]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/06/29/liblicense-is-alpha/</guid>
		<description></description>
		<content:encoded><![CDATA[Over the last week  a lot of progress has been made on <a href="http://wiki.creativecommons.org/Liblicense">liblicense</a>. Yesterday Jason and I got the <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/read_license.c?view=markup">module_read</a> and <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/write_license.c?view=markup">module_write</a> functions working with a <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/modules/io/stub.c?view=markup">stub io module</a> and an <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/modules/io/sidecar_xmp.c?view=markup">XMP sidecar module</a>. Tuesday and Wednesday I got the library's<a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/system_licenses.h?view=markup"> system license</a> functions working. Today I did some memory leak plugging and wrote out the <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/system_default.c?view=markup">system default</a> functions.  Nearly every part of the library works as planned.  While its still rough, the bulk of the library work is done.

The most common data structure I've been using is a null-terminated list (really an array) of strings (char*).  Yesterday I wrote out some common methods to be shared throughout the library.  These are in <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/list.c?view=markup">list.c</a>.  My hope is that these common functions will allow the other code to be cleaner.  Next week I plan on fixing up system_licenses.c to use the list functions.  At the moment it is the<a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/system_licenses.c?view=markup"> largest, ugliest and leakiest</a> of all the files.  That will all be fixed Monday.

After the code cleanup on Monday the much more exciting task of creating modules and clients of the library begins.   We'd like to support embedding in as many file formats as possible.  Without this ability, the license tracking only works locally.  One of the most useful libraries so far is <a href="http://libopenraw.freedesktop.org/wiki/Exempi">Exempi</a> which can embed in a number of formats.  Jason wrote an <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense/trunk/modules/io/exempi.c?view=markup">Exempi liblicense module</a> yesterday.  On my list of clients to do is a Gnome Control Panel system default, Nautilus license select,  Sugar license select and Creative Commons default license chooser.  Am I missing anything important?  Where could licenses be integrate besides this?  Perhaps Amarok or an equivalent?  ccHost?  Let me know what you think.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2007-06-29 21:46:45</wp:post_date>
		<wp:post_date_gmt>2007-06-29 21:46:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-is-alpha</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="system-integrated-licensing"><![CDATA[system integrated licensing]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>Liblicense has licenses! 376 of them...</title>
		<link>http://labs.creativecommons.org/2007/07/06/liblicense-has-licenses-376-of-them/</link>
		<pubDate>Fri, 06 Jul 2007 05:37:27 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/06/liblicense-has-licenses-376-of-them/</guid>
		<description></description>
		<content:encoded><![CDATA[Prepping for the 0.1 release, I've generated RDF descriptions of all CC licenses in all available jurisdictions, as well as the GPL, LGPL, and Public Domain.

Available here:
<a href="https://cctools.svn.sourceforge.net/svnroot/cctools/liblicense/trunk/licenses/">https://cctools.svn.sourceforge.net/svnroot/cctools/liblicense/trunk/licenses/</a>

Each license, if applicable, has all the attributes laid out <a href="http://wiki.creativecommons.org/Liblicense#Attributes">on the wiki</a>, including localization.  One problem, however, is getting localized descriptions of the licenses.  That isn't available at <a href="https://cctools.svn.sourceforge.net/svnroot/cctools/i18n/trunk/i18n/">https://cctools.svn.sourceforge.net/svnroot/cctools/i18n/trunk/i18n/</a>

Licenses were generated with <a href="https://cctools.svn.sourceforge.net/svnroot/cctools/liblicense/trunk/gen_licenses.py">this python script</a>, which reads the relevant information from creativecommons.org and cctools svn.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2007-07-06 05:37:27</wp:post_date>
		<wp:post_date_gmt>2007-07-06 05:37:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-has-licenses-376-of-them</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="system-integrated-licensing"><![CDATA[system integrated licensing]]></category>
	</item>
	<item>
				<title>Semantic Videowiki</title>
		<link>http://labs.creativecommons.org/2007/07/06/semantic-videowiki/</link>
		<pubDate>Fri, 06 Jul 2007 20:20:52 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/06/semantic-videowiki/</guid>
		<description></description>
		<content:encoded><![CDATA[Don't get too excited by the post title, just pointing out a <a href="http://oxford.geeknights.net/2007/april-11th/talks/nick-grandy.mp4">nice 5 minute video</a> (mp4) from <a href="http://oxford.geeknights.net/2007/april-11th/">Oxford Geek Nights</a> explaining the basic features of <a href="http://meta.wikimedia.org/wiki/Semantic_MediaWiki">Semantic Mediawiki</a>. Thierry is experimenting with SMW features on the <a href="http://wiki.creativecommons.org">CC Wiki</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2007-07-06 20:20:52</wp:post_date>
		<wp:post_date_gmt>2007-07-06 20:20:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>semantic-videowiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://oxford.geeknights.net/2007/april-11th/talks/nick-grandy.mp4
13684707
video/mp4
]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC OpenOffice.Org AddIn updates</title>
		<link>http://labs.creativecommons.org/2007/07/07/cc-openofficeorg-addin-updates/</link>
		<pubDate>Sat, 07 Jul 2007 20:26:41 +0000</pubDate>
		<dc:creator><![CDATA[ksiomelo]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/07/cc-openofficeorg-addin-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[Hello all,

updates of the version 0.0.2:

* Creative Commons menu became visible in Calc and Impress

Although it's is not working properly yet, the addin is now supporting the other ooo applications.

* License Image bug fixed

Now the addin is retrieving the licenses images perfectly!
 
* Display dialog when opening licensed documents

A simple dialog box is shown when a CC licensed document is opened.

* Checks if the document is already licensed and warns the user

Something like "You have chosen a different license, do you want to proceed anyway?"

... serveral other minor-updates were made in the addin.

Take a look at the screen shots!

<a href='http://techblog.creativecommons.org/files/2007/07/screen1.JPG' title='License inserted in the document'>License inserted in the document</a>
<a href='http://techblog.creativecommons.org/files/2007/07/screen2.JPG' title='Document already licensed'>Document already licensed</a>
<a href='http://techblog.creativecommons.org/files/2007/07/screen3.JPG' title='Opening a licensed document'>Opening a licensed document</a>
<a href='http://techblog.creativecommons.org/files/2007/07/screen4.JPG' title='Using the CC autotext to replicate the license'>Using the CC autotext to replicate the license</a>

Want to try? Just download the <a href="http://cctools.svn.sourceforge.net/viewvc/cctools/ccooo/trunk/ccooo/dist/">ccooo.oxt</a> file and install it from Extension Manager in OpenOffice.Org!

Next steps:
		<li>Internationalization support; </li>

	<li>Exception handling (including timeout);</li>

	<li>Some changes on GUI, such as adding progress bars;</li>

	<li>Settings menu?</li>

	<li>Work on the same functionalities in Calc and Impress.</li>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2007-07-07 20:26:41</wp:post_date>
		<wp:post_date_gmt>2007-07-07 20:26:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-openofficeorg-addin-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>35</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Kivlighn]]></wp:comment_author>
			<wp:comment_author_email>jkivlighn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.231.38.219</wp:comment_author_IP>
			<wp:comment_date>2007-07-10 20:38:58</wp:comment_date>
			<wp:comment_date_gmt>2007-07-10 20:38:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Putting the license metadata in the user-defined fields is temporary, correct?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[ksiomelo]]></wp:comment_author>
			<wp:comment_author_email>cassio.ufpe@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.cin.ufpe.br/~cam2/info/english</wp:comment_author_url>
			<wp:comment_author_IP>201.50.133.179</wp:comment_author_IP>
			<wp:comment_date>2007-07-10 22:40:06</wp:comment_date>
			<wp:comment_date_gmt>2007-07-10 22:40:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The idea is to make the ODF format supporting CC metadata in it's description natively. But I think it'll take some time.. So yes, I'm assuming that putting the metadata in user-defined fields is temporary =)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>7</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Sidecar XMP and License Extractors in Tracker</title>
		<link>http://labs.creativecommons.org/2007/07/10/sidecar-xmp-and-license-extractors-in-tracker/</link>
		<pubDate>Tue, 10 Jul 2007 03:02:54 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/10/sidecar-xmp-and-license-extractors-in-tracker/</guid>
		<description></description>
		<content:encoded><![CDATA[Tracker has accepted my patches to read XMP sidecar, as well as patches to extract licenses from MS Office (old format), TIFF, HTML, PNG, and PDF.  This support will be available in the 0.6 release, which potentially will be released later this week.

My final set of patches will additionally add support for extracting licenses from JPEG, SVG, and OpenOffice's OASIS.  Also, through GStreamer, Tracker already recognizes licenses of Vorbis and FLAC.

This marks the half-way point of Summer of Code 2007.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2007-07-10 03:02:54</wp:post_date>
		<wp:post_date_gmt>2007-07-10 03:02:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sidecar-xmp-and-license-extractors-in-tracker</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[File Info panel for Adobe applications - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org/weblog/entry/7648</wp:comment_author_url>
			<wp:comment_author_IP>67.19.167.98</wp:comment_author_IP>
			<wp:comment_date>2007-09-14 23:37:45</wp:comment_date>
			<wp:comment_date_gmt>2007-09-14 23:37:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] written before about other people including XMP support in pdflatex, PHP, PDF files, and Tracker, just to name a few examples of Free Software support for [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Exempi 1.99.3 Released</title>
		<link>http://labs.creativecommons.org/2007/07/11/exempi-1993-released/</link>
		<pubDate>Wed, 11 Jul 2007 20:19:26 +0000</pubDate>
		<dc:creator><![CDATA[jakin]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/11/exempi-1993-released/</guid>
		<description></description>
		<content:encoded><![CDATA[Hubert Figuiere has <a href="http://www.figuiere.net/hub/blog/?2007/07/10/540-exempi-1993">released Exempi 1.99.3</a>

An important addition in this release is the ability to serialize XMP to a string, making sidecar XMP possible.  The soon-to-be-released <a href="http://wiki.creativecommons.org/Liblicense">Liblicense</a> 0.1 already takes advantage of this feature; it uses Exempi to read and write licenses within XMP sidecar.

Hopefully, the API will soon stabilize in preparation for the 2.0 release.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2007-07-11 20:19:26</wp:post_date>
		<wp:post_date_gmt>2007-07-11 20:19:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exempi-1993-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
	</item>
	<item>
				<title>liblicense 0.2</title>
		<link>http://labs.creativecommons.org/2007/07/13/liblicense-02/</link>
		<pubDate>Fri, 13 Jul 2007 23:38:41 +0000</pubDate>
		<dc:creator><![CDATA[tannewt]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/13/liblicense-02/</guid>
		<description></description>
		<content:encoded><![CDATA[Its here.  We just released our first version of liblicense.  Its pretty basic but should demonstrate what it'll do.  With the next version, 0.3, we'll clean up things we've spotted already and also things that we'll discover while we build some apps on top of it.  Minimally, 0.2 has a command line program, <em>license</em>, which can be used to get, set and list licenses.  We'd love feedback on the code itself and its greater role in the desktop.  Please simply reply to this post.

The source files are available on <a href="https://sourceforge.net/project/showfiles.php?group_id=80503&amp;package_id=238700">sourceforge</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2007-07-13 23:38:41</wp:post_date>
		<wp:post_date_gmt>2007-07-13 23:38:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-02</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
	</item>
	<item>
				<title>RFC 4946</title>
		<link>http://labs.creativecommons.org/2007/07/19/rfc-4946/</link>
		<pubDate>Thu, 19 Jul 2007 17:47:24 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/19/rfc-4946/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.snellspace.com/wp/?p=708">James Snell writes</a> that the Atom License Extension is now <a href="http://www.ietf.org/rfc/rfc4946.txt">Experimental RFC 4946</a>.

Many thanks to James Snell for at least <a href="http://ietfreport.isoc.org/idref/draft-snell-atompub-feed-license/">two years</a> of work on this.

What is needed to move further along the standards track? More implementations.

There's a page on the CC wiki about <a href="http://wiki.creativecommons.org/Syndication">licensing and syndication standards</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2007-07-19 17:47:24</wp:post_date>
		<wp:post_date_gmt>2007-07-19 17:47:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rfc-4946</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="atom"><![CDATA[atom]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rss"><![CDATA[rss]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="syndication"><![CDATA[syndication]]></category>
		<wp:comment>
			<wp:comment_id>38</wp:comment_id>
			<wp:comment_author><![CDATA[James Snell]]></wp:comment_author>
			<wp:comment_author_email>jasnell@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.snellspace.com</wp:comment_author_url>
			<wp:comment_author_IP>67.181.218.96</wp:comment_author_IP>
			<wp:comment_date>2007-07-19 19:53:17</wp:comment_date>
			<wp:comment_date_gmt>2007-07-19 19:53:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It would also be great to have some input on how folks are making use of the license information. e.g. are they performing automatic content selection based on licenses, etc]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>The easiest way yet to integrate CC licensing into a web app (preview)</title>
		<link>http://labs.creativecommons.org/2007/07/19/the-easiest-way-yet-to-integrate-cc-licensing-into-a-web-app-preview/</link>
		<pubDate>Thu, 19 Jul 2007 23:47:15 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/19/the-easiest-way-yet-to-integrate-cc-licensing-into-a-web-app-preview/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working for the past week or so on a JavaScript licensing widget that has been <a href="http://wiki.creativecommons.org/JsWidget">suggested on our wiki</a>.  It's a new way to integrate CC licensing into your web application.  It's really as easy as pie: Just add the following tag somewhere in the body:
<blockquote>&lt;script src="http://api.creativecommons.org/jswidget/tags/0.1/complete.js" /&gt;</blockquote>
and a CC licensing widget will appear.  Your web application can then use
regular DOM queries to determine the user's choice.

NOTE that this is not ready for prime-time use!  I want feedback on what people would like us to add or change.  Right now it serves only English-language text; in the future you will be able to add ?locale=, stick your language code at the end, and get text back in your language.  Beyond translation, tell me how else I can be of service!

You can download a trivial sample application and a long-ish README at <a href="http://sourceforge.net/project/showfiles.php?group_id=80503&amp;package_id=239510">our SourceForge project</a>.  For y'all's convenience here's a <a href="https://cctools.svn.sourceforge.net/svnroot/cctools/jswidget/tags/0.1/example_web_app/README">link to the README</a>.

It'll take you all of five minutes to deeply understand what's going on, so I suggest you do if you're thinking about (or if you already are) offering CC licensing to users of web applications you work on.

(P.S. This is <a href="http://lists.ibiblio.org/pipermail/cc-devel/2007-July/000526.html">cross-posted to the cc-devel list</a>.)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2007-07-19 23:47:15</wp:post_date>
		<wp:post_date_gmt>2007-07-19 23:47:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-easiest-way-yet-to-integrate-cc-licensing-into-a-web-app-preview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC OpenOffice Addin Update: Added Impress funcionality! </title>
		<link>http://labs.creativecommons.org/2007/07/24/cc-openoffice-addin-update-added-impress-funcionality/</link>
		<pubDate>Tue, 24 Jul 2007 22:44:30 +0000</pubDate>
		<dc:creator><![CDATA[ksiomelo]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/24/cc-openoffice-addin-update-added-impress-funcionality/</guid>
		<description></description>
		<content:encoded><![CDATA[Hello everyone!

I've made some changes in the addin and enabled to put licenses in Impress documents. The entire architecture has changed and I'm working on this right now. The newer version is in the CC sourceforge repository!

<a href='http://techblog.creativecommons.org/2007/07/24/cc-openoffice-addin-update-added-impress-funcionality/cc-openoffice-addin-working-on-impress/' rel='attachment wp-att-55' title='CC OpenOffice Addin working on Impress'><img src='http://techblog.creativecommons.org/files/2007/07/screen_impress.PNG' alt='CC OpenOffice Addin working on Impress' /></a>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2007-07-24 22:44:30</wp:post_date>
		<wp:post_date_gmt>2007-07-24 22:44:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-openoffice-addin-update-added-impress-funcionality</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>OpenID on the CC Wiki</title>
		<link>http://labs.creativecommons.org/2007/07/26/openid-on-the-cc-wiki/</link>
		<pubDate>Thu, 26 Jul 2007 01:11:27 +0000</pubDate>
		<dc:creator><![CDATA[tpkennes]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/07/26/openid-on-the-cc-wiki/</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://wiki.creativecommons.org">Creative Commons' wiki</a> is now an <a href="http://openid.net/">OpenID</a> enabled-site. Don't hesitate - if you don't have one yet - to create an OpenID account. There are severals <a href="http://openid.net/wiki/index.php/OpenIDServers">OpenID providers</a> so merely choose one from the list below :

• <a href="http://www.myopenid.com/">MyOpenID</a>
• <a href="https://getopenid.com/">VIdentity</a>
• <a href="https://getopenid.com/">GetOpenID</a>
• <a href="http://www.typekey.com/t/typekey">TypeKey</a>
• <a href="http://pip.verisignlabs.com/">MyLID</a>
• <a href="http://pip.verisignlabs.com/">VeriSign Personnal Identity Provider</a>

A really nice screencast by <a href="http://blog.screencastsonline.com/scoblog">Don McAllister</a> explaining how to use OpenID can be viewed <a href="http://screencastsonline.com/sco/Shows/files/SCO0107-openid.html">here</a>.

Edit:  Another <a href="http://simonwillison.net/2006/openid-screencast/">screencast</a> from Simon Willison]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2007-07-26 01:11:27</wp:post_date>
		<wp:post_date_gmt>2007-07-26 01:11:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openid-on-the-cc-wiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="openid"><![CDATA[openid]]></category>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[asheesh]]></wp:comment_author>
			<wp:comment_author_email>asheesh@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.198.65.190</wp:comment_author_IP>
			<wp:comment_date>2007-08-01 10:20:25</wp:comment_date>
			<wp:comment_date_gmt>2007-08-01 10:20:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Also don't forget - one of the best things about OpenID is that you can run it on your own server.  That way, you control your identity from top to bottom.  Another cool feature is that you can delegate responsibility for your own URL to a different server.  That way, you at least control what outside entity controls your identity.  In this way, OpenID is an innovation in the long tradition of Internet software, from DNS to email to Jabber.

Great thanks to Thierry for setting this up!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>12</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Internet Explorer and Internationalized JsWidget (0.3)</title>
		<link>http://labs.creativecommons.org/2007/08/01/internet-explorer-and-internationalized-jswidget-03/</link>
		<pubDate>Wed, 01 Aug 2007 10:35:11 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/01/internet-explorer-and-internationalized-jswidget-03/</guid>
		<description></description>
		<content:encoded><![CDATA[The scrubbing bubbles have been at work again on JsWidget. JsWidget is an attempt to let web application developers insert the Creative Commons "Choose a license" questions into their application by just including one file from creativecommons.org.

I just released a new pre-release version of JsWidget, <a href="http://sourceforge.net/project/shownotes.php?release_id=529136&amp;group_id=80503">version 0.3</a>. You can read about the project on <a href="http://wiki.creativecommons.org/JsWidget">its wiki page</a>, including learning how to use it.  There are some interesting new features:

First of all, it's compatible with Internet Explorer. My generated JavaScript code was suffering from a correctness issue that using XHTML in Firefox showed me, and fixing that made it render in Internet Explorer.  (Then I had to <a href="http://nathan.ashleafmedia.com/2007/onclick-not-onchange/">switch</a> from using onChange to onClick, again a subtle correctness issue.)

Secondly, it supports a cool form of internationalization called HTTP Content Negotiation. Web browsers optionally (but usually) send a header to the web server indicating the sort of content they can accept, including what languages the user wants to read. In addition to the old ?locale= form of specifying a language, the text should be translated to the user's native language. (Unfortunately not all of the strings are translated yet, but try hovering over an info box or looking through the list of jurisdictions. In all cases where we don't have a translation, we fall back to US English.)

Finally, it supports a feature called "license seeding." By default, the UI offers the user the Attribution license in the generic jurisdiction. By passing in a URL, you can change that starting point. This is especially useful for letting a user revisit a license choice he made in the past and consider changing it.

You can read more about these features on the wiki page for this project, and if you're sly you could even look at your plan for the future. But the most fun thing to do always is to play with our demos!  Now there are three:
<ul>
	<li><a href="http://labs.creativecommons.org/jswidget/tags/0.3/example_web_app/">Standard use</a></li>
	<li><a href="http://labs.creativecommons.org/jswidget/tags/0.3/example_web_app/with-seed.html">With "seeding" a license</a></li>
	<li><a href="http://labs.creativecommons.org/jswidget/tags/0.3/example_web_app/with-seed-old-version.html">With "seeding" a license whose version is upgraded</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2007-08-01 10:35:11</wp:post_date>
		<wp:post_date_gmt>2007-08-01 10:35:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>internet-explorer-and-internationalized-jswidget-03</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
	</item>
	<item>
				<title>Metadata work of interest</title>
		<link>http://labs.creativecommons.org/2007/08/03/metadata-work-of-interest/</link>
		<pubDate>Fri, 03 Aug 2007 05:14:10 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/03/metadata-work-of-interest/</guid>
		<description></description>
		<content:encoded><![CDATA[Some of these could turn out to be interesting for describing licensed content on the web, all rather interesting.

<a href="http://microformats.org/wiki/audio-info-proposal">hAudio</a> proposed microformat.

Proposed <a href="http://wiki.digitalbazaar.com/en/HAudio_RDFa">hAudio to RDFa mapping</a>.

<a href="http://sw.joanneum.at/rammx/">RDFa-deployed Multimedia Medata</a> (ramm.x) may be an effort to map and standardize use of existing and upcoming media description standards in RDFa ... I had to skim "ramm.x in 10 sec" and "what ramm.x is NOT" a few times to gather that, but the key description on that page seems to be:
<blockquote><dl><dt>Does ramm.x replace RDF-based multimedia vocabularies, as, e.g., the <a href="http://musicontology.com/">Music Ontology Specification</a>?</dt><dd> 	No! ramm.x aims at bringing existing formats, as MPEG-7 and the like, into the Semantic Web. It acts as a bridge using a  	<a href="http://www.w3.org/2005/Incubator/mmsem/XGR-vocabularies/#formal">certain formalisation</a>	of an existing vocabulary.</dd></dl></blockquote>
Getting a bit more esoteric, <a href="http://www.w3.org/TR/powder-grouping/">Protocol for Web Description Resources (POWDER)</a>:
<blockquote>facilitates the publication of descriptions of multiple resources such as all those available from a Web site.</blockquote>
Which is a bit of an understatement.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2007-08-03 05:14:10</wp:post_date>
		<wp:post_date_gmt>2007-08-03 05:14:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>metadata-work-of-interest</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="haudio"><![CDATA[haudio]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="microformats"><![CDATA[microformats]]></category>
		<category domain="category" nicename="powder"><![CDATA[powder]]></category>
		<category domain="category" nicename="rammx"><![CDATA[ramm.x]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
	</item>
	<item>
				<title>Licensing on the Gnome Desktop</title>
		<link>http://labs.creativecommons.org/2007/08/03/licensing-on-the-gnome-desktop/</link>
		<pubDate>Fri, 03 Aug 2007 21:49:26 +0000</pubDate>
		<dc:creator><![CDATA[tannewt]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/03/licensing-on-the-gnome-desktop/</guid>
		<description></description>
		<content:encoded><![CDATA[A few days ago we released version 0.3 of liblicense.  This version focused on bringing liblicense onto the desktop and improvements to make that a satisfying experience.  The primary things we added to integrate into Gnome were a generic GTK license chooser widget, default license chooser, and nautilus extension.  These things combine to demonstrate the power of licensing on the desktop.  Additionally, we added optional sqlite3 cache support to speed up the <strong>get_licenses</strong>() function primarily.  Here is a run through of the changes.

The GTK license widget is used extensively throughout the integration.  The widget provides an interface to the license choosing functions in liblicense.  A user selects a license by toggling various attributes.

<img src="http://cc-livecd.dreamhosters.com/ll_default_1.png" alt="GTK Widget in Default Chooser" align="middle" height="467" width="321" />

This is the default license chooser.  The GTK widget is in the frame above the buttons.  The widget provides <strong>get_license</strong> and <strong>set_license</strong> which in this case is used to set the default license for the system.  Ideally, the default system license would be used by applications when they embed license data upon save.  However, that is ideal and not implemented yet.

The default license is used in the nautilus extension.  The default license is used in the file properties license tab whenever a file doesn't have a license set.  The properties tab also utilizes the GTK widget.   Once the user selects a license for the file(s) and closes the dialog the data is written to the files using the liblicense io modules.  These are C modules which embed and extract license data in particular file formats.  Having numerous modules provides decent coverage of file formats.  Currently, if Exempi support is enabled, all files can be handled by creating an XMP sidecar file in the absence of any other means of license storage.  We've also considered other means of license association but see embedding as the ideal option.  Here is a screenshot from nautilus.

<img src="http://cc-livecd.dreamhosters.com/ll_nautilus_scaled.png" alt="Nautilus File Properties" />

The second aspect of the nautilus integration is license loading upon folder open and resulting emblems.  All the extension does is reads the license from every file nautilus loads and tags Creative Common's licensed files with the CC logo and non-CC licensed works with our license icon.  Here is  a screenshot of the emblems.

<img src="http://cc-livecd.dreamhosters.com/ll_nautilus_emblem_scaled.png" alt="Nautilus CC emblems" />

Thats about it.  We'd love feedback before our next release (0.4).  On the CC wiki we have a <a href="http://wiki.creativecommons.org/Liblicense_04_release_todo" title="0.4 release to do">running list of things to do</a>.  You can get liblicense 0.3 from the <a href="https://sourceforge.net/project/showfiles.php?group_id=80503&amp;package_id=238700" title="liblicense download">cctools download page</a>  The liblicense home is also on the CC wiki available <a href="http://www.creativecommons.org/project/Liblicense" title="liblicense project page">here</a>.  Its currently available in source packages, rpms and ebuilds and will be available in debs by the end of today.  Lastly, there is a <a href="http://www.youtube.com/watch?v=L91vjVurtkg" title="liblicense Video">video of liblicense in action</a> on youtube.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2007-08-03 21:49:26</wp:post_date>
		<wp:post_date_gmt>2007-08-03 21:49:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>licensing-on-the-gnome-desktop</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Rob Myers]]></wp:comment_author>
			<wp:comment_author_email>rob@robmyers.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.robmyers.org/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-04-05 18:20:53</wp:comment_date>
			<wp:comment_date_gmt>2008-04-05 18:20:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What does the "allow sharing" option map to?  Is that for cc-sampling?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Semantic Annotations on CC Wiki</title>
		<link>http://labs.creativecommons.org/2007/08/09/semantic-annotations-on-cc-wiki/</link>
		<pubDate>Thu, 09 Aug 2007 22:19:25 +0000</pubDate>
		<dc:creator><![CDATA[tpkennes]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/09/semantic-annotations-on-cc-wiki/</guid>
		<description></description>
		<content:encoded><![CDATA[We have just implemented <a href="http://wiki.ontoworld.org/index.php/Semantic_MediaWiki">Semantic MediaWiki</a> on our wiki. SMW allows additionnal markup into the wiki-text and improve the overall quality and consistency of the wiki. It may appear to make things more complicated but it actually makes easier for users to find more information. Using SMW's own inline querying tools, a <a href="http://wiki.creativecommons.org/Content_Directories#Video">page</a> could then be created that lists almost everything you want.

When you add contents as for now, please use semantic annotations. We have created special pages for you that will help you to easily do that.
At the moment, you can find instructions for <a href="http://wiki.creativecommons.org/Template:Books">Books</a>, <a href="http://wiki.creativecommons.org/Template:ContentDirectory">Content Curators</a> and <a href="http://wiki.creativecommons.org/Template:ContentRegistry">Content Registry</a>.
Do not hesitate also to use our forms, there are much more easier.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2007-08-09 22:19:25</wp:post_date>
		<wp:post_date_gmt>2007-08-09 22:19:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>semantic-annotations-on-cc-wiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
	</item>
	<item>
				<title>A patchy web server</title>
		<link>http://labs.creativecommons.org/2007/08/13/a-patchy-web-server/</link>
		<pubDate>Mon, 13 Aug 2007 18:20:29 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/13/a-patchy-web-server/</guid>
		<description></description>
		<content:encoded><![CDATA[The tech team here is examining how we can better-organize our web servers and web sites.  If you are a DNS sleuth, you may have noticed that most of our web sites are served from a server called "apps.creativecommons.org." But there are some problems with this setup: for example, some of our sites are lots of little static files (like the images site, i.creativecommons.org), and some serve CPU-intensive web pages (like wiki.creativecommons.org).  We can handle many, many more requests to i.creativecommons.org per second than to wiki.creativecommons.org.

In order to prevent Apache from overloading the computer it's running on, we have to limit the maximum number of web pages it can serve at once.  If a thousand people at once were requesting our images, that would be no problem, but we couldn't really handle a thousand requests to our wiki at once.  So we have to set the web server to the limit that can be handled by the most difficult site - otherwise, when more people start editing our wiki at once than we can handle, service will degrade really terribly for everyone, even the clients just getting images from i.creativecommons.org!

We knew the above from experience, but we didn't really have data on which web sites ("vhosts") were using up the most server resources. At first I thought I'd turn to Apache's powerful logging system. I wanted to know how much server time was elapsing between the start of a request and when the server was ready to respond to it. Alas, <a href="http://httpd.apache.org/docs/2.0/mod/mod_log_config.html">mod_log_config</a> only lets you log the total time elapsed from start of request to end of request, which means that large files or users on slow links can distort the picture. A large image file going slowly to a modem user doesn't actually preclude us from sending another few hundred such files at the same time. On the other hand, if a wiki page is taking 5 seconds before it is ready to be sent to the user, those 5 seconds will be even longer if someone else requests another wiki page. Measuring the time from start of request to the beginning of the response seemed a good (albeit rough) way to measure actual server-side resources needed to respond.

I did notice that <a href="http://httpd.apache.org/docs/2.0/mod/mod_headers.html">mod_headers</a> could send a message to the client telling him exactly what I wanted to record! So I patched Apache to have mod_headers pass its information down to mod_log_config, and then I could log how much time elapsed from request start to

Every once in a while, but as recently as this past weekend (at <a href="http://superhappydevhouse.org/SuperHappyDevHouse19">Super Happy Dev House</a>, even!), I hear people say, "Open source is great, but it's not as if anyone actually uses the source to fix problems they encounter." In this case, software freedom was more than theoretical; it meant the ability to make the software tell us things about itself that helps us better serve the community we exist to serve.

You all can see (and distribute under the same terms as Apache) the <a href="http://cctools.svn.sourceforge.net/svnroot/cctools/log_analysis/vhost_effort/">patch and some quick reporting scripts</a> I slapped together.  Feel free to email me with any questions!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2007-08-13 18:20:29</wp:post_date>
		<wp:post_date_gmt>2007-08-13 18:20:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-patchy-web-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
	</item>
	<item>
				<title>A Farewell</title>
		<link>http://labs.creativecommons.org/2007/08/24/a-farewell/</link>
		<pubDate>Fri, 24 Aug 2007 16:45:41 +0000</pubDate>
		<dc:creator><![CDATA[tannewt]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2007/08/24/a-farewell/</guid>
		<description></description>
		<content:encoded><![CDATA[Well, today is my last day.  I've thoroughly enjoyed my time here at CC.  Thanks to everyone here at the office and elsewhere who I interacted with this summer.  I've met a lot of innovative, hardworking folks and they all deserve a big kudos.  While I've been here I've created liblicense which had been conceived for a while by Jon.  I think its at a point where inclusion into content platforms is now the key.  We've done three releases but technically four.  None of this would have been possible without the help of Jason Kivlighn.  Back at the University of Washington (UW) him and I were roommates and will be living in the same house this fall.  Jason is a super coder who finished his own Google Summer of Code project about halfway through the summer.  Instead of just fizzling out he helped me by revamping parts of liblicense and writing modules to support all of the formats we currently support.  I wouldn't have gotten nearly as far without Jason's help.  Before I bid farewell and move on, let me recap a bit of what I did.

Well, my primary project was liblicense.  Basically,  I was handed down the idea of tracking licenses on 'the desktop'.  I arrived to find tons of UI mockups created by Rebecca for my implementing pleasure. Before I began implementing the UIs I spent the first three or four weeks conceptualizing and implementing the core liblicense library.  The first (and second) release was on July 13.  After this release I began focusing on Gnome desktop integration.  I really enjoyed seeing a frontend to the hardwork I did on the backend.  Hopefully, more will be done.  At the same time as I did the Gnome integration, Jason mirrored my efforts in KDE4.  After the release of the gnome stuff and library changes on July 30, I moved onto Sugar integration.  I've since finished the Sugar integration and the files are available here: http://cctools.svn.sourceforge.net/viewvc/cctools/liblicense-sugar/trunk/ .  We'll probably never officially release it due to its exclusivity to the Sugar interface.  I'm proud of where liblicense has come.  Like I've written before, I think that license awareness is important and liblicense is a small, important step in the right direction.

My other project which I volunteered to help with was the LiveContent liveCD.  When I got here Tim was assigned the task of producing the new Creative Commons LiveCD with a target of LinuxWorld (August 8th) as a release date.  After a week or so here I offered to technically advise the project.  While my intention was to only be a reference I quickly became technically responsible for the CD and its creation.  Although this was not what I had bargained for, it was well worth it.  To create the CD we utilized livecd-creator, a Fedora LiveCD creator.  It was a challenge for me to adapt to a different packaging system (from portage for Gentoo to rpm for Fedora).  Additionally, although livecd-creator is a step in the right direction (like liblicense) it did not fulfill all of  our needs and resulted in some hacky scripts to build the CD.  To counter those frustrations I added an easter egg to the CD which I will not disclose.  :-D  Having Tim orchestrating the entire project also reduced my stress level quite a bit.  However, it is quite nerve-racking creating a LiveCD to be duplicated 1000 times and pushed by both Creative Commons and Fedora.  All in all, it turned out great.  The next version(s), which I will not be a part of,  should be even better.

I'm moving on.  While I've enjoyed my time here at CC, I'll not be continuing on these projects.  I've got a somewhat short attention span for projects and it has run dry for both LiveContent and liblicense.  Over the last few days I've been brain dumping so that Asheesh can pick up where I left off.  This move should be good for the projects because Asheesh is a very smart and driven person.  You should check out his current project jsWidget. Since I'm done,  I'll be driving home to Washington (the state not the district) tomorrow morning.  When I get there I'll be enjoying home and working on educational materials for teaching Python in the intro Computer Science course at UW.  After that I plan on focusing on my own projects.

Lastly, I'd like to thank everyone here at CC.  Alex, our graphic designer, has been a huge help on both liblicense (he wrote the Ruby bindings) and LiveContent ( he did the sweet packaging).  Nathan Yergler's flexibility allowed me to switch between projects on my own will and thus keep stress to a minimum.  All of the other CC interns, Tim, Rebecca, Cameron and Thierry, made this summer great because we bonded as a group as we worked hard and hung out at various events.  Finally, Jon has been an immense help by entertaining my questions, dealing with my grumpiness and encouraging me on both of my projects.  As always, there are many others who made this a great experience but the folks mentioned are those who I worked with day-to-day.  Thanks, everyone.  I hope that what I started while here at CC sees much use in the future.  Cheers.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2007-08-24 16:45:41</wp:post_date>
		<wp:post_date_gmt>2007-08-24 16:45:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-farewell</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interns-2007"><![CDATA[Interns 2007]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>Varnish Cache at CC</title>
		<link>http://labs.creativecommons.org/2008/04/03/varnish-cache-at-cc/</link>
		<pubDate>Thu, 03 Apr 2008 23:18:06 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/04/03/varnish-cache-at-cc/</guid>
		<description></description>
		<content:encoded><![CDATA[Over the past few months we have been migrating most of our web services to new servers.  <a href="http://www.squid-cache.org/">Squid Cache</a> was in use on a number of the old servers as an HTTP accelerator, and we decided that while upgrading hardware and OS we might as well bring our HTTP accelerator fully into the 21st century.  Enter <a href="http://varnish.projects.linpro.no/">Varnish Cache</a>, which has some <a href="http://varnish.projects.linpro.no/wiki/ArchitectNotes">interesting architectural/design features</a>.

Varnish was easy to install thanks to the Debian package management system, and the configuration file is vastly simpler than that of Squid despite a horrendous dearth of documentation.  Varnish runs well and we are generally happy with it.  However, after a few months we have encountered a number of gotchas, most of which probably have workarounds:

<ul>
    <li>Varnish seems to choke on files that are larger than around 600MB.  No errors, just sends the client a 200 response with no other data.</li>
    <li>For some reason <a href="http://bazaar-vcs.org/bazaar">Bazaar</a> (bzr) apparently does not function through Varnish, even when Varnish was instructed to "pass" requests to bzr repositories.</li>
    <li><a href="http://bbpress.org/">bbPress</a> for some unknown reason won't function through Varnish.</li>
    <li>KeepAlives must to be turned off in Apache, otherwise pages randomly take 1 to 2 minutes to load sometimes. There is an  <a href="http://varnish.projects.linpro.no/ticket/55">open bug report</a> for this at Varnish's Trac page.</li>
    <li>Varnish logs are big.  They get out of hand in a hurry.  For creativecommons.org the log file can grow to 2GB+ in less than 30 minutes. No problem, but varnishlog doesn't seem to want to write to a file larger than 2GB.  It could have something to do with <a href="http://varnish.projects.linpro.no/ticket/85">an email thread</a> I read at Varnish's site, which makes it seems like it might be related to the fact that we are running everything in 32 bit mode, though I believe our hardware support both 32 and 64 bit operation. This means that I have to run a special logrotate script about every 10 or 15 minutes to keep varnishlog from crashing.</li>
</ul>

I was recently experimenting and discovered that for some things that were apparently broken, configuring Varnish to "pipe" requests works, while using "pass" does not.  This won't make any sense unless you are familiar with VCL (Varnish Configuration Language).  I know that "piping" fixed the bbPress issue, and I suspect that it will fix the Bazaar issue as well, though I haven't tested it.

A week or so ago I experimented with turning off Varnish for creativecommons.org to see how Apache would handle the load unaided.  Things seemed to be going well for a while, but within a weeks time the site went down twice.  The second time I couldn't revive Apache.  There were kernel messages like <code>ip_conntrack: table full: packet dropped</code>.  Apparently the machine was just flooded and Apache was pegged at it's MaxClients limit.  I re-enabled Varnish and the problem went away immediately.  So it appears that not only is Varnish doing a nice job of caching, but it also is able to handle many more simultaneous TCP connections than Apache without blowing up.  <a href="http://creativecommons.org/about/people/#83">Asheesh</a> and I ran some experiments that seemed to demonstrate that Varnish actually helps to mitigate floods of traffic, whether they be natural or malicious.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2008-04-03 23:18:06</wp:post_date>
		<wp:post_date_gmt>2008-04-03 23:18:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>varnish-cache-at-cc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[32 to 64bit remotely - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2008/07/15/32-to-64bit-remotely/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-15 23:09:44</wp:comment_date>
			<wp:comment_date_gmt>2008-07-15 23:09:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] couple months ago I posted here about some of our experiences with Varnish Cache as an HTTP accelerator. By and large I have been [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[ar-lock]]></wp:comment_author>
			<wp:comment_author_email>ariccanfly@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-10-27 14:24:35</wp:comment_date>
			<wp:comment_date_gmt>2008-10-27 14:24:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So how's varnish working for you now, months later?

It seems to be pretty obscure, are you satisfied?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[chaaban]]></wp:comment_author>
			<wp:comment_author_email>chaaban@live.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.chaaban.info</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-21 15:54:40</wp:comment_date>
			<wp:comment_date_gmt>2009-01-21 15:54:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[for bbpress, it's the cookies that kill varnish ... there is a workaround using vlc .]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[Bruno Sacco]]></wp:comment_author>
			<wp:comment_author_email>brusacco@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://dueledecirlo.paraguay.com/</wp:comment_author_url>
			<wp:comment_author_IP>201.217.52.158</wp:comment_author_IP>
			<wp:comment_date>2011-05-31 19:20:43</wp:comment_date>
			<wp:comment_date_gmt>2011-05-31 19:20:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm using Varnish + Apache + Memcached + Wordpress

No problems, very good performance(50k uniques/day and 180kpageloads/day)

Requires some VLC changes for Wordpress.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Destination: Sanity</title>
		<link>http://labs.creativecommons.org/2008/03/27/destination-sanity/</link>
		<pubDate>Thu, 27 Mar 2008 22:45:12 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/03/27/destination-sanity/</guid>
		<description></description>
		<content:encoded><![CDATA[Last week <a href="http://creativecommons.org/about/people#75">Kinkade</a> asked me for a brief overview of how the <a href="http://code.creativecommons.org/viewsvn/cc.engine">license engine</a>, <a href="http://api.creativecommons.org">web services</a> and other <a href="http://code.creativecommons.org/viewsvn/license_xsl">bits</a> of <a href="http://code.creativecommons.org/viewsvn/licenses.rdf">code</a> all fit together to create the joy that is <a href="http://creativecommons.org">creativecommons.org</a>.  "Sure," I thought; "that's simple!"

Er, maybe not.  Fourty-five minutes, five marker colors and multiple digressions later, I had the following diagram of life as it is today.

<a href="http://www.flickr.com/photos/nathan_y/2347987536/" title="The Present by Nathan Y, on Flickr"><img src="http://farm3.static.flickr.com/2297/2347987536_5515b1f963.jpg" width="500" height="375" alt="The Present" /></a>
<caption>"The Present", by <a href="http://flickr.com/photos/nathan_y">Nathan Y.</a>; <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA 2.0</a></caption>

Life sucks.

<a href="http://creativecommons.org/about/people#83">Asheesh</a> joined us and we started talking about how we can make this better.  The above, while eminently sucky, has grown up during my time at Creative Commons.  All those decisions made sense at the time, but in aggregate we've got lots of duplicated code, a branch of code named the <code>gradually-increasing-sanity-branch</code> which doesn't (I take the blame for that one), and plenty of unnecessary complexity.  Half an hour later, we had mapped out <strong>The Glorious Future&reg;</strong>:

<a href="http://www.flickr.com/photos/nathan_y/2347986388/" title="The Glorious Future by Nathan Y, on Flickr"><img src="http://farm4.static.flickr.com/3267/2347986388_dd1c466a5e.jpg" width="500" height="375" alt="The Glorious Future" /></a>
<caption>"The Glorious Future", by <a href="http://flickr.com/photos/nathan_y">Nathan Y.</a>; <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA 2.0</a></caption>

A little simpler, huh?  And the "future" diagram shows all the functionality of the present, <em>plus</em> three packages not displayed on the original diagram.  Our immediate goal in moving in this direction is the completion of <code>cc.license</code> (labeled as "cc.licenze" in the diagrams to distinguish it from the existing implementation) which will replace the existing XSLT processing using for issuing licenses and wraps the RDF (which is the canonical representation of the licenses anyway).  We'll also manage to dramatically reduce the number of <code>svn:externals</code> we use, which is good since we're moving <a href="http://git.or.cz/">away</a> from <a href="http://subversion.tigris.org">Subversion</a> for some projects.  My goal is to get this upgrade done as soon as possible so we can focus on things that are actually interesting instead of our own infrastructure.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2008-03-27 22:45:12</wp:post_date>
		<wp:post_date_gmt>2008-03-27 22:45:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>destination-sanity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internal"><![CDATA[internal]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="category" nicename="sanity"><![CDATA[sanity]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Blog Archive Version Control Changes &mdash; TechBlog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://techblog.creativecommons.org/2008/04/01/version-control-changes/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-04-01 18:35:59</wp:comment_date>
			<wp:comment_date_gmt>2008-04-01 18:35:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] TechBlog by Creative Commons      Select a jurisdiction      License Your Work    Find CC Licensed Work      &laquo; Destination: Sanity [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Version Control Changes</title>
		<link>http://labs.creativecommons.org/2008/04/01/version-control-changes/</link>
		<pubDate>Tue, 01 Apr 2008 18:35:57 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/04/01/version-control-changes/</guid>
		<description></description>
		<content:encoded><![CDATA[I alluded to it in my <a href="http://techblog.creativecommons.org/2008/03/27/destination-sanity/">last post</a> and wanted to provide some more details and context on the changes we're making (have made) to our source control systems.  Since I started working on CC code in late 2003 we've hosted our source repository in the <a href="http://sourceforge.net/projects/cctools">CC Tools project</a> at <a href="http://sourceforge.net">Sourceforge.net</a>, first in <a href="http://en.wikipedia.org/wiki/Concurrent_Versions_System">CVS</a>, later in <a href="http://en.wikipedia.org/wiki/Subversion_(software)">Subversion</a>.  Sourceforge.net has been great in one major respect &mdash; to the best of my knowledge we've never had a data loss issue.  Of course, many times using Sourceforge has also felt like something to endure rather than appreciate.  It was while enduring the delayed availability of Subversion that we decided to move the <a href="http://wiki.creativecommons.org/CcPublisher">ccPublisher</a> code base to <a href="http://developer.berlios.de/projects/cctools">Berlios.de</a>, which was marginally better.  

Since the beginning of 2008 a few things have conspired to finally push us over the edge and decide to leave Sourceforge.net behind.  On one hand we've been itching to work with a <a href="http://en.wikipedia.org/wiki/Distributed_Version_Control_System">distributed version control</a> system (we wound up choosing <a href="http://en.wikipedia.org/wiki/Git_%28software%29">Git</a>).  While using Sourceforge didn't rule that out, I wanted to make sure that we had a place to publish our repositories publicly, both for redundancy and transparency.  Accepting this as a task just made me more amenable to also creating a place to publish a Subversion repository. The other event was a morning of outages (again) on Sourceforge's Subversion server.  I was trying to commit updates to the license deeds (just over 20,000 files updated), and the operation kept failing mid-way through.  Note that this is a commit that can take up to 12 hours when successful.  

Two days later we were cutting over to a new system, hosted at <a href="http://code.creativecommons.org">code.creativecommons.org</a>.  We turned off write access to the Sourceforge repository, synced it, and asked contributors for public keys, which we're using for authentication.  The new system supports both Git and <a href="http://code.creativecommons.org/viewsvn">Subversion</a>, public key authentication for committers (using the pretty slick <a href="http://scie.nti.st/2007/11/14/hosting-git-repositories-the-easy-and-secure-way">gitosis</a> on the git side) and is fast.  Really, really, really fast when compared to our Sourceforge repository.

Total estimated time for testing and deployment: 2 person-days.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date>2008-04-01 18:35:57</wp:post_date>
		<wp:post_date_gmt>2008-04-01 18:35:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>version-control-changes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Luke Hoersten]]></wp:comment_author>
			<wp:comment_author_email>Luke@Hoersten.org</wp:comment_author_email>
			<wp:comment_author_url>http://humani.st</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-04-02 18:13:42</wp:comment_date>
			<wp:comment_date_gmt>2008-04-02 18:13:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent move Nathan. It's never an easy call to move to a whole new revision control system/model when you have such a large code base (or in your case, large composition of code bases). When I worked on CC related stuff, it was definitely a hurtle to work with SVN and especially SF (which was constantly slow or down). VCSs should facilitate not hinder and I think DVCSs do that.

Git and DVCSs in general can be slightly more challenging for developers to learn, especially after being so used to CVS or SVN. For OS X users, there's an awesome GUI called GitNub hosted at GitHub. For learning DVCSs in general, here's a collection of resources, such as guides and tech talks. Linus' tech talk is a must-see.

Good luck with the migration!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Jakub Narebski]]></wp:comment_author>
			<wp:comment_author_email>jnareb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-04-05 10:43:45</wp:comment_date>
			<wp:comment_date_gmt>2008-04-05 10:43:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It looks like git web interface doesn't work (yet?), at least link at code.creativecommons.org named "web view" for Git, http://code.creativecommons.org/viewgit returns 404 Not Found error.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Issue Tracking at code.creativecommons.org - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2008/09/05/issue-tracking-at-codecreativecommonsorg/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-09-05 21:19:40</wp:comment_date>
			<wp:comment_date_gmt>2008-09-05 21:19:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the trend started when we moved our source repository, today we&#8217;re rolling out issue tracking on code.creativecommons.org. Our goals are two [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[git-svn and svn:externals &laquo; yergler.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://yergler.net/blog/2009/07/21/git-svn-and-svnexternals/</wp:comment_author_url>
			<wp:comment_author_IP>66.98.214.35</wp:comment_author_IP>
			<wp:comment_date>2009-07-21 16:47:27</wp:comment_date>
			<wp:comment_date_gmt>2009-07-21 16:47:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creative Commons we&#8217;re a dual-[D]VCS shop. Since we started self-hosting our repositories last year we&#8217;ve been using both Subversion and git. The rationale was pragmatic more than [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Stand-up Meeting 2004-04-01</title>
		<link>http://labs.creativecommons.org/2008/04/03/stand-up-meeting-2004-04-01/</link>
		<pubDate>Thu, 03 Apr 2008 20:21:35 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/04/03/stand-up-meeting-2004-04-01/</guid>
		<description></description>
		<content:encoded><![CDATA[The Tech Team at Creative Commons has recently replaced our weekly one-on-ones (myself with each direct report) with semi-weekly <a href="http://en.wikipedia.org/wiki/Stand-up_meeting">stand-up meetings</a> for the entire team.  Note that we're not really agile "purists" -- our meeting involve some discussion of priorities, etc, either for the week ahead, or as a recap of the week past.

From Tuesday's meeting:

<a href="http://www.flickr.com/photos/nathan_y/2385230161/" title="Standup Mtg 2008-04-01 (1/3) by Nathan Y, on Flickr"><img src="http://farm4.static.flickr.com/3172/2385230161_641b2481c2_m.jpg" width="240" height="192" alt="Standup Mtg 2008-04-01 (1/3)" /></a>
<a href="http://www.flickr.com/photos/nathan_y/2385228781/" title="Standup Mtg 2008-04-01 (2/3) by Nathan Y, on Flickr"><img src="http://farm3.static.flickr.com/2258/2385228781_b6962f4526_m.jpg" width="240" height="192" alt="Standup Mtg 2008-04-01 (2/3)" /></a>
<a href="http://www.flickr.com/photos/nathan_y/2386059670/" title="Standup Mtg 2008-04-01 (3/3) by Nathan Y, on Flickr"><img src="http://farm4.static.flickr.com/3172/2386059670_9aa013cf66_m.jpg" width="240" height="192" alt="Standup Mtg 2008-04-01 (3/3)" /></a>

<caption>Photos <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC BY-SA 2.0</a>, <a href="http://flickr.com/photos/nathan_y/">Nathan Y.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2008-04-03 20:21:35</wp:post_date>
		<wp:post_date_gmt>2008-04-03 20:21:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stand-up-meeting-2004-04-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>liblicense 0.7.0: Now with working Python bindings again</title>
		<link>http://labs.creativecommons.org/2008/05/16/liblicense-070-now-with-working-python-bindings-again/</link>
		<pubDate>Fri, 16 May 2008 20:19:05 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/05/16/liblicense-070-now-with-working-python-bindings-again/</guid>
		<description></description>
		<content:encoded><![CDATA[I just released liblicense 0.7.0 on SourceForge.  It fixes the Python bindings.  They've been broken since the 0.6 release, it seems.  Some functionality in them probably worked between 0.6 and 0.7, but (read on for more)...

<!--more-->
LL_LICENSE and other constants were "extern const char" arrays before.  Now they're just lousy old #defines.  This way, even though the strings might appear more than once in memory, it's very simple for the IO modules like exempi.so to refer to those constants.

Before, due to dynamic linker loading order issues, if liblicense.so were added to a process's memory memory map at runtime, if liblicense then tried to dlopen() its modules, the modules wouldn't be able to find those constants.  What a drag!  That broke the Python bindings' ability to use the modules.

Now, I guess that's still true, but the modules don't need actual symbols from liblicense anymore.

I noticed this issue in the process of creating and testing RPMs for Fedora.  I had to bump the SONAME because this removes symbols from the library.

You can grab it <a href="https://sourceforge.net/project/showfiles.php?group_id=80503&amp;package_id=238700">on SourceForge</a>, and perhaps soon in Fedora Rawhide.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2008-05-16 20:19:05</wp:post_date>
		<wp:post_date_gmt>2008-05-16 20:19:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-070-now-with-working-python-bindings-again</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>License-oriented metadata validator and viewer: the development has just started</title>
		<link>http://labs.creativecommons.org/2008/05/26/license%e2%80%91oriented-metadata-validator-and-viewer-the-development-has-just-started/</link>
		<pubDate>Mon, 26 May 2008 23:38:56 +0000</pubDate>
		<dc:creator><![CDATA[hugo dworak]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/05/26/license%e2%80%91oriented-metadata-validator-and-viewer-the-development-has-just-started/</guid>
		<description></description>
		<content:encoded><![CDATA[Creative Commons <a href="http://code.google.com/soc/2008/cc/about.html">participates</a> in <a href="http://code.google.com/soc/2008/">Google Summer of Code™</a> and has accepted a proposal (see the <a href="http://code.google.com/soc/2008/cc/appinfo.html?csaid=3C284456287C63B9">abstract</a>) of <a href="http://hugo.dworak.info/">Hugo Dworak</a> based on its description of a task to <a href="http://wiki.creativecommons.org/Rewrite_Metadata_Validator" title="Rewrite Metadata Validator">rewrite</a> its now-defunct <a href="http://validator.creativecommons.org/" title="http://validator.creativecommons.org" rel="nofollow">metadata validator</a>. <a href="http://creativecommons.org/about/people/#83">Asheesh Laroia</a> has been assigned as the mentor of the project. The work began on May 26th, 2008 as per the <a href="http://code.google.com/soc/2008/faqs.html#0.1_timeline">project timeline</a>. It is expected to be completed in twelve weeks. More details will be provided in the <a href="http://wiki.creativecommons.org/Rewrite_Metadata_Validator/SoC_2008">dedicated CC Wiki article</a> and the progress will be weekly featured on this blog.

The project focuses on developing an on-line tool — free software written in Python — to validate digitally embedded Creative Commons licenses within files of different types. Files will be pasted directly to a form, identified by a <abbr title="Universal Resource Locator">URL</abbr>, or uploaded by a user. The application will present the results in a human?readable fashion and notify the user if the means used to express the license terms are deprecated.]]></content:encoded>
		<excerpt:encoded><![CDATA[Creative Commons participates in Google Summer of Code™ and has accepted a proposal (see the abstract) of Hugo Dworak based on its description of a task to rewrite its now-defunct metadata validator. Asheesh Laroia has been assigned as the mentor of the project. The work began on May 26th, 2008 as per the project timeline. It is expected to be completed in twelve weeks. More details will be provided in the dedicated CC Wiki article and the progress will be weekly featured on this blog.]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2008-05-26 23:38:56</wp:post_date>
		<wp:post_date_gmt>2008-05-26 23:38:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license%e2%80%91oriented-metadata-validator-and-viewer-the-development-has-just-started</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="post_tag" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="post_tag" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>51</wp:comment_id>
			<wp:comment_author><![CDATA[New validator released! - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2009/01/06/new-validator-released/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-06 18:52:21</wp:comment_date>
			<wp:comment_date_gmt>2009-01-06 18:52:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] past summer, Hugo Dworak worked with us (thanks to Google Summer of Code) on a new validator. This work was greatly overdue, and we are very pleased that Google could fund [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CC-Logger [GSoC 2008]</title>
		<link>http://labs.creativecommons.org/2008/06/01/cc-logger-gsoc-2008/</link>
		<pubDate>Sun, 01 Jun 2008 08:36:25 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/01/cc-logger-gsoc-2008/</guid>
		<description></description>
		<content:encoded><![CDATA[Before I dive-in on what CC-Logger is all about, a small intro to who I am:

My name is <a href="http://ankitguglani.wordpress.com" title="Ankt Guglani">Ankit Guglani</a>, and I am an undergrad at Singapore Management University [<a href="http://sis.smu.edu.sg" title="SMU">link</a>]. I has been working on a research project called 'CC-Monitor' Since 2006 under the supervision of prof. Giorgos Cheliotis. This was my introduction to Creative Commons, I have been working on Collecting and Compiling CC-Metrics since.

This summer is again blessed with the <a href="http://code.google.com/opensource/gsoc/2008/faqs.html" title="Google Summer of Code - FAQ">Google, Summer of Code [GSoC]</a>. Yes, just like last year, Creative Commons [CC] is one of the mentoring organizations yet again. This time around there are 4 active CC-GSoC Projects; Here's what my GSoC project with CC [named CC-Logger] is all about.

The project aims to uncover the hidden metrics in the CC Logs. So I'll take look at the following logs (which are tucked away in an Amazon S3 account):

1) logs for creativecommons.org/license
2) logs for i.creativecommons.org and creativecommons.org/images/licenses
3) logs of creativecommons.org/licenses
4) logs for search.creativecommons.org

Looking at these I hope to find additional information about CC usage such as switching patterns and click-through rates to the deeds, and then analyze and interpret these results. I also hope to come up with some indices / metrics that can be used as indicative predictors for trends.

I know, you're thinking it's summer of CODE, and this is all analysis, where is the code? Once I am done with coming up with metrics and indices, I get to code to automate the calculation (and possibly the web-publishing of the results) for all the future logs.

The fun part about this project is, the logs I need to analyze right now, are over 100 GB in size. I am so looking forward to having a local copy of that!

That's all for now, thanks to prof. Giorgos for getting me into CC, Mike for suggesting looking at the logs and of course Asheesh, for the mentoring. (-:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2008-06-01 08:36:25</wp:post_date>
		<wp:post_date_gmt>2008-06-01 08:36:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-logger-gsoc-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Going Home - $Project status &laquo; I&#8217;ve been busy with &#8230;]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://ankitguglani.wordpress.com/2008/06/01/going_home/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-06-01 15:59:00</wp:comment_date>
			<wp:comment_date_gmt>2008-06-01 15:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] - Intro Blog Post done :: Timeline &amp;&amp; Wiki page pending :: Working on setting up [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC 2008 : Flickr Image Re-Use for OpenOffice.org</title>
		<link>http://labs.creativecommons.org/2008/05/29/gsoc-2008-flickr-image-re-use-for-openofficeorg/</link>
		<pubDate>Thu, 29 May 2008 22:22:00 +0000</pubDate>
		<dc:creator><![CDATA[mihai]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/05/29/gsoc-2008-flickr-image-re-use-for-openofficeorg/</guid>
		<description></description>
		<content:encoded><![CDATA[As title might suggest, i have been selected for <a href="http://code.google.com/soc/2008/">GSoC 2008</a>. As mentor for this  <a href="http://wiki.creativecommons.org/Flickr_Image_Re-Use_for_OpenOffice.org">project</a> has been assigned <a href="http://creativecommons.org/about/people/#31">Nathan Yergler</a>.

The developing will focus on 3 key functionalities:
<ul>
	<li> ability to search photos by tags</li>
	<li> filter search results by license attributes</li>
	<li> insert the image into the document along with attribution information</li>
</ul>
The first 2 steps were done(of course, this will not be the final version) in small <a href="http://students.info.uaic.ro/~mhusleag/FlickrOOPlugin.oxt">demo </a>that i attached to my application for <a href="http://code.google.com/soc/2008/">GSoC 2008</a>.  The <a href="http://www.openoffice.org/">OpenOffice </a>components for which the extension will be implemented are Writer, Impress and Calc.

The application will be written in <a href="http://en.wikipedia.org/wiki/Java_language">Java</a>, using <a href="http://www.netbeans.org/">NetBeans</a> with its plugin <a href="http://www.netbeans.org/community/magazine/html/03/openoffice/">OpenOffice NetBeans Integration</a>.

A short introduction : I`m Mihai Husleag, 24 years old, student in <a href="http://www.infoiasi.ro/bin/Main/?language=en">Computer Science</a>, at <a href="http://www.uaic.ro/uaic/bin/view/Main/?language=en">Alexandru Ioan Cuza University</a> of <a href="http://en.wikipedia.org/wiki/Iasi">Iasi</a>, <a href="http://en.wikipedia.org/wiki/Romania">Romania</a>. My previous experience as programmer is more related to the  .NET framework.  Another thing about me, if in the weekends i`m not reachable then its a high probability that you will find me <a href="http://picasaweb.google.com/muntomanul1/PiatraCraiului/photo#5144739821863831250">here</a>.

If you have any suggestions about this project(new functionalities, things you don't like, etc)  feel free to leave a comment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2008-05-29 22:22:00</wp:post_date>
		<wp:post_date_gmt>2008-05-29 22:22:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-2008-flickr-image-re-use-for-openofficeorg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>CC-Logger The S3 Chronicles</title>
		<link>http://labs.creativecommons.org/2008/06/02/cc-logger-the-s3-chronicles/</link>
		<pubDate>Mon, 02 Jun 2008 10:51:01 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/02/cc-logger-the-s3-chronicles/</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Task One</strong> :: Setup a client to access the S3 bucket and retrieve the logs.

<strong>Attempt One</strong> :: Jungle Disk. A tool for the Mac with GUI implementation that mounts the S3 as a drive. Sounds cool, easy to install and setup, detects the buckets, but the mounted drive is empty. I would wait, expecting it to load the information, but my firewall told me it wasn't exchanging any information with the S3 server and that was that.

<strong>Attempt Two</strong> :: Now I went for the S3Sync.rb and s3cmd.rb. Two ruby scripts that are acclaimed to be the solution. I setup the yml file with the keys to accessing the bucket and place it in the required location. I run the script and "Environment is not set up". I go over the read me again and sure enough I had missed something; there were two pre-requisites, Ruby and Open-SSL library for ruby. I had ruby of course, but not the Open-SSL library. So I go and look for it and guess what, it doesn't exist O_o. There are only eassl and jruby-openssl.

I don't want to switch to another tool for a few reasons. One, this was recommended by the folks at CC, so I know this works with their setup. Two, each tool interacts with S3 in a different way and other tools may / may not work even if I set them up properly. Three come on, this is ruby, something I am familiar with, and it looks fairly easy to use, if only I can get hold of that dependency.

I'll read up on some posts I came across earlier where people said they were using S3 ... maybe there are some description of the setup there. If I find nothing, back to the IRC.

That's all for now.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2008-06-02 10:51:01</wp:post_date>
		<wp:post_date_gmt>2008-06-02 10:51:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-logger-the-s3-chronicles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon-s3"><![CDATA[Amazon S3]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>S3 Finally!</title>
		<link>http://labs.creativecommons.org/2008/06/03/s3-finally/</link>
		<pubDate>Tue, 03 Jun 2008 19:16:20 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/03/s3-finally/</guid>
		<description></description>
		<content:encoded><![CDATA[/me hugs paulproteuss ... yes an extra s in there today, but thanks to him [and the guy who posted this :: <a href="http://www.macosxhints.com/article.php?story=2008020123070799">http://www.macosxhints.com/article.php?story=2008020123070799</a> with a link to an archive with the S3Browser.app] I now finally have access to S3! (-:

OK, so now that I have access to 25887 objects which take up 319.191 GB (and growing) I need to sort out which ones I need to make a local copy. I sure don't want to go around messing about with the stuff online, especially since that's the only copy! I would take the whole dump but there are costs involved:
<ul>
	<li><strong>Storage</strong> - not a big deal, I have 250+ GB available now</li>
	<li><strong>Time</strong> - shouldn't take *too* long, I can let my mac be sleepless a couple of nights</li>
	<li><strong>Money</strong> - apparently it would cost about 50 bucks for the transfer</li>
</ul>
And well, I guess that would be just taking the easy way out. So, I'll shovel through and familiarize myself with the data so I know which parts I really really should have and what data is not going to very helpful in the analysis and I'll make a copy of whatever makes for good analysis.

Eye-balling shows me a lot of error logs which I might not include for analysis at the moment [at least not as a part of the GSoC project ... may be later]. I'll probably make a big list of what are all the different types of logs in there and what attributes each of them has. Then I can probably start looking at how I can use the combination of different attributes stored in each of them to come up with useful metrics.

That's all for now, need to wrap up other projects before I can get started on GSoC full throttle. So, it's 3:15 am and I am signing off to get back to work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2008-06-03 19:16:20</wp:post_date>
		<wp:post_date_gmt>2008-06-03 19:16:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>s3-finally</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="amazon-s3"><![CDATA[Amazon S3]]></category>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="metics"><![CDATA[Metics]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>Summer Internship : email notification for Semantic Media Wiki</title>
		<link>http://labs.creativecommons.org/2008/06/10/summer-internship-email-notification-for-semantic-media-wiki/</link>
		<pubDate>Tue, 10 Jun 2008 16:05:06 +0000</pubDate>
		<dc:creator><![CDATA[steren]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/10/summer-internship-email-notification-for-semantic-media-wiki/</guid>
		<description></description>
		<content:encoded><![CDATA[First I would like to introduce myself. I'm Steren Giannini, a French student from <a href="http://www.ec-lyon.fr/">Ecole Centrale de Lyon</a>, a college of general engeneering.  I'm working as a tech intern at Creative Commons SF. It's for me the first time I cross the Atlantic, so this stay in San Francisco is a real adventure. I'm very proud to do my part in the CC revolution.

During my school years, I created websites for companies (to make some spending money ;) ) and I recently worked on <a href="http://www.inkscape.org/">Inkscape</a> : I've been enhancing the <a href="http://wiki.inkscape.org/wiki/index.php/ReleaseNotes047#Live_path_effects">Live Path Effect system</a>.

The first goal of my project at CC is to improve the internal task and project tracking system. It uses <a href="http://semantic-mediawiki.org/">Semantic MediaWiki</a>. Today tasks can be created and assigned to users. What I have to do is to add email notification to the system.

This means :
<ul>
	<li>send email to the assigned users when a task changes</li>
	<li>send "reminder" emails to assigned users when due dates are approaching.</li>
</ul>
So yesterday I started by reading some documentation about Semantic Web in general, RDF specification, MediaWiki and Semantic MediaWiki. Then I installed MediaWiki on my localhost in order to have a closer look to the code.

My first goal is to get used to the existing system before codding something.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2008-06-10 16:05:06</wp:post_date>
		<wp:post_date_gmt>2008-06-10 16:05:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer-internship-email-notification-for-semantic-media-wiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="interns-2008"><![CDATA[interns 2008]]></category>
		<category domain="post_tag" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="task-and-project-tracking-system"><![CDATA[task and project tracking system]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Wait, they test web apps now?</title>
		<link>http://labs.creativecommons.org/2008/06/10/wait-they-test-web-apps-now/</link>
		<pubDate>Tue, 10 Jun 2008 18:14:09 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/10/wait-they-test-web-apps-now/</guid>
		<description></description>
		<content:encoded><![CDATA[Greetings all. I'm Frank and I'm the other tech intern at CC for 2008.  I mainly focus on writing Python, though I'm comfortable with Java and I'll deal with C when sufficiently coerced.

For my first task, I'll be improving the test suite for the &lt;a href="http://api.creativecommons.org/docs/"&gt;web service API&lt;/a&gt;. Currently it runs on &lt;a href="http://cherrypy.org/"&gt;CherryPy&lt;/a&gt; and the test suite is brittle and somewhat broken. I'll be porting the tests over to &lt;a href="http://pythonpaste.org/"&gt;Python Paste&lt;/a&gt;, getting them all to pass, and checking code coverage to see where more tests would be beneficial (testing is fun after all). The overarching goal is to get the API running on &lt;a href="http://pylonshq.com/"&gt;Pylons&lt;/a&gt; so CC has fewer server stacks to maintain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2008-06-10 18:14:09</wp:post_date>
		<wp:post_date_gmt>2008-06-10 18:14:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wait-they-test-web-apps-now</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="interns-2008"><![CDATA[interns 2008]]></category>
	</item>
	<item>
				<title>Flickr Image Re-Use for OpenOffice.org update</title>
		<link>http://labs.creativecommons.org/2008/06/13/flickr-image-re-use-for-openofficeorg-updates/</link>
		<pubDate>Fri, 13 Jun 2008 20:45:24 +0000</pubDate>
		<dc:creator><![CDATA[mihai]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/13/flickr-image-re-use-for-openofficeorg-updates/</guid>
		<description></description>
		<content:encoded><![CDATA[I`m happy to announce that i succeeded in doing, in a basic manner, all the 3 requirements for this project : search photos by tags, by license and to insert one photo into a document.

Here you have a screenshot made after a search was done on tag <strong>mountains </strong> and license <strong>Attribution License</strong> :

<a href="http://techblog.creativecommons.org/files/2008/06/ccflickr1.JPG" title="Results after a search on a tag and a license"><img src="http://techblog.creativecommons.org/files/2008/06/ccflickr1.JPG" alt="Results after a search on a tag and a license" /></a>

Also here you have the screenshot with the photo inserted into a <a href="http://techblog.creativecommons.org/files/2008/06/ccflickr2.JPG" title="Photo">document </a>. As you can see the image was inserted with a default size, but this will be changed later.

What i`ll try to do next :
<ul>
	<li>add menus to each image with the available sizes</li>
	<li>improve the searching</li>
	<li>inserting the image into the document with the selected size</li>
	<li>adding the license into the document</li>
	<li>more testing</li>
</ul>
I hope, that in less than 2 weeks i will make available a good version.

Any comments or suggestions are well appreciated.

ps : I came across this <a href="http://www.freesoftwaremagazine.com/columns/2008_google_summer_code_21_projects_im_excited_about" title="2008_google_summer_code_21_projects_im_excited_about">article</a>. "I for one can’t wait." says <a href="http://www.freesoftwaremagazine.com/user/37372" title="Andrew Min">Andrew Min</a> about this project. I`ll try to not disappoint him :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2008-06-13 20:45:24</wp:post_date>
		<wp:post_date_gmt>2008-06-13 20:45:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-image-re-use-for-openofficeorg-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:comment>
			<wp:comment_id>60</wp:comment_id>
			<wp:comment_author><![CDATA[Flickr Image Re-Use for OpenOffice.org Demo availlable - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2008/07/12/flickr-image-re-use-for-openofficeorg-demo-availlable/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-12 23:11:56</wp:comment_date>
			<wp:comment_date_gmt>2008-07-12 23:11:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] trust a programmer when he gives you a date for something to be done . Thats what i did in my last article (2 weeks i think i said then) and here we are a month [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>How big are the logs again?</title>
		<link>http://labs.creativecommons.org/2008/06/13/how-big-are-the-logs-again/</link>
		<pubDate>Fri, 13 Jun 2008 20:47:50 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/13/how-big-are-the-logs-again/</guid>
		<description></description>
		<content:encoded><![CDATA[OK, so now I should maybe go back and thank nathany for the advise on not to download the whole dump of logs which looked like an innocent 319.xx GB back then ... it's only once I got some samples and started playing around I realised, that was 319.xx GB of archives, which when unzipped by rough calculation come to over 2 Tera-bytes of text logs. That much amount of space, I unfortunately don't have.

Apart from that, the data looks interesting. More information than I had anticipated. I recall Asheesh mentioning some standard tools for working with the logs, I'll have to follow up on that. Other-wise, now would as good a time as any to practice some regular expressions. (-:]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2008-06-13 20:47:50</wp:post_date>
		<wp:post_date_gmt>2008-06-13 20:47:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-big-are-the-logs-again</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>liblicense packages for Ubuntu and Debian</title>
		<link>http://labs.creativecommons.org/2008/06/16/liblicense-packages-for-ubuntu-and-debian/</link>
		<pubDate>Mon, 16 Jun 2008 16:24:01 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/16/liblicense-packages-for-ubuntu-and-debian/</guid>
		<description></description>
		<content:encoded><![CDATA[I've finally finished creating and updating the <a href="http://wiki.creativecommons.org/Liblicense">liblicense</a> packages for Debian and Ubuntu.

For Debian, just make sure your system is set to pull from Debian sid ("unstable") - the packages are in the official archives; take a look at <a href="http://packages.debian.org/liblicense">http://packages.debian.org/liblicense</a>!  (Thanks to Mako for sponsoring my upload.)

For Ubuntu, for the time being, you should use the Creative Commons
repository.  Information on that is at <a href="http://mirrors.creativecommons.org/packages/">http://mirrors.creativecommons.org/packages/</a>.  A short summary:
<blockquote>deb http://mirrors.creativecommons.org/packages hardy main</blockquote>
Add that to sources.list, do "sudo aptitude install liblicense-python", and then you can "import liblicense" to your heart's content!

Because the packages are in the central Debian repository, they will propagate to Ubuntu automatically for Ubuntu's next release, and you won't have to maintain any special configuration to be able to install them.

Nathan Y. asked a question: Why "liblicense2"? This is because of ABI versioning - if you write a C application that links to liblicense and upload that to the Debian archive, it is crucial that if the liblicense library gets updated, the user of your application not need to recompile your app. For that reason, "ABI versioning" is a promise that so long as the library has version <em>2.x</em>, any program built with an earlier or equal version of <em>2.x</em> will have the library functions appear in the same place in memory. That way, the compiled-in assumptions about those functions' location will not be violated. If it were to be violated, the application would quickly crash with a "Segmentation fault" or "Access violation," or it might even try to execute the wrong liblicense function.

Now I need to work on the <a href="https://bugzilla.redhat.com/show_bug.cgi?id=446993">Fedora liblicense packaging bug</a>....]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date>2008-06-16 16:24:01</wp:post_date>
		<wp:post_date_gmt>2008-06-16 16:24:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-packages-for-ubuntu-and-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>CC Tech Summit pre-blogging</title>
		<link>http://labs.creativecommons.org/2008/06/18/cc-tech-summit-pre-blogging/</link>
		<pubDate>Wed, 18 Jun 2008 00:58:52 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/cc-tech-summit-pre-blogging/</guid>
		<description></description>
		<content:encoded><![CDATA[CC's awesome interns (and perhaps others) will be live blogging the <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2008-06-18">tech summit</a> tomorrow, but panelist (and long time CC friend and innovator) Rob Kaye has a pre-blog -- <a href="http://mayhem-chaos.net/blog/archives/001162.html">Thoughts on Copyright Registries</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2008-06-18 00:58:52</wp:post_date>
		<wp:post_date_gmt>2008-06-18 00:58:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-tech-summit-pre-blogging</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="registry"><![CDATA[registry]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
	</item>
	<item>
				<title>Joi Ito Intro</title>
		<link>http://labs.creativecommons.org/2008/06/18/joi-ito-intro/</link>
		<pubDate>Wed, 18 Jun 2008 16:55:57 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/joi-ito-intro/</guid>
		<description></description>
		<content:encoded><![CDATA[CC's CEO Joi Ito kicked off the festivities with an admittedly-stretched but wholly acceptable metahpor: comparing the internet's early battle to promote TCP/IP adoption with our present battles to promote CC's adoption. Joi sees CC as a means of creating a path from a completely closed to a completely open world.

There are two pieces of the framework: the legal and technical piece, and the political piece. This distinction is paramount. Says Joi, "We can't exclude people on the technology level. ...  We want Republicans using it.. we want everyone using it."

<a href="http://techblog.creativecommons.org/files/2008/06/p6180148.JPG" title="CC CEO"><img src="http://techblog.creativecommons.org/files/2008/06/p6180148.JPG" alt="CC CEO" /></a>&lt;a href="http://creativecommons.org/licenses/by/3.0/us/"&gt;Photo by Steren Giannini, licensed CC-BY-3.0&lt;/a&gt;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2008-06-18 16:55:57</wp:post_date>
		<wp:post_date_gmt>2008-06-18 16:55:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joi-ito-intro</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="post_tag" nicename="techsummit"><![CDATA[techsummit]]></category>
	</item>
	<item>
				<title>ccREL Joining Man and Machine, Presenting Cute Dogs</title>
		<link>http://labs.creativecommons.org/2008/06/18/ccrel-joining-man-and-machine-presenting-cute-dogs/</link>
		<pubDate>Wed, 18 Jun 2008 17:57:02 +0000</pubDate>
		<dc:creator><![CDATA[thwang]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/ccrel-joining-man-and-machine-presenting-cute-dogs/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><img src="http://farm4.static.flickr.com/3165/2590709576_77cc7cf61e.jpg?v=0" height="315" width="500" /></p>
Ben Adida, Creative Commons W3C Representative, gave a presentation on the first session of the Technology Summit on <a href="http://wiki.creativecommons.org/CcREL">ccREL, a syntax-free machine-readable code for licenses</a>.

The problem, as Adida explained between images of code and pets, was that the traditional breakdown divides CC licensing deeds into machine and human readable versions.

Moreover, information about licenses is stored in HTML which is opaque to humans and parsers alike and easy to make errors in. ccREL provides a simple framework built across RDFa for license information to be easily shared, built on, and extended to a variety of different uses in a form understandable by the browser.

Ultimately, the ambition of ccREL is to provide ways to link the vast stores of varied data on the web. One outcome, visual correspondence, would empower the user to gain contextual information with the ease of point-and-click, would be possible with ccREL and RDFa more generally.
<p align="center">(photo courtesy <a href="http://www.flickr.com/photos/joi/2590709576/">Joi Ito CC BY</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2008-06-18 17:57:02</wp:post_date>
		<wp:post_date_gmt>2008-06-18 17:57:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccrel-joining-man-and-machine-presenting-cute-dogs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:comment>
			<wp:comment_id>64</wp:comment_id>
			<wp:comment_author><![CDATA[Benlog &raquo; Creative Commons Tech Summit]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://benlog.com/articles/2008/06/18/creative-commons-tech-summit/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-06-18 21:10:27</wp:comment_date>
			<wp:comment_date_gmt>2008-06-18 21:10:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Language. Fun group, good stuff, and a bright future for Creative Commons. The CC Interns live-blogged my talk, among [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>65</wp:comment_id>
			<wp:comment_author><![CDATA[tim]]></wp:comment_author>
			<wp:comment_author_email>tim@sutros.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sutros.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-06-20 01:56:39</wp:comment_date>
			<wp:comment_date_gmt>2008-06-20 01:56:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[RDFa seems very promising. Would there be a way to add trust vocabulary to the data? Maybe adding triples (foaf+) that would establish (or rank) the credibility of the content owner/author. It seemed that the registries present at the summit were leaning towards that, without ever going as far as "guaranteeing" ownership of the content in question. RDFa trust network....]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>More ccREL, licensing Science, and liblicense to the rescue</title>
		<link>http://labs.creativecommons.org/2008/06/18/more-ccrel-licensing-science-and-liblicense-to-the-rescue/</link>
		<pubDate>Wed, 18 Jun 2008 18:31:24 +0000</pubDate>
		<dc:creator><![CDATA[greg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/more-ccrel-licensing-science-and-liblicense-to-the-rescue/</guid>
		<description></description>
		<content:encoded><![CDATA[<em>
<img src="http://farm4.static.flickr.com/3261/2589954195_bb6f509717.jpg" /></em>
<p align="center">(Joi Ito, <a href="http://flickr.com/photos/joi/2589954195/">CC:BY</a>)</p>
<a href="http://creativecommons.org/about/people#31">Nathan Yergler</a> and <a href="http://creativecommons.org/about/people#83">Asheesh Laroia</a>

The panelists discussed current technologies being worked upon by Creative Commons and Science Commons.

Nathan started out with a presentation of <a href="http://creativecommons.org/projects/CcREL">ccREL</a> examples including integration with Magnatune content and an easy to use ccREL generator for content producers.  This generator will allow people to input data about what license they are using, how they want it attributed, using what name and what link, and any other CC+ information they want.

<a href="http://creativecommons.org/about/people/#34">John Wilbanks</a>

John presented on the larger initiatives of <a href="http://sciencecommons.org/">ScienceCommons</a> including trying to inform users on how to license certain work to enable the greatest use.  For example, when providing access to scientific databases they recommond a <a href="http://creativecommons.org/projects/CC0">CC0</a> license with Social Norms attached.  This will enable use of this data for a variety of projects and possibly help to rectify the fact that we are able to share and use more information on what hotel we are staying at than scientific reasearch that could help change the world.

Asheesh, with the help of past Creative Commons interns and others, developed a software license which allows software engineers to add "license support" to their applications, <a href="http://wiki.creativecommons.org/Liblicense">liblicense</a>.  This will allow a music player to be able to know what license an mp3/ogg/aac file under.  Along with just being able to see what license a file is using the library will allow content creators to embed their choice of license information into files at the time of creation.

<img src="http://farm4.static.flickr.com/3088/2590795748_48222821e5.jpg" />
<p align="center">(Joi Ito, <a href="http://flickr.com/photos/joi/2590795748/">CC:BY</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2008-06-18 18:31:24</wp:post_date>
		<wp:post_date_gmt>2008-06-18 18:31:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-ccrel-licensing-science-and-liblicense-to-the-rescue</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
	</item>
	<item>
				<title>Digital Asset Management, Now!</title>
		<link>http://labs.creativecommons.org/2008/06/18/digital-asset-management-now/</link>
		<pubDate>Wed, 18 Jun 2008 19:25:28 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/digital-asset-management-now/</guid>
		<description></description>
		<content:encoded><![CDATA[The next panel, and a damn fine one, is on "digital asset management on the web and the desktop" with Gunar Penikis from Adobe, Stephen Lau of Songbird, and Lucas Gonze.

Gunar described Adobe's &lt;a href="http://en.wikipedia.org/wiki/Extensible_Metadata_Platform"&gt;XMP&lt;/a&gt;, which is a standardized platform for processing and storing standardized metadata. The SDK is freely available under a BSD license, and CC metadata is integrated. Check it out at &lt;a href="http://www.adobe.com/xmp"&gt;www.adobe.com/xmp&lt;/a&gt;.

Steven discussed &lt;a href="http://en.wikipedia.org/wiki/Songbird_(software)"&gt;Songbird&lt;/a&gt;, a cross-platform media player built upon Mozilla. He touched upon the issues arising with managing music metadata, which is traditionally of poor quality, and discussing the issues Songbird has run into when trying to display music data and make it useful. They want to integrate CC licenses in every respect, pulling metadata from webpages and even adding it to the file if it's not there.

Lucas (presentation available &lt;a href="http://gonze.com/webofsongs/"&gt;here&lt;/a&gt;) spoke on the topic of making music a first-class region of the web. He posits that music today is "fundamentally unwebby," and to solve this he proposes a single good URL for every song, "good" being defined here as "comprehensive, unique, stable". This adapts the principles of good web architecture to the music domain.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2008-06-18 19:25:28</wp:post_date>
		<wp:post_date_gmt>2008-06-18 19:25:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digital-asset-management-now</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="post_tag" nicename="techsummit"><![CDATA[techsummit]]></category>
	</item>
	<item>
				<title>Digital copyright registry technology landscape, challenges, opportunities</title>
		<link>http://labs.creativecommons.org/2008/06/18/digital-copyright-registry-technology-landscape-challenges-opportunities/</link>
		<pubDate>Wed, 18 Jun 2008 20:51:18 +0000</pubDate>
		<dc:creator><![CDATA[brian]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/digital-copyright-registry-technology-landscape-challenges-opportunities/</guid>
		<description></description>
		<content:encoded><![CDATA[            <img src="http://farm4.static.flickr.com/3239/2590142583_6383a3661f_m.jpg" align="top" height="160" width="240" /><a href="http://creativecommons.org/weblog/entry/5383">Mike Linksvayer</a> - Vice President, Creative Commons

<strong>Why do we need a registry? </strong>
Assurance that license claims are correct
Without a registry it is easier for works to become orphaned
Registries enable payment to find its way to artist

<strong> What makes a digital copyright registry?</strong>
It is digital!
Not only motivated by registration
Scales up
Global

<strong> Who wants a registry? </strong>
License management orgs
User media orgs
Collective rights management orgs
Cultural Heritage groups
Academics
Creators and Users

<strong> Who is building registries? </strong>
<a href="http://www.registeredcommons.org/" title="Registered Commons">Registered Commons</a>
<a href="https://www.safecreative.org/home.shtml?cid=49399" title="SafeCreative">SafeCreative</a>
<a href="http://openlibrary.org/" title="Open Library">Open Library</a>
<a href="http://www.jamendo.com/en/">Jamendo</a>
<a href="http://www.noankmedia.com/index.html">Noank Media</a>
<a href="http://www.attributor.com/" title="Attributor">Attributor</a>
Flickr
Last.FM
Among others

Best Quote  "We believe in the Net, not a cenralized, Soviet-style information bank controlled by a single organization" old CC FAQ.

(photo Joi Ito, <a href="http://flickr.com/photos/joi/2589954195/">CC:BY</a>)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2008-06-18 20:51:18</wp:post_date>
		<wp:post_date_gmt>2008-06-18 20:51:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>digital-copyright-registry-technology-landscape-challenges-opportunities</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="registry"><![CDATA[registry]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Copyright registries and similar animals</title>
		<link>http://labs.creativecommons.org/2008/06/18/copyright-registries-and-similar-animals/</link>
		<pubDate>Wed, 18 Jun 2008 21:59:25 +0000</pubDate>
		<dc:creator><![CDATA[greg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/copyright-registries-and-similar-animals/</guid>
		<description></description>
		<content:encoded><![CDATA[Panel Participants:

Rich Pearson - Attributor.com
Pierre Gerard - Jamendo
Robert Kaye - Music Brainz
Devon Copley - Noank Media
Joe Benso - Registered Commons
Javier Prenafeta - Safe Creative
Aaron Swartz - OpenLibrary

-------------

<img src="http://farm4.static.flickr.com/3291/2590415911_7cfce57838_m.jpg" />

Rich Pearson - <a href="http://attributor.com/">Attributor.com</a>

Attributor is aimed to be "A GPS for your content."  It provides a database matching service to detect licensed material on the web with accompanying data about its use (if there were ads on the page, how much was used, and how it was used).  It aims to be an interoperable and also open to all rights holders, multiple licenses, and associations.

---------

<img src="http://farm4.static.flickr.com/3255/2590436629_0dc741b085_m.jpg" />

Pierre Gerard - <a href="http://www.jamendo.com">Jamendo</a>

Jamendo boasts that it is the biggest online free music community with over 10,000 albums under CC license including 300 new albums per week in over 60 countries. Consumers can pay if you wish for the content, usually $5 and Jamendo keeps 50cents.  Also, Jamendo shares advertising revenue along a 50/50 scheme with the artists.

---------

<img src="http://farm3.static.flickr.com/2231/2590345693_4517422e88_m.jpg" />

Robert Kaye - <a href="http://musicbrainz.org/">Music Brainz</a>

Started MusicBrainz after the only other option was no longer available.  It aims to be a music metadata repository along with the ability to automatically tag personal music collections.  The way their metadata database is built is through community generated and corrected means.

---------

<img src="http://farm3.static.flickr.com/2294/2591169146_157cbf4280_m.jpg" />

Devon Copley - <a href="http://www.noankmedia.com/">Noank Media</a>

Brings about a new way of dealing with licensing music online.  They are trying to be the in-between bargainer for Publishers and End Users enabling third party companies to buy blanket use of sets of songs for customers.  By doing this they fill the gap between CC+ and full copyright.  Their supported licenses include CC licenses, their own license, and public domain.

---------

<img src="http://farm3.static.flickr.com/2390/2591209468_45ab1ae5bf_m.jpg" />

Joe Benso - <a href="http://www.registeredcommons.org/">Registered Commons</a>

The Registered Commons service aims to provide a registery of digtal works of any kind while preferring CC licensed work.  They also time stamp each item and verify the author's identity.

---------

<img src="http://farm4.static.flickr.com/3256/2590399913_5cb463b43f_m.jpg" />

Javier Prenafeta - <a href="http://www.safecreative.org/">Safe Creative</a>

This service allows authors to self register their works and do management of that data to ensure that a particular version of a work (image, video, audio) is associated with a specific license.  This enables users to have more confidence in the fact their use of a work is legally permissable.

---------

<img src="http://farm4.static.flickr.com/3242/2590425651_71fec0377c_m.jpg" />

Aaron Swartz - <a href="http://openlibrary.org/">OpenLibrary</a>

The OpenLibrary aims to create one page for every book, ever.  This is done through a sort of wikipedia-style method by allowing users to modify metadata and correct mistakes.  Along with user supplied metadata the OpenLibrary is also given high quality information directly from publishers to insert into the database.

(all photos <a href="http://creativecommons.org/licenses/by/2.0/deed.en">CC-BY</a> <a href="http://flickr.com/photos/joi/">Joi Ito</a>)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2008-06-18 21:59:25</wp:post_date>
		<wp:post_date_gmt>2008-06-18 21:59:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>copyright-registries-and-similar-animals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
				<title>Creative Commons Looks Out At Copyright 2.0</title>
		<link>http://labs.creativecommons.org/2008/06/18/creative-commons-looks-out-at-copyright-20/</link>
		<pubDate>Wed, 18 Jun 2008 23:27:03 +0000</pubDate>
		<dc:creator><![CDATA[thwang]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/18/creative-commons-looks-out-at-copyright-20/</guid>
		<description></description>
		<content:encoded><![CDATA[
<p><img src="http://farm4.static.flickr.com/3089/2591423484_b9c00dc13f.jpg?v=0" height="333" width="500" /></p>
At the final plenary session of the Creative Commons Technology Summit, Ben Adida fielded three overarching questions to the audience:

1) What do we need out of Copyright 2.0/Registry 2.0?

2) What collaborative technology efforts are necessary?

3) What role will CC play/not play?

Moving from this initial impetus, three major responses, ideas, and debates emerged.

<strong>First, </strong>the issue of liability for declaring seemed to be a persistent concern on the ability of CC content to be adopted into the commercial sphere. Various solutions were suggested, and discussion centered on the need for efforts to be placed into educating about Creative Commons, broadening a more exclusive focus on systems design.

<strong>Second, </strong>one desire voiced by many of the registry projects was the need for standards to link their metadata with other registries. While Adida suggested the possibility of a Federation of Registries to establish this, other discussions ensued as to the extent to which Google and the web more broadly already served such a purpose.

<strong>Finally, </strong>a palpable challenge to the success of Creative Commons, brought by Lucas Gonze and others, seems to exist in the extent to which "noncommercial" remains ambiguous. While some argued for augmented licenses with other qualifications and better fleshed out terms, Mike Linksvayer pointed out that this was a small issue and only an invitation for individuals to "stop whining." He argued that those concerned about the issue could seek out content without these restrictions.
<p align="center">(Photo courtesy <a href="http://www.flickr.com/photos/joi/2591423484/">Joi Ito</a>)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2008-06-18 23:27:03</wp:post_date>
		<wp:post_date_gmt>2008-06-18 23:27:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-commons-looks-out-at-copyright-20</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
	</item>
	<item>
				<title>Python &amp;&amp; cumulative metrics?</title>
		<link>http://labs.creativecommons.org/2008/06/23/python-cumulative-metrics/</link>
		<pubDate>Mon, 23 Jun 2008 02:08:26 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/23/python-cumulative-metrics/</guid>
		<description></description>
		<content:encoded><![CDATA[So I get to see the state-of-the-art and reconciling Apache and Squid logs. Based on this I need to come up with a way to reformulate the referrer ID and other such data for the logs at i.creativecommons and the ones from Varnish. As speculated in my messy proposal, a .sh using egrep is employed. Still bulk of the work is done in Python. So this doesn't give me an excuse to read up on the Advanced Bash Shell Scripting Guide, but instead something on Python. Fun as well.

As far as I can tell, these scripts will be run before the logs are archived and uploaded in S3 storage. This will work great for the new logs which are generated from that day onwards from when the scripts are implemented. What about the analysis requiring cumulative data or trend analysis? I'll need to sort this one out, a lot of the analysis depends on access to all the data.

Will be working from a fellow GSoCers place today, hoping to cover up on some lost ground because of travels and intermittent internet access. Will be back in Singapore and firing on all cylinders on the 8th.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2008-06-23 02:08:26</wp:post_date>
		<wp:post_date_gmt>2008-06-23 02:08:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-cumulative-metrics</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
	</item>
	<item>
				<title>One of those days...</title>
		<link>http://labs.creativecommons.org/2008/06/23/one-of-those-days/</link>
		<pubDate>Mon, 23 Jun 2008 16:50:26 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/2008/06/23/one-of-those-days/</guid>
		<description></description>
		<content:encoded><![CDATA[I wake up in the morning to find that eternal funny man <a href="http://en.wikipedia.org/wiki/George_Carlin#Death">George Carlin has died</a>. Add to that the fact that one of my recently-ported api tests has failed, and you just know it's going to be one of those days.

Work on porting the test suite was slow at first. I had thought it would be easy enough just to jump in and start coding. Later this pipe dream evaporated and I forced myself to learn CherryPy, Python Paste, and a bit of WSGI.  Then Asheesh and Nathan filled me in on the intricacies of the <a href="http://pypi.python.org/pypi/zc.buildout">"buildout" build system</a> (which is really quite nice when you get to know it), and I was ready to go.

So the porting has begun. Check out <a href="http://code.creativecommons.org/viewsvn/api/branches/nose-test-suite-branch/">the branch</a> where all the fun is happening, if you happen to be so inclined. And as the fates would have it, the lucky number seventh test I ported just so happens to fail. This leads to the real challenge every software tester must eventually face: fixing a broken test. Getting to the bottom of this means a fun-filled day ahead.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2008-06-23 16:50:26</wp:post_date>
		<wp:post_date_gmt>2008-06-23 16:50:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-of-those-days</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="interns-2008"><![CDATA[interns 2008]]></category>
		<category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>69</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Brewer]]></wp:comment_author>
			<wp:comment_author_email>fumanchu@aminus.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.cherrypy.org</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-06-30 15:29:01</wp:comment_date>
			<wp:comment_date_gmt>2008-06-30 15:29:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When you're ready to upgrade that to CherryPy 3, let me know. Looks like a worthwhile project. :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>70</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-03 21:34:16</wp:comment_date>
			<wp:comment_date_gmt>2008-07-03 21:34:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think it actually works with CherryPy 3 these days; we're looking at moving it over to Pylons because we have a larger investment in that already.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>No more excuses for not doing tasks!</title>
		<link>http://labs.creativecommons.org/2008/06/24/no-more-excuses-for-not-doing-tasks/</link>
		<pubDate>Tue, 24 Jun 2008 17:03:21 +0000</pubDate>
		<dc:creator><![CDATA[steren]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote><em>Stay up to date and don't miss your deadline any more with the brand new email task notifications and reminders.</em></blockquote>
I created this as an extension of <em><a id="okoq1" class="external text" title="http://semantic-mediawiki.org" rel="nofollow" href="http://semantic-mediawiki.org/">Semantic MediaWiki</a>. </em>It is mainly supposed to be used as an internal tool at CC. Basicaly, it sends email to concerned users each time a tasks is created or updated. It also sends reminders at different date before your deadline.

I'm currently working on an online release of the entire <em>project and task tracking system</em> used here, so stay tuned.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date>2008-06-24 17:03:21</wp:post_date>
		<wp:post_date_gmt>2008-06-24 17:03:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>no-more-excuses-for-not-doing-tasks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RDFa for Semantic MediaWiki [GSoC 2008]</title>
		<link>http://labs.creativecommons.org/2008/07/01/rdfa-for-semantic-mediawiki-gsoc-2008/</link>
		<pubDate>Tue, 01 Jul 2008 07:51:57 +0000</pubDate>
		<dc:creator><![CDATA[davemccabe]]></dc:creator>
		<guid isPermaLink="false">http://techblog.creativecommons.org/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[Hello, world!

My name is <a href="mailto:davemccabe@gmail.com">David McCabe</a>, and this summer I am adding RDFa support to Semantic MediaWiki, as part of the Google Summer of Code 2008. I am an undergraduate in Mathematics at <a href="http://pdx.edu">Portland State University</a>. For the Google Summer of Code 2006, I wrote <a href="http://www.mediawiki.org/wiki/Extension:LiquidThreads">Liquid Threads</a>, a MediaWiki extension that replaces talk pages with a threaded discussion system. 

<a href="http://semantic-mediawiki.org/">Semantic MediaWiki</a> (SMW) is the software used for <a href="http://wiki.creativecommons.org/">the CC wiki</a> and many other wikis. SMW allows authors to mark up wiki pages so that their contents and relationships are machine-readable. SMW already publishes this machine-readable data in RDF/XML format. 

You can read about <a href="http://wiki.creativecommons.org/RDFa">RDFA on the CC Wiki</a>. There is also a <a href="http://www.youtube.com/watch?v=mxE3FeOyS-E">Google Tech Talk on RDFa</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2008-07-01 07:51:57</wp:post_date>
		<wp:post_date_gmt>2008-07-01 07:51:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rdfa-for-semantic-mediawiki-gsoc-2008</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="microformats"><![CDATA[microformats]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="syndication"><![CDATA[syndication]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Labs and Techblog have merged</title>
		<link>http://labs.creativecommons.org/2008/06/28/labs-and-techblog-have-merged/</link>
		<pubDate>Sat, 28 Jun 2008 20:07:28 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[For most people reading this, you will have likely already realized that the CC Techblog has moved to Labs.  We recently realized that Labs and the Techblog overlapped enough in intent to merge them into one mostly cohesive interface.   The name Techblog has gone away in favor of the name Labs.  The front page of Labs is now what was the Techblog.  The new Labs blog is also sporting a <a href="http://code.creativecommons.org/viewsvn/ccwordpress/branches/production/www/wp-content/themes/cc4/">new old theme</a>, which is the same theme used at <a href="http://creativecommons.org">http://creativecommons.org</a> with a few minor changes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2008-06-28 20:07:28</wp:post_date>
		<wp:post_date_gmt>2008-06-28 20:07:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>labs-and-techblog-have-merged</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Per-blog registrations for Wordpress-mu</title>
		<link>http://labs.creativecommons.org/2008/07/01/per-blog-registrations-for-wordpress-mu/</link>
		<pubDate>Tue, 01 Jul 2008 00:27:21 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[About a year ago when I started at Creative Commons, I was asked to write a <a href="http://mu.wordpress.org">Wordpress-mu</a> plugin that would allow users to register with specific sub-blogs and not just the root/default blog.  So I wrote a  <a href="http://code.creativecommons.org/viewsvn/wordpressmu/trunk/mu-plugins/per_blog_registrations/perBlogRegistrations.php?view=log"> plugin</a> that allowed that to happen and also fixed a few inconsistencies that I noticed in the code at that time.

Recently I reviewed my <a href="http://mu.wordpress.org/forums/topic.php?id=3090">old<a> <a href="http://mu.wordpress.org/forums/topic.php?id=5636">posts</a> at the Wordpress-mu forums and realized that there was some activity on those posts that I hadn't noticed.  It became clear that the plugin needed some modification and also that it only supported per-blog registrations for Wordpress-mu installs based on subdomains, but didn't work for installs based on subdirectories.

This past weekend I took another look at the plugin and found that most of the inconsistencies I had been seeing, and for which I had tried to code around in the plugin, were gone in v1.5.1, and so I was able to remove the vast majority of the plugin's code.

The current plugin seems to work for both subdomain-based and subdirectory-based installs, at least on a fresh install of Wordpress-mu that I was working with.

<strong>Update [Mon Aug 17 14:02:16 EDT 2009]</strong>: <a href="http://code.creativecommons.org/issues/issue436">http://code.creativecommons.org/issues/issue436</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2008-07-01 00:27:21</wp:post_date>
		<wp:post_date_gmt>2008-07-01 00:27:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>per-blog-registrations-for-wordpress-mu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>71</wp:comment_id>
			<wp:comment_author><![CDATA[In the Calm After &#8230; | Developing OTFA]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://developing.fyneside.com/?p=48</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-07 23:03:31</wp:comment_date>
			<wp:comment_date_gmt>2008-07-07 23:03:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] was found on the tail-ends of the Outage to implement Nathan Kinkade&#8217;s excellent perBlogRegistration plugin which allows new folk to register with the blog of their choice, access it and not have to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>72</wp:comment_id>
			<wp:comment_author><![CDATA[Alexander]]></wp:comment_author>
			<wp:comment_author_email>alexmoba@programasfull.net</wp:comment_author_email>
			<wp:comment_author_url>http://blogsfull.com/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-29 03:15:44</wp:comment_date>
			<wp:comment_date_gmt>2008-08-29 03:15:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The answer to all my registration problems. :)
Really hope the plug-in continues to get support and updates.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>73</wp:comment_id>
			<wp:comment_author><![CDATA[Mean Business &raquo; Blog Archive &raquo; links for 2008-09-28]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://meanbusiness.com/2008/09/28/links-for-2008-09-28/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-09-28 09:00:17</wp:comment_date>
			<wp:comment_date_gmt>2008-09-28 09:00:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Per-blog registrations for Wordpress-mu - Creative Commons plugin to allow sub-blog registration (tags: wordpressmu) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>74</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Griffin]]></wp:comment_author>
			<wp:comment_author_email>griffin@realsol.com</wp:comment_author_email>
			<wp:comment_author_url>http://rdgriffin.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-11-13 08:29:46</wp:comment_date>
			<wp:comment_date_gmt>2008-11-13 08:29:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[OK.  I have to tell you, just installed the plugin and I love it!!!

I have been working on something like this since I installed MU 3 months ago.  I refuse (well hate too) change core file source code.  Been there, done that.  This is beautiful.

I need to make a few changes still.  For instance, it still asked whether I want to create a blog.  What happens if I choose that option?

I will probably comment that out if I can't figure out a way to optionally do it in the plugin.

Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>75</wp:comment_id>
			<wp:comment_author><![CDATA[justin]]></wp:comment_author>
			<wp:comment_author_email>sayjustin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-31 23:24:44</wp:comment_date>
			<wp:comment_date_gmt>2009-01-31 23:24:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I installed the plugin in the mu-plugins and the plugins folder and I see no options for it. 

I tried subdomain.domain.com and maindomain.com wp-signup.php and I saw nothing different.

Am I missing something. It's a great idea and I'd love to see it working.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>76</wp:comment_id>
			<wp:comment_author><![CDATA[Sid]]></wp:comment_author>
			<wp:comment_author_email>siddharth@caneumindia.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-02-17 07:13:34</wp:comment_date>
			<wp:comment_date_gmt>2009-02-17 07:13:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have installed latest version of WPMU (v-2.7) and found this plugin not working. Somehow the plugin action hook "wpmu_activate_user" is not executing and hence not updating the DB table user_meta with the sub-blog data.

Not sure how this plugin has broken on WPMU-2.7 whereas working good on WPMU-2.6.5 

Any help shall be highly appreciated.

Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Leo Kimble]]></wp:comment_author>
			<wp:comment_author_email>Leo.kimble@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://nzsport.org</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-03-08 09:51:39</wp:comment_date>
			<wp:comment_date_gmt>2009-03-08 09:51:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is there a version of this plugin which is compatible with mu 2.7?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[amir]]></wp:comment_author>
			<wp:comment_author_email>amir.rainer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-05-12 10:51:04</wp:comment_date>
			<wp:comment_date_gmt>2009-05-12 10:51:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey, it seems like a great plug-in, but i haven't figured out how to use it.
any help will be much appreciated.

thanks,]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[RavanH]]></wp:comment_author>
			<wp:comment_author_email>ravanhagen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.116.51.26</wp:comment_author_IP>
			<wp:comment_date>2009-06-20 10:54:06</wp:comment_date>
			<wp:comment_date_gmt>2009-06-20 10:54:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am interested in a port to WPMU 2.7 too... Any outlook? Willing to help out but not actually need some pointers to get started. Thanks :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[IZ]]></wp:comment_author>
			<wp:comment_author_email>oateslarsen@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.222.53.22</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 05:35:54</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 05:35:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is this working for WPMU 2.8.x?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Kinkade]]></wp:comment_author>
			<wp:comment_author_email>nkinkade@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org</wp:comment_author_url>
			<wp:comment_author_IP>174.48.133.196</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 21:23:02</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 21:23:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't think so.  CC isn't really using the features of the plugin anymore, or at least it's importance has gone way down so I haven't touched it in over a year.  However, I still get emails and comments about it, so I have been thinking about getting it working with 2.8.x just as a service to the WP-mu community.  We'll see how my time and motivation come together. :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>80</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>82</wp:comment_id>
			<wp:comment_author><![CDATA[chris]]></wp:comment_author>
			<wp:comment_author_email>carnini@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.9.63.98</wp:comment_author_IP>
			<wp:comment_date>2009-08-17 15:04:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-17 15:04:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This plugin looks really good I am thinking of trying it out and seeing if I can get it to work on the new wordpress. Did you start looking at it for the new MU version?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Juggling Metadata at CC</title>
		<link>http://labs.creativecommons.org/2008/07/03/juggling-metadata-at-cc/</link>
		<pubDate>Thu, 03 Jul 2008 21:41:33 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[It's the day before a long weekend and inspiration hits &mdash; <a href="http://rdfa.info">RDFa</a> and <a href="http://wiki.creativecommons.org/ccREL">ccREL</a> are <strong>exactly</strong> like juggling!

<a href='http://www.flickr.com/photos/nathan_y/2635017968/'><img src="http://labs.creativecommons.org/files/2008/07/keyframe.png" alt="&quot;Because of course, we&#39;re jugglers.&quot;" width="410" height="309" class="aligncenter size-full wp-image-109" /></a>

Also available: <a href="http://labs.creativecommons.org/~nathan/video/juggling-rdfa.mp4">MP4</a>, <a href="http://labs.creativecommons.org/~nathan/video/juggling-rdfa.ogg">Ogg</a>.

In other news of the weird, I was actually able to use <a href="http://en.wikipedia.org/wiki/PiTiVi">PiTiVi</a> to trim the video up after shooting it on <a href="http://en.wikipedia.org/wiki/Nokia_N95">my phone</a>.  Cool.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2008-07-03 21:41:33</wp:post_date>
		<wp:post_date_gmt>2008-07-03 21:41:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>juggling-metadata-at-cc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ccrel"><![CDATA[ccrel]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[video]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://labs.creativecommons.org/~nathan/video/juggling-rdfa.mp4
1578290
video/mp4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>License-oriented metadata validator and viewer: libvalidator</title>
		<link>http://labs.creativecommons.org/2008/07/08/license-oriented-metadata-validator-and-viewer-libvalidator/</link>
		<pubDate>Tue, 08 Jul 2008 12:20:56 +0000</pubDate>
		<dc:creator><![CDATA[hugo dworak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[As the <a href="http://code.google.com/soc/2008/">Google Summer of Code 2008</a> midterm evaluation <a href="http://code.google.com/soc/2008/faqs.html#0.1_timeline">deadline is approaching</a>, it is a good time to report the progress when it comes to the license-oriented metadata validator and viewer.

The source code is located in two dedicated <a href="http://git.or.cz/">git</a> repositories. The first being <a href="http://code.creativecommons.org/viewgit?r=validator.git">validator</a>, which contains the source code of the Web application based on <a href="http://pylonshq.com/">Pylons</a> and <a href="http://genshi.edgewall.org/">Genshi</a>. The second repository is <a href="http://code.creativecommons.org/viewgit?r=libvalidator.git">libvalidator</a>, which hosts the files that constitute the core library that the project will utilise. This is the component that the development focuses on right now.

The purpose of the aforementioned library is to parse input files, scan them for relevant license information, and output the results in a machine-readable fashion. More precisely, its workflow is the following: parse the file and associated <a href="http://www.w3.org/RDF/"><abbr title="Resource Description Framework">RDF</abbr></a> information so that a complete set of RDF data is available, filter the results with regard to license information (not only related to the document itself, but also to other objects described within it), and return the results in a manner preferable for the usage by the Web application.

<a href="http://www.w3.org/2007/08/pyRdfa/">pyRdfa</a> seems to be the best tool for the parsing stage so far. It handles the current recommendation for embedding license metadata (namely <a href="http://www.w3.org/TR/rdfa-syntax/">RDFa</a>) as well as other non-deprecated methods: linking to an external or embedded (using <a href="http://www.ietf.org/rfc/rfc2397.txt">the "data" URL scheme</a>) RDF files and utilising the <a href="http://dublincore.org/">Dublin Core</a>. The significant lacking is handling of the invalid direct embedding of <a href="http://www.w3.org/TR/rdf-syntax-grammar/">RDF/XML</a> within the <a href="http://www.w3.org/MarkUp/"><abbr title="HyperText Markup Language">HTML</abbr>/<abbr title="Extensible Hypertext Markup Language">XHTML</abbr></a> source code (as an element or in a comment) and this is resolved by first capturing all such instances using a regular expression and then parsing the data just as external RDF/XML files.

Once the RDF triples are extracted, one can use <a href="http://www.w3.org/TR/rdf-sparql-query/"><acronym title="SPARQL Protocol and RDF Query Language">SPARQL</acronym></a> to narrow the results just to the triples related to the licensed objects. Both <a href="http://librdf.org/">librdf</a> and <a href="http://rdflib.net/">rdflib</a> support this language. Moreover, the RDF/XML related to the license must be parsed, so that its conditions (permissions, requirements, and restrictions) are then presented to the user.

The library takes advantage of standard Python tools such as <a href="http://pypi.python.org/pypi/zc.buildout/">Buildout</a> and <a href="http://www.somethingaboutorange.com/mrl/projects/nose/">nose</a>. When it is completed, the project will be all about writing a Web application that will serve as an interface to libvalidator.]]></content:encoded>
		<excerpt:encoded><![CDATA[As the <a href="http://code.google.com/soc/2008/">Google Summer of Code 2008</a> midterm evaluation <a href="http://code.google.com/soc/2008/faqs.html#0.1_timeline">deadline is approaching</a>, it is a good time to report the progress when it comes to the license-oriented metadata validator and viewer.]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2008-07-08 12:20:56</wp:post_date>
		<wp:post_date_gmt>2008-07-08 12:20:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-oriented-metadata-validator-and-viewer-libvalidator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="post_tag" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="post_tag" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Flickr Image Re-Use for OpenOffice.org Demo availlable</title>
		<link>http://labs.creativecommons.org/2008/07/12/flickr-image-re-use-for-openofficeorg-demo-availlable/</link>
		<pubDate>Sat, 12 Jul 2008 23:11:54 +0000</pubDate>
		<dc:creator><![CDATA[mihai]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[Never trust a programmer when he gives you a date for <a href="http://labs.creativecommons.org/2008/06/13/flickr-image-re-use-for-openofficeorg-updates/" target="_blank">something to be done</a> . Thats what i did in my last article (2 weeks i think i said then) and here we are a month later.

What has be done since my last article :
<ul>
	<li>right click on an result (image) will show you a popup menu with the available sizes on Flickr server</li>
	<li>left click on a result will insert directly in Writer the image with size medium as default</li>
	<li>once the image is inserted some text will be added beside the image(title , link to the image, license and link to the license)</li>
	<li>i improved searching and the way the image is adding into Writer</li>
	<li>i added a more friendly interface when you want to search over license (similar with advanced search on Flickr website)</li>
	<li>added a previous button to see previous results if needed</li>
	<li>if you insert a image, when you open again the extension the previous search will be done immediately (  on the exact the same position if you used the previous or next buttons)</li>
	<li>about searching : we can have multiple tags (separated by space : " ") and the relation between them is AND . also the results are ordered by interestingness</li>
	<li>a progress bar was added</li>
	<li>the extension after installation can be found here : Insert  Picture  From Flickr ...</li>
</ul>
Some screenshots :

<a href="http://labs.creativecommons.org/files/2008/07/mysearchvsflickradvsearch.jpg" target="_blank">The results from a search by the extension vs Flickr search</a>

<a href="http://labs.creativecommons.org/files/2008/07/popupmenu.jpg" target="_blank">Right click on an image</a>

<a href="http://labs.creativecommons.org/files/2008/07/insertedimageinwriter.jpg" target="_blank">Inserted image into Writer</a>

Also i would to add that this extension, at this momment, works only in Writer.

<a href="http://code.creativecommons.org/viewsvn/ccooo/branches/mihai-flickr-soc/demo13072008/ccooo.oxt?revision=10484" target="_self">Download</a> (right click and save as)

Any suggestions or remarks are greatly appreciated.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2008-07-12 23:11:54</wp:post_date>
		<wp:post_date_gmt>2008-07-12 23:11:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-image-re-use-for-openofficeorg-demo-availlable</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>83</wp:comment_id>
			<wp:comment_author><![CDATA[Steren]]></wp:comment_author>
			<wp:comment_author_email>steren.giannini@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-13 07:42:32</wp:comment_date>
			<wp:comment_date_gmt>2008-07-13 07:42:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice work,

Unfortunately, I couldn't check it : On Ubuntu Festy, I've got this error when I want to add the extension : 
"Could not create java implementation loader"]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>84</wp:comment_id>
			<wp:comment_author><![CDATA[Oshani]]></wp:comment_author>
			<wp:comment_author_email>oshanis@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://people.csail.mit.edu/oshani</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-08 09:07:11</wp:comment_date>
			<wp:comment_date_gmt>2008-08-08 09:07:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Mihai,

Impressive work! Is the source code for this project available publicly somewhere?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>85</wp:comment_id>
			<wp:comment_author><![CDATA[Mihai]]></wp:comment_author>
			<wp:comment_author_email>mihus2001@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 18:19:49</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 18:19:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello Steren,

it seems the problem is not from extension. It might be connected to this : https://bugs.launchpad.net/ubuntu/+source/openoffice.org/+bug/224469/    or http://wiki.services.openoffice.org/wiki/Extensions_trouble_shooting .

sorry for the late response.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[Mihai]]></wp:comment_author>
			<wp:comment_author_email>mihus2001@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 18:30:18</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 18:30:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello Oshani,

svn+ssh://svn@code.creativecommons.org/svnroot/ccooo/branches/mihai-flickr-soc/

or

http://code.creativecommons.org/viewsvn/ccooo/branches/mihai-flickr-soc/

The code in the following days will suffer some changes and i hope it will look better.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>87</wp:comment_id>
			<wp:comment_author><![CDATA[Linutop mag : Find Photos on Flickr for Use in OpenOffice.org Documents]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.linutop.com/mag.en/2009/01/05/find-photos-on-flickr-for-use-in-openofficeorg-documents/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-05 09:58:42</wp:comment_date>
			<wp:comment_date_gmt>2009-01-05 09:58:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] in order to find the right one can be a rather tedious and time-consuming affair. Fortunately, the CCOOo extension can help you to find a photo you like on Flickr without leaving the convenience of your [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>88</wp:comment_id>
			<wp:comment_author><![CDATA[Two Ways to Find Images for Free, Open Use on Flickr | google android os blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://android-blog.org/2009/01/05/two-ways-to-find-images-for-free-open-use-on-flickr/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-07 02:07:49</wp:comment_date>
			<wp:comment_date_gmt>2009-01-07 02:07:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] covered here, the CCOOo extension for OpenOffice makes it very easy to find photos on Flickr that you want to use and automatically [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>89</wp:comment_id>
			<wp:comment_author><![CDATA[Chadnan]]></wp:comment_author>
			<wp:comment_author_email>cdutta04@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://earnmoneyonlinehub.com</wp:comment_author_url>
			<wp:comment_author_IP>202.60.62.100</wp:comment_author_IP>
			<wp:comment_date>2009-08-07 10:03:16</wp:comment_date>
			<wp:comment_date_gmt>2009-08-07 10:03:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks a lot. That's really a great work. I had so much problem while adding image in my blog post. Now I can do it easily, just downloaded.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>SemanticEditTime</title>
		<link>http://labs.creativecommons.org/2008/07/14/seamanticedittime/</link>
		<pubDate>Mon, 14 Jul 2008 22:52:03 +0000</pubDate>
		<dc:creator><![CDATA[steren]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[My last task concerning <a href="http://semantic-mediawiki.org">Semantic Media Wiki</a> was to create an extension which adds automatically the "<em>Revision Time</em>" and the <em>"Revision User</em>" of a wiki page in the semantic data.

You can now use these data to sort querries, for example :
<pre>{{#ask: [[Category:Task]]
| sort=Revision time
| order=descending
| limit=3
}}
</pre>

It's currently used in the <a href="http://wiki.creativecommons.org/Casestudies">Casestudies page </a>of the CC wiki.

You'll find the code and the instructions in the <a href="http://code.creativecommons.org/viewgit?r=SemanticEditTime.git">Creative Commons Git repository</a>. This small piece of code is more a hack than a real extension. The semantic properties are supposed to be rewritten in the next version of Semantic MediaWiki, which will enable much easier user-defined special properties.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2008-07-14 22:52:03</wp:post_date>
		<wp:post_date_gmt>2008-07-14 22:52:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>seamanticedittime</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>32 to 64 bit remotely</title>
		<link>http://labs.creativecommons.org/2008/07/15/32-to-64bit-remotely/</link>
		<pubDate>Tue, 15 Jul 2008 23:09:42 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[A couple months ago I <a href="http://labs.creativecommons.org/2008/04/03/varnish-cache-at-cc/">posted here</a> about some of our experiences with <a href="http://varnish.projects.linpro.no/">Varnish Cache</a> as an HTTP accelerator.  By and large I have been very impressed with Varnish.  We even found that it had the unexpected benefit of acting as a buffer in front of Apache, preventing Apache from getting overwhelmed with too many slow requests.  Apache would get wedged once it had reached it's MaxClients limit, whereas Varnish seems to happily queue up thousands of requests even if the backend (Apache) is going slowly.

However, after a while we started running into other problems with Varnish, and I found the probable answer in <a href="http://varnish.projects.linpro.no/ticket/85">a bug report</a> at the Varnish site.  It turns out that Varnish was written with a 64 bit system in mind.  That isn't to say that it won't work nicely on a 32 bit system, just that you better not expect high server load, or else you'll start running into resource limitations in a hurry.  This left us with about 2 options: Move to 64 bit or ditch Varnish for something like Squid.  Seeing as how I was loathe to do the latter, we decided to go 64 bit, which in any case is another logical step into the 21st century.

The problem was that our servers are co-located in data centers around the country.  We didn't want to hassle with reprovisioning all of the them.  <a href="http://creativecommons.org/about/people/#83">Asheesh</a> did the the first remote conversion based on <a href="http://www.underhanded.org/papers/debian-conversion/remotedeb.html">some outdated document</a> he found on remotely converting from Red Hat Linux to Debian.  It went well and we haven't had a single problem on that converted machine since.  Varnish loves 64bit.

I have now converted two more machines, and this last time I documented the steps I took.  I post them here for future reference and with the hope that it may help someone else.  Note that these steps are somewhat specific to Debian Linux, but the concepts should be generally applicable to any UNIX-like system.  There are no real instructions below, so you just have to infer the method from the steps.  See the <a href="http://www.underhanded.org/papers/debian-conversion/remotedeb.html">aforementioned article</a> for more verbose, though dated, explanations.  <strong>BE WARNED</strong> that if you make a mistake and don't have some <a href="http://www.serverbeach.com/products/rapid_rescue.php">lovely rescue method</a> then you may be forced to call your hosting company to salvage the wreckage:

<ul>
        <li>[ssh server]</li>
	<li>aptitude install linux-image-amd64</li>
	<li>reboot</li>
	<li>[ssh server]</li>
	<li>sudo su -</li>
	<li>aptitude install debootstrap # if not already installed</li>
	<li>swapoff -a</li>
	<li>sfdisk -l /dev/sda # to determine swap partition, /dev/sda5 in this case</li>
	<li>mke2fs -j /dev/sda5</li>
	<li>mount /dev/sda5 /mnt</li>
	<li>cfdisk /dev/sda  # set /dev/sda5 to type 83 (Linux)</li>
	<li>debootstrap --arch amd64 etch /mnt http://http.us.debian.org/debian</li>
	<li>mv /mnt/etc /mnt/etc.LOL</li>
	<li>cp -a /etc /mnt/</li>
	<li>mv /mnt/boot /mnt/boot.LOL</li>
	<li>cp -a /boot /mnt/  # this is really just so that the dpkg post-install hooks don't issue lots of warnings about things not being in /boot that it expects.</li>
	<li>chroot /mnt</li>
	<li>aptitude update</li>
	<li>aptitude dist-upgrade</li>
	<li>aptitude install locales</li>
	<li>dpkg-reconfigure locales # optional (I selected All locales, default UTF-8)</li>
	<li>aptitude install ssh sudo grub vim # and any other things you want</li>
	<li>aptitude install linux-image-amd64</li>
	<li>vi /etc/fstab # change /dev/sda5 to mount on / and comment out old swap entry</li>
	<li>mkdir /home/nkinkade # just so I have a home, not necessary really</li>
	<li>exit # get out of chroot</li>
	<li>vi /boot/grub/menu.lst  # change root= of default option from sda6 to sda5</li>
	<li>reboot</li>
	<li>[ssh server]</li>
	<li>sudo su -</li>
	<li>mount /dev/sda6 /mnt</li>
	<li>chroot mnt</li>

	<li>dpkg --get-selections &gt; ia32_dpkg_selections</li>
	<li>exit</li>
	<li>mv /home /home.LOL</li>
	<li>cp -a /mnt/home /</li>
	<li>mv /root /root.LOL</li>
	<li>cp -a /mnt/root /</li>
	<li>mkdir /mnt/ia32</li>
	<li>mv /mnt/* /mnt/ia32</li>
	<li>mv /mnt/.* /mnt/ia32</li>
	<li>cp -a bin boot dev etc etc.LOL home initrd initrd.img lib lib64 media opt root sbin srv tmp usr var vmlinuz /mnt</li>
	<li>mkdir /mnt/proc /mnt/sys</li>
	<li>vi /mnt/etc/fstab # make /dev/sda6 be mounted on / again, leave swap commented out</li>
	<li>vi /boot/grub/menu.lst # change the default boot option back to root=/dev/sda6</li>
	<li>reboot</li>
	<li>[ssh server]</li>
	<li>sudo su -</li>
	<li>mkswap /dev/sda5</li>
	<li>vi /etc/fstab (uncomment swap line)</li>
	<li>swapon -a</li>
	<li>dpkg --set-selections &lt; /ia32/ia32_dpkg_selections</li>
	<li>apt-get dselect-upgrade # step through all the questions about changed /etc/files, etc.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2008-07-15 23:09:42</wp:post_date>
		<wp:post_date_gmt>2008-07-15 23:09:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>32-to-64bit-remotely</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>91</wp:comment_id>
			<wp:comment_author><![CDATA[the law of averages &raquo; Blog Archive &raquo; Unicode output from Zope 3]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://yergler.net/blog/2008/07/19/unicode-output-from-zope-3/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-07-19 19:57:55</wp:comment_date>
			<wp:comment_date_gmt>2008-07-19 19:57:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] We&#8217;re doing a lot of shuffling lately to complete a 32 to 64 bit conversion; see the CC Labs blog post for the harrowing [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>92</wp:comment_id>
			<wp:comment_author><![CDATA[64 bit woes (almost) cleared up - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2008/08/02/64-bit-woes-almost-cleared-up/</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-02 22:22:39</wp:comment_date>
			<wp:comment_date_gmt>2008-08-02 22:22:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] I mentioned in a recent post, we have upgraded our servers to 64 bit. All of them are now running amd64 for Debian. The first [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>cc.license in alpha</title>
		<link>http://labs.creativecommons.org/2008/07/24/cclicense-in-alpha/</link>
		<pubDate>Thu, 24 Jul 2008 23:50:00 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[Work on cc.license and cc.api is going swimmingly well. I think it's about time I share what I've been doing for the past few weeks.

Creative Commons provides a <a href="http://api.creativecommons.org/docs/">web api</a> to make license information available to applications. Per <a href="http://creativecommons.org/about/people/#31">Nathan Yergler</a>'s aptly-named Gradually Increasing Sanity Initiative, my task this summer has been to reimplement the web api using <a href="http://pylonshq.com/">Pylons</a> (the cc.api project) so that CC has fewer server stacks to maintain. The huge dependency of this project is to implement a python layer over license.rdf (the one unified place where all license data exists, in a happy RDF format), which shall be called cc.license.  Indeed, the development of cc.api and cc.license have been gloriously intertwined, with the cc.license API being shaped by the needs of cc.api.

Today all the basic pieces of cc.api have been completed. All that's left is handling those annoying corner cases and making the test suite pass fully (12 more tests to go :). As such, it seems only right to declare that cc.license is officially in alpha, since its API has been relatively stable for some time now.  Trying it out is just a '<a href="http://code.creativecommons.org/">git clone</a>' away.

Within the next two weeks I'll be refining and fixing cc.api and cc.license, and working on packaging cc.license into an egg so that all python developers can revel in the joy of CC licensing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2008-07-24 23:50:00</wp:post_date>
		<wp:post_date_gmt>2008-07-24 23:50:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cclicense-in-alpha</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ccapi"><![CDATA[cc.api]]></category>
		<category domain="post_tag" nicename="cclicense"><![CDATA[cc.license]]></category>
		<category domain="post_tag" nicename="interns-2008"><![CDATA[interns 2008]]></category>
		<category domain="category" nicename="techblog"><![CDATA[techblog]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>liblicense 0.8 (important) fixes RDF predicate error</title>
		<link>http://labs.creativecommons.org/2008/07/30/liblicense-08/</link>
		<pubDate>Wed, 30 Jul 2008 20:44:42 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[Brown paper bag release: liblicense claims that the RDF predicate for a file's license is http://creativecommons.org/ns#License rather than http://creativecommons.org/ns#license.  Only the latter is correct.

Any code compiled with liblicense between 0.6 and 0.7.1 (inclusive) contains this mistake.

This time I have audited the library for other insanities like the one fixed here, and there are none.  Great thanks to Nathan Yergler for spotting this.  I took this chance to change ll_write() and ll_read() to *NOT* take NULL as a valid predicate; this makes the implementation simpler (and more correct).

Sadly, I have bumped the API and ABI numbers accordingly.  It's available in SourceForge at http://sf.net/projects/cctools, and will be uploaded to Debian and Fedora shortly (and will follow from Debian to Ubuntu).

I'm going to head to Argentina for a vacation and Debconf shortly, so there'll be no activity from on liblicense for a few weeks. I would <strong>love</strong> help with liblicense in the form of further unit tests. Let's squash those bugs by just demonstrating all the cases the license should work in.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2008-07-30 20:44:42</wp:post_date>
		<wp:post_date_gmt>2008-07-30 20:44:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-08</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>64 bit woes (almost) cleared up</title>
		<link>http://labs.creativecommons.org/2008/08/02/64-bit-woes-almost-cleared-up/</link>
		<pubDate>Sat, 02 Aug 2008 22:22:37 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[As I mentioned in a <a href="http://labs.creativecommons.org/2008/07/15/32-to-64bit-remotely/">recent post</a>, we have upgraded our servers to 64 bit.  All of them are now running <a href="http://www.debian.org/ports/amd64/">amd64</a> for <a href="http://debian.org">Debian</a>.  The first three server were upgraded remotely, but we noticed that a few applications were constantly dying due to segmentation faults.   There was some speculation that this was a strange consequence of the remote upgrade process, so we upgraded the 4th server by reprovisioning it with <a href="http://serverbeach.com">Server Beach</a> as a 64 bit system, cleanly installed from scratch.

Well, it turned out that even the cleanly installed 64 bit system was having problems.  So I installed the <a href="http://www.gnu.org/software/gdb/">GNU Debugger</a>, which I had never actually used before.  I attached it to one of the processes that was having a problem, and what should immediately reveal itself but:

<blockquote>
(gdb) c
Continuing.
[New Thread 1090525536 (LWP 16948)]

Program received signal SIGSEGV, Segmentation fault.
[Switching to Thread 1082132832 (LWP 16865)]
0x00002aaaaacfcd91 in tidySetErrorSink () from /usr/lib/libtidy-0.99.so.0
</blockquote>

<a href="http://creativecommons.org/about/people#31">Nathan Yergler</a> made a few changes to <a href="http://code.creativecommons.org/viewsvn/cc.engine/branches/production/">cc.engine</a>, the application that was having a problem, and which is based on <a href="http://www.zope.org/">Zope</a>, to remove any dependencies to libtidy, and the segfaults ceased.  We haven't had the time to debug libtidy itself, but it would seem that there was some incompatibility between the version we had installed and a 64 bit system.

We are still having a problem with <a href="http://hjemli.net/git/cgit/about/">cgit</a> segfaulting, and that is the next thing to look into ... 1 down, 1 to go.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2008-08-02 22:22:37</wp:post_date>
		<wp:post_date_gmt>2008-08-02 22:22:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>64-bit-woes-almost-cleared-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="64-bit"><![CDATA[64 bit]]></category>
		<category domain="post_tag" nicename="amd64"><![CDATA[amd64]]></category>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<category domain="post_tag" nicename="libtidy"><![CDATA[libtidy]]></category>
		<category domain="post_tag" nicename="segmentation-fault"><![CDATA[segmentation fault]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GeoIP Hates Me ... phail.</title>
		<link>http://labs.creativecommons.org/2008/08/06/geoip-hates-me-phail/</link>
		<pubDate>Wed, 06 Aug 2008 14:26:15 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[Not that I am expecting much trouble coding using the Geo-IP module, but trying to get it on to the system itself has me believing that this module is out to get me! First, mac OS X (Leopard) doesn't come with GCC installed (shocker!) and this module needs building, so I go to get it. GCC is in packaged in with the developers tool, which is about a 2 GB install and I can't hand-pick the components ... fail. So I go get myself darwin ports, and try that route. It installs, gives me the sweet *ding*, install complete sound and when I go to terminal and ... fail ... no such file or directory. So I give in to its terrorist demands and make room for the developers pack thinking I'll make up for it by actually using these tools. So I wait 19 minutes for it to complete installing, I check I have GCC [i686-apple-darwin9-gcc-4.0.1] ... happily I go and python setup.py build ... and what followed was not nice ... a screen full of Warnings and Errors and No Build. =(

I am going to find another source and try again till it finally works!

In other news, changing all my codes to methods and including append to file for results, looking to add file-list comparison as a feature. Coming soon to a GIT repository near you!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2008-08-06 14:26:15</wp:post_date>
		<wp:post_date_gmt>2008-08-06 14:26:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>geoip-hates-me-phail</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="geoip"><![CDATA[GeoIP]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="ip"><![CDATA[IP]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title> Flickr Image Re-Use for OpenOffice.org new updates</title>
		<link>http://labs.creativecommons.org/2008/08/12/flickr-image-re-use-for-openofficeorg-new-updates/</link>
		<pubDate>Tue, 12 Aug 2008 20:02:16 +0000</pubDate>
		<dc:creator><![CDATA[mihai]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[Since my last article new functionalities were implemented :

- more results per page (16 to be more exactly)

- an image is inserted if you double click on it(previous was on a single click)

- i add it the functionality for Impress and Calc

- fixed some bugs related to search

Unfortunately  i have a problem with the popup menu on right click menu. It seems if that if set the location of the popup on the place where the right click happens, the popup indeed will appear but only for a moment.  This happens not for all those 16 results,  but for lets say more than half.

Now i found some settings and at this moment the popup will appear for each result, unfortunately the location where the popup appears is not exactly on the result (slightly above). I have to work more on this.

Some screenshots :

<a title="Results" href="http://labs.creativecommons.org/files/2008/08/results.jpg" target="_blank">Results</a>

<a title="Writer" href="http://labs.creativecommons.org/files/2008/08/writer.jpg" target="_blank">Writer</a>

<a title="Impress" href="http://labs.creativecommons.org/files/2008/08/impress.jpg" target="_blank">Impress</a>

<a title="Calc" href="http://labs.creativecommons.org/files/2008/08/calc.jpg" target="_blank">Calc</a>

<a href="http://code.creativecommons.org/viewsvn/ccooo/branches/mihai-flickr-soc/demo13072008/ccooo.oxt?revision=10689" target="_blank">Download extension</a> (right click and save as)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2008-08-12 20:02:16</wp:post_date>
		<wp:post_date_gmt>2008-08-12 20:02:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flickr-image-re-use-for-openofficeorg-new-updates</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>93</wp:comment_id>
			<wp:comment_author><![CDATA[Greg]]></wp:comment_author>
			<wp:comment_author_email>greg@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://blog.grossmeier.net</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-12 20:59:50</wp:comment_date>
			<wp:comment_date_gmt>2008-08-12 20:59:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That looks great Mihai!

One nitpick, it should say "Include content which requires me to Share-Alike" (not "my").

Otherwise, good work!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>94</wp:comment_id>
			<wp:comment_author><![CDATA[Mihai Husleag]]></wp:comment_author>
			<wp:comment_author_email>mihus2001@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2008-08-13 18:50:43</wp:comment_date>
			<wp:comment_date_gmt>2008-08-13 18:50:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello Greg,

indeed, thanks for pointing out the mistake. I modified and on the Download extension is this modification.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>17</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>95</wp:comment_id>
			<wp:comment_author><![CDATA[DiarioLinux &raquo; Extensiones Firefox y OpenOffice.org para GureGipuzkoa.net]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://diariolinux.com/2009/07/21/extensiones-firefox-y-openofficeorg-para-guregipuzkoanet/</wp:comment_author_url>
			<wp:comment_author_IP>213.195.94.213</wp:comment_author_IP>
			<wp:comment_date>2009-07-21 06:28:09</wp:comment_date>
			<wp:comment_date_gmt>2009-07-21 06:28:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://labs.creativecommons.org/2008/08/12/flickr-image-re-use-for-openofficeorg-new-updates/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>96</wp:comment_id>
			<wp:comment_author><![CDATA[Extensiones Firefox y OpenOffice.org para GureGipuzkoa.net | Full-Linux.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://full-linux.com/extensiones-firefox-y-openofficeorg-para-guregipuzkoanet/</wp:comment_author_url>
			<wp:comment_author_IP>74.52.113.242</wp:comment_author_IP>
			<wp:comment_date>2009-07-23 06:07:43</wp:comment_date>
			<wp:comment_date_gmt>2009-07-23 06:07:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] http://labs.creativecommons.org/2008/08/12/flickr-image-re-use-for-openofficeorg-new-updates/ [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Asheesh&#039;s liblicense interview</title>
		<link>http://labs.creativecommons.org/2008/08/12/asheeshs-liblicense-interview/</link>
		<pubDate>Tue, 12 Aug 2008 19:21:09 +0000</pubDate>
		<dc:creator><![CDATA[steren]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=143</guid>
		<description></description>
		<content:encoded><![CDATA[Relatively to the <a href="http://creativecommons.org/weblog/entry/8748">liblicense 0.8 announcement</a>, I recently made a video interview of Asheesh concerning his work on <a href="http://wiki.creativecommons.org/Liblicense">liblicense</a>.

Watch it <a href="http://blip.tv/file/1142312/">here</a>.

In his demo, Asheesh uses liblicense twice:
<ul>
	<li>in the online photo gallery to read and write metadata</li>
	<li>in the Eye Of Gnome plug-in to read license metadata</li>
</ul>
This shows that liblicense is now mature enough to be used by your applications.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2008-08-12 19:21:09</wp:post_date>
		<wp:post_date_gmt>2008-08-12 19:21:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asheeshs-liblicense-interview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>License-oriented metadata validator and viewer: summertime is winding up</title>
		<link>http://labs.creativecommons.org/2008/08/16/license-oriented-metadata-validator-and-viewer-summertime-is-winding-up/</link>
		<pubDate>Sat, 16 Aug 2008 20:41:50 +0000</pubDate>
		<dc:creator><![CDATA[hugo dworak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://code.google.com/soc/2008/">Google Summer of Code 2008</a> approaches <a href="http://code.google.com/soc/2008/faqs.html#0.1_timeline" title="Google Summer of Code 2008 Timeline">its end</a>, as less than forty-eight hours are left to submit the code that will then be evaluated by mentors, therefore it is fitting to pause for a moment and sum up the work that has been done with regard to the license-oriented metadata validator and viewer and to confront it with <a href="http://wiki.creativecommons.org/Rewrite_Metadata_Validator/SoC_2008#Proposed_timeline">the original proposal for the project</a>.

A Web application capable of parsing and displaying license information embedded in both <a href="http://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed">well-formed</a> and ill-formed Web pages has been developed. It supports the following means of embedding license information: <a href="http://dublincore.org/documents/dcq-html/">Dublin Core metadata</a>, <a href="http://www.w3.org/TR/rdfa-syntax/">RDFa</a>, <a href="http://www.w3.org/TR/rdf-syntax-grammar/">RDF/XML</a> linked externally or embedded (utilising <a href="http://www.ietf.org/rfc/rfc2397.txt">the <span style="font-family: monospace">data</span> <abbr title="Uniform Resource Locator">URL</abbr> scheme</a>) using the <span style="font-family: monospace">link</span> and <span style="font-family: monospace">a</span> elements, and RDF/XML embedded in a comment or as an element (the last two being deprecated). This functionality has been proven by unit testing. The source code of a Web page can be uploaded or pasted by a user, there is also a possibility to provide a <a href="http://www.ietf.org/rfc/rfc3986.txt"><abbr title="Uniform Resource Identifier">URI</abbr></a> for the Web application to analyse it. The software has been written in <a href="http://www.python.org/">Python</a> and uses <a href="http://pylonshq.com/">the Pylons Web Framework</a> and <a href="http://genshi.edgewall.org/">the Genshi toolkit</a>. Should you be willing to test this <a href="http://lynx.isc.org/">Lynx</a>-friendly application, please visit <a href="http://validator-beta.creativecommons.org/" title="The temporary address of the license validator" rel="nofollow">its Web site</a>.

The Web application itself uses a library called “libvalidator”, which in turn is powered by cc.license (a library developed by Creative Commons that returns information about a given license), <a href="http://www.w3.org/2007/08/pyRdfa/">pyRdfa</a> (a distiller that generates the <a href="http://www.w3.org/RDF/"><abbr title="Resource Description Framework">RDF</abbr></a> triples from an (X)HTML+RDFa file), <a href="http://code.google.com/p/html5lib/">html5lib</a> (an <abbr title="HyperText Markup Language">HTML</abbr> parser/tokenizer), and <a href="http://rdflib.net/">RDFLib</a> (a library for working with RDF). The choice of this set of tools has not been obvious and the library had undergone several redesigns, which included removing the code that employed <a href="http://cthedot.de/encutils/">encutils</a>, <a href="http://www.w3.org/TR/xml-c14n"><abbr title="Extensible Markup Language">XML</abbr> canonicalization</a>, <a href="http://utidylib.berlios.de/">µTidylib</a>, and <a href="http://www.crummy.com/software/BeautifulSoup/">the BeautifulSoup</a>. The idea of using <a href="http://librdf.org/">librdf</a>, <a href="http://rdfa.digitalbazaar.com/librdfa/">librdfa</a>, rdfadict has been abandoned. The source code of both the Web application (licensed under <a href="http://www.gnu.org/licenses/agpl-3.0.txt">the GNU Affero General Public License version 3</a> or newer) and its core library (licensed under <a href="http://www.gnu.org/licenses/lgpl-3.0.txt">the GNU Lesser General Public License version 3</a> or newer) is available through <a href="http://code.creativecommons.org/viewgit">the Git repositories of Creative Commons</a>.

In contrast to the contents of the original proposal, the following goals have not been met: traversal of special links, syndication feeds parsing, statistics, and cloning the layout of the Creative Commons Web site. However, these were never <a href="http://wiki.creativecommons.org/Rewrite_Metadata_Validator">mandatory requirements for the Web application</a>. It is also worth noting that the software has been written from scratch, although a now-defunct metadata validator existed. Nevertheless, the development does not end with Google Summer of Code — these and several new features (such as validation of multimedia files via liblicense and support for different language versions) are planned to be added, albeit at a slower pace.

After the test period, the validator will be available under <a href="http://validator.creativecommons.org/">http://validator.creativecommons.org/</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2008-08-16 20:41:50</wp:post_date>
		<wp:post_date_gmt>2008-08-16 20:41:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-oriented-metadata-validator-and-viewer-summertime-is-winding-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="post_tag" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>100</wp:comment_id>
			<wp:comment_author><![CDATA[New web metadata validator released - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org/weblog/entry/11985</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-07 04:30:01</wp:comment_date>
			<wp:comment_date_gmt>2009-01-07 04:30:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] work was a success; he announced in August 2008 a test version of the validator. He built on top of the work of others: the new validator uses the Pylons web framework, html5lib [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>EC2, S3Sync and back to Python.</title>
		<link>http://labs.creativecommons.org/2008/08/31/ec2-s3sync-and-back-to-python/</link>
		<pubDate>Sun, 31 Aug 2008 18:32:02 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[So this is where we are.

Now we have EC2, we have S3Sync ruby scripts on the EC2 AMI to pull the data from S3 and we have updated python scripts that read one line at a time and use Geo-IP (which was suprisingly easy to install once GCC was functional and the right versions of the C and Python modules were attained). So deployment is on full throttle and one final bug fix for generating the final results and we are done.

So, now back to the python code. Now we have 4 scripts:
<ul>
	<li>License Change (Logs for i.creativecommons.org) [Version 7]</li>
	<li>License Chooser (Logs for creativecommons.org) [Version 5]</li>
	<li>CC Search (Logs for search.creativecommons.org) [Version 4]</li>
	<li>Deeds (Logs for creativecommons.org/licenses/*) [Version 2]</li>
</ul>
Each of which polls a directory for new logs, reads each new log in the stated directory, line by line and uses regular expressions to parse the information into usable statistics. Hitherto throughout the development phase, the results were passed on to stdout / console. With deployment, they now need to be written to a file, while interestingly is still to be resolved. (TypeError: 'str' object is not callable sound familiar to anyone?)

I am greatful to Asheesh (whom I should have totally bugged more). I should've put in more work into the project when vactioning back home, also having less to do at school would've helped (studies + 3 research projects is not a recommended wotk load), but if it would be easy, it wouldn't be fun! Oh well, I learnt a fair bit through the project and with a bit more troubleshooting we'd be good to go ... for now!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2008-08-31 18:32:02</wp:post_date>
		<wp:post_date_gmt>2008-08-31 18:32:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ec2-s3sync-and-back-to-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2008"><![CDATA[2008]]></category>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[EC2]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="loggy"><![CDATA[Loggy]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="s3"><![CDATA[S3]]></category>
		<category domain="post_tag" nicename="s3sync"><![CDATA[S3Sync]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>&gt;&gt;&gt; py &gt;&gt; file ... Also if __name__ == &#039;__main__&#039;:</title>
		<link>http://labs.creativecommons.org/2008/09/01/py-file-also-if-__name__-__main__/</link>
		<pubDate>Mon, 01 Sep 2008 16:41:36 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[Some major updates and we have the scripts running, thanks Asheesh for the redirection idea, it works but I couldn't get it to give me a progress bar since everything was being redirected to the file. I tried using two different functions but they needed a shared variable, so that failed, but it was nice since now I ended up with "real" python files with a main().

The journey was interesting, we went from trying &gt;&gt; inside python to including # -*- coding: UTF-8 -*- and # coding: UTF-8 to get it to work and after a few more bumps finally figured out the __main__

I still need to update all the scripts, but licChange which is at the forefront of all the latest developments just got bumped upto version 8.2 (which reminds me of a dire need to update GIT:Loggy!).

This also gave me an idea of how to go about getting data out of S3 for "free" ... S3 to EC2 is free ... SCP from EC2 is free and voila! Why would I every want to do that? Well, for starters, the EC2 AMI runs out of space around 5 GB (note: logs for i.creativecommons.org are 4.7 GB) and secondly, the scripts seem to run faster locally. The icing on the cake, I wouldn't have to scp the result files being generated. I could possibly automate the process of running the scripts.

Thats all for now ... class at 0830 Hrs in the moring (it's criminal, I know).

I guess, I'll just have to keep at it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2008-09-01 16:41:36</wp:post_date>
		<wp:post_date_gmt>2008-09-01 16:41:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>py-file-also-if-__name__-__main__</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2008"><![CDATA[2008]]></category>
		<category domain="post_tag" nicename="amazon"><![CDATA[Amazon]]></category>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[EC2]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="loggy"><![CDATA[Loggy]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="s3"><![CDATA[S3]]></category>
		<category domain="post_tag" nicename="scp"><![CDATA[SCP]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Loggy: some results</title>
		<link>http://labs.creativecommons.org/2008/09/02/loggy-some-results/</link>
		<pubDate>Tue, 02 Sep 2008 13:47:56 +0000</pubDate>
		<dc:creator><![CDATA[ankitg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[So after setting up EC2, S3, grabbing the files from S3, SCP-ing the python scripts and running them, one would expect to see some results. Upon the polite request of Asheesh here is a sampler.

The first script (dealing with urls that change their license, named licChange.py) results in an output which lists the URLs (that change their license [type, version or jurisdiction]), the license info and the date(s) of change:
<blockquote>http://blog.aikawa.com.ar/ [['by-nc-sa', '2.5', 'ar'], ['by-nc-nd', '2.5', 'ar']] ['21/Sep/2007:11:38:56 +0000', '22/Sep/2007:05:40:22 +0000']</blockquote>
The line above shows that the license for the URL 'http://blog.aikawa.com.ar/' was changed from 'by-nc-sa 2.5 Argentina' to 'by-nc-nd 2.5 Argentina' some time between 11:38:56 GMT on the 21st of September 2007 to 05:40:22 GMT on 22nd of September 2007. The format may seem a bit awkward but you can expect a facelift for the results file. I was previously planning to re-read the file to generate statistics but we can have a seperate file for storing data and another one for the stats.

Similarly, the following lines out of the results file for licChange.py from 2007-09 show license changes for 'http://0.0.0.0:3000/' and 'http://127.0.0.1/actibands/castellano/licencias.htm' and *many other internal URLs:
<blockquote>http://0.0.0.0:3000/ [['by-nc-sa', '3.0', ''], ['by-nc-sa', '3.0', ''], ['by-nc-sa', '3.0', ''], ['by-nc-sa', '3.0', ''], ['by-nc-sa', '3.0', ''], ['by-nc-nd', '3.0', 'nl'], ['by-nc-nd', '3.0', 'nl']] ['17/Sep/2007:08:10:28 +0000', '17/Sep/2007:17:50:28 +0000', '18/Sep/2007:16:25:47 +0000', '19/Sep/2007:13:03:23 +0000', '19/Sep/2007:13:11:16 +0000', '20/Sep/2007:22:16:09 +0000', '20/Sep/2007:22:16:39 +0000']</blockquote>
<blockquote>http://127.0.0.1/actibands/castellano/licencias.htm [['by-sa', '2.5', 'es'], ['by-nc-sa', '2.5', 'es'], ['by-sa', '2.5', 'es'], ['by-nc-sa', '2.5', 'es'], ['by-sa', '2.5', 'es'], ['by-nc-sa', '2.5', 'es']] ['27/Sep/2007:20:50:44 +0000', '27/Sep/2007:20:50:44 +0000', '27/Sep/2007:20:51:00 +0000', '27/Sep/2007:20:51:00 +0000', '27/Sep/2007:20:51:23 +0000', '27/Sep/2007:20:51:23 +0000']</blockquote>
The licenses for http://0.0.0.0:3000/ are ported for Netherlands (nl) and the one for http://127.0.0.1/actibands/castellano/licencias.htm are ported for Spain (es). Note that presently all the occurences of any URL that changes its license is outputted, this will be changed in the next nightly build. This included a better formatted result file with stats on total number of URLs changing licenses and even stats distinguishing changes between license change and version change.

Akin to this (licChange.py) there are 3 more scripts, licChooser.py, licSearch.py and deedLogs.py.

licChooser.py grabs metadata usage information and generates stats in absolute numbers and percentage of all entries, eg.: "16 out of 100 items are tagged as Audio [16%] of total entries and 29% of items with Metadata"

licSearch.py grabs information from the logs for search.creativecommons.org like the query, the engine and the search options (commercial use and derivatives).

deedLogs.py looks at the logs for the deed pages, employs MaxMind GeoIP to do a location lookup and grabs the deed page being loked at.

So this is what we have so far.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2008-09-02 13:47:56</wp:post_date>
		<wp:post_date_gmt>2008-09-02 13:47:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>loggy-some-results</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2008"><![CDATA[2008]]></category>
		<category domain="post_tag" nicename="cc-logger"><![CDATA[CC-Logger]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="loggy"><![CDATA[Loggy]]></category>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="results"><![CDATA[results]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Issue Tracking at code.creativecommons.org</title>
		<link>http://labs.creativecommons.org/2008/09/05/issue-tracking-at-codecreativecommonsorg/</link>
		<pubDate>Fri, 05 Sep 2008 21:19:38 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[Continuing the trend started when we <a href="http://labs.creativecommons.org/2008/04/01/version-control-changes/">moved our source repository</a>, today we're rolling out <a href="http://code.creativecommons.org/issues">issue tracking on code.creativecommons.org</a>.  Our goals are two fold:

<ol>
<li> Increase transparency regarding what we are doing and plan to do.  If you find a bug or suggest an idea, we'd like to make sure it's tracked in a publicly accessible location where everyone can follow along.</li>
<li>Tangentially, we'd like to make it easier for people to contribute to the work we're doing.  We [semi-]frequently hear people say they'd like to help, but don't know where to start.  We've had <a href="http://wiki.creativecommons.org/Developer_Challenges">Developer Challenges</a> forever but they're not easy to find and poorly maintained.  I'm personally hoping that keeping the ideas in the same system we [developers] use every day will keep them in the forefront of our minds.</li>
</ol>

With respect to the first, we're initially tracking bugs here for three projects: the <a href="http://creativecommons.org/license">license engine</a>, Herder (a translation tool we'll be rolling out real soon now), and CC Learn's <a href="http://learn.creativecommons.org/projects/oesearch">Universal Education Search</a> project.  Feel free to create bugs, wishes, features for any CC project; we'll create the Project identifiers as we go.

With respect to challenges, I've created a <strong><code>community</code></strong> keyword we'll assign to projects that it's unlikely we'll tackle, but which might be appropriate for someone in the community who wants to contribute. <a href="http://tieguy.org/blog/">Luis'</a> <a href="http://tieguy.org/blog/2008/09/03/creative-commons-picture-script-request/">idea</a> from earlier this week is the <a href="http://code.creativecommons.org/issues/issue7">first</a>. I hope we have a giant pile of ideas (and a corresponding giant pile of completed ideas) by next year's Summer of Code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2008-09-05 21:19:38</wp:post_date>
		<wp:post_date_gmt>2008-09-05 21:19:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>issue-tracking-at-codecreativecommonsorg</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Introducing Commoner</title>
		<link>http://labs.creativecommons.org/2008/10/21/introducing-commoner/</link>
		<pubDate>Tue, 21 Oct 2008 22:23:36 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[Last week we launched the <a href="http://creativecommons.net">Creative Commons Network</a> as part of our annual campaign. The Network is a platform for exploring digital copyright registries and has features we think will appeal to our community. Creators can register their works and add a badge to their web pages to show more information about their identity on the license deeds (for more information see <a href="http://creativecommons.org/weblog/entry/10043">this post</a> on the CC blog).

Like everything we do at Creative Commons, the code behind the CC Network is free.  <code>commoner</code> is a <a href="http://djangoproject.com">Django</a>-based Python application that runs the code behind <a>creativecommons.net</a>. While we don't expect someone would want to run a site <strong>exactly</strong> like the CC Network, we think there are plenty of opportunities for different registries that serve different communities to flourish.  The enhanced deeds aren't dependent on anything in the CC infrastructure stack -- we're just consuming metadata published on the pages.

You can find information on Commoner <a href="http://wiki.creativecommons.org/CC_Network_Development">in the wiki</a> or the auto-generated <a href="http://code.creativecommons.org/doc/commoner/">docs</a>; issues can be submitted on the <a href="http://code.creativecommons.org/issues/">CC issue tracker</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2008-10-21 22:23:36</wp:post_date>
		<wp:post_date_gmt>2008-10-21 22:23:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-commoner</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="commoner"><![CDATA[commoner]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[network]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Schema Migration with Django</title>
		<link>http://labs.creativecommons.org/2008/10/21/schema-migration-with-django/</link>
		<pubDate>Tue, 21 Oct 2008 22:42:36 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://djangoproject.com">Django</a> is an amazing web framework; we built a lot of features in a very short period of time and Django [mostly] stayed out of our way. Last night as I was working on today's feature upgrade for <a href="http://creativecommons.net">creativecommons.net</a> I decided to tackle what lots of people see as its major weakness: schema migration. Rather, the lack of an integrated migration story.

I had seen some of the tools floating around and decided to watch <a href="http://www.youtube.com/watch?v=VSq8m00p1FM">the panel from Djangocon</a> to get a better overview.  For the record the represented tools are <a href="http://code.google.com/p/dmigrations/">dmigrations</a>, <a href="http://south.aeracode.org/">south</a> and <a href="http://code.google.com/p/django-evolution/">django-evolution</a>. At some point while watching the video I think I was convinced each was the right solution; they all have features/use cases to recommend them.

Selecting the correct tool is an exercise in change management: it seems almost certain that Django will eventually adopt or create a "blessed" migration tool.  And at that point, we need a way to move forward. Because of this I wound up choosing dmigrations.  Sure, it doesn't do some of the fancy stuff that south and django-evolution do (dependency tracking, model "fingerprinting") but it does let us dump out the entire migration path as raw SQL and that's something I can easily work with when it comes time to recreate our database on the "real' platform.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2008-10-21 22:42:36</wp:post_date>
		<wp:post_date_gmt>2008-10-21 22:42:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>schema-migration-with-django</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="commoner"><![CDATA[commoner]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[migration]]></category>
		<category domain="post_tag" nicename="schema"><![CDATA[schema]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>101</wp:comment_id>
			<wp:comment_author><![CDATA[macdet]]></wp:comment_author>
			<wp:comment_author_email>macdet@mobbing-gegner.de</wp:comment_author_email>
			<wp:comment_author_url>http://blog.mobbing-gegner.de/index.php?/archives/606-hessen-wahl-2009-Armut-in-Deutschland.html</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-02-04 12:19:16</wp:comment_date>
			<wp:comment_date_gmt>2009-02-04 12:19:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[it`s one way to do. at this time i prefer db_dump.py  and alter by Hand for small mods. 

# Author: limodou (limodou@gmail.com)
#
# This tool is used for dump and reload data from and into database
# You can see the help info through:
#
#     python db_dump.py -h]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>102</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://wiki.creativecommons.org/User:Nathan_Yergler</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-05-21 22:29:53</wp:comment_date>
			<wp:comment_date_gmt>2009-05-21 22:29:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sure, but having two different systems -- one for "small" mods and one for larger ones -- is a recipe for confusion.  Using a migration tool lets us ensure that things are applied in the correct order.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CC Network Feature Update</title>
		<link>http://labs.creativecommons.org/2008/10/21/cc-network-feature-update/</link>
		<pubDate>Tue, 21 Oct 2008 22:47:53 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=185</guid>
		<description></description>
		<content:encoded><![CDATA[We just pushed a new feature set to CC Network; most of these are OpenID related, and I'll try to write more in depth about the interesting ones in the near future:

<ul>
	<li>You can now elect to "always trust" an OpenID site</li>
	<li>Commoner (the code behind the CC Network) now supports the Simple Registration extension to OpenID</li>
	<li>We have preliminary (experimental) support for Verisign's <a href="https://pip.verisignlabs.com/seatbelt.do">OpenID Seatbelt</a> extension</li>
	<li>We've added a link that to "add another" after you register a work</li>
	<li>You can now select a full size or "thin" network badge (similar to the license badges)</li>
	<li>We've added a link in the <code>head</code> of profile and work list pages that points to the RDF/XML file; we still consider RDFa the primary vehicle but this may help others ingest the data</li>
</ul>

Other things you think we should add?  Let us know -- <a href="http://code.creativecommons.org/issues">create an issue</a> or email <a href="mailto:issues@creativecommons.org">issues@creativecommons.org</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>185</wp:post_id>
		<wp:post_date>2008-10-21 22:47:53</wp:post_date>
		<wp:post_date_gmt>2008-10-21 22:47:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-network-feature-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="commoner"><![CDATA[commoner]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="update"><![CDATA[update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Updating Pootle, with Mozilla&#039;s help</title>
		<link>http://labs.creativecommons.org/2008/11/25/updating-pootle-with-mozillas-help/</link>
		<pubDate>Tue, 25 Nov 2008 17:45:53 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[We use Pootle for handling <a href="http://translate.creativecommons.org/">http://translate.creativecommons.org/</a>, the site where our international affiliates and other CC community members can help us out by translating CC content into other languages. Currently we only request translations this way for core CC infrastructure like the license choose.

For a few months, I had been working on a replacement for Pootle that better-fit our needs. Mozilla, as it happens, has similar issues, and when I recently investigated, I found that they were working on improvements to Pootle. So enough working alone; we'll work with them! Their project to improve Pootle is called "<a href="https://wiki.mozilla.org/Verbatim">Verbatim</a>," and I encourage all interested in web-based translation software to read more at that link.

Nathan Yergler and I sent an email to our international affiliates email list, and since I have a lot to do before tomorrow, I'll let it speak for itself:

<!--more-->
<blockquote>A bit more than a month ago we hinted we were working a new web-based translation tool.  We're committed to making translation easier and more productive for all of our affiliates.  To that end, improving the tools is one of Asheesh Laroia's current focuses.  This message should be considered as coming from both of us.

<strong>BRIEF SUMMARY</strong>

Things are going to look prettier on <a href="http://translate.creativecommons.org">http://translate.creativecommons.org</a> once we flip the switch into a
newer version of the software on Wednesday morning, Nov. 26 Pacific time.  We're making things easier to use by joining forces with Mozilla and the Pootle developers on improving Pootle.

<strong>DETAILS</strong>

So we've joined forces with the Mozilla project on an overhaul to Pootle.  They've decided to make improvements to Pootle to make it suitable for their translation efforts and in true open source fashion
we're benefiting from their changes and contributing our own.  Mozilla has already improved the user interface quite a bit, so we'd like to share that with all of you.  There's a long series of Pootle
improvements coming down this pipe, we expect; this is just the opening.

From our end, we're also going to make the process more streamlined for translators.  Here is some feedback we've gotten, and how we plan to address it:

<strong>Issue</strong>: "It takes too long to see the translations on the web, either on the staging site or the main site"

<strong>Response</strong>: (Done) For all admins of a language, there is now a link labeled "Commit" you can do in Pootle.  When you do this, the latest translations go live on staging.creativecommons.org.  (I think this is
pretty cool. Try it!)

<strong>Issue</strong>: "It's hard to understand how to use Pootle"

<strong>Response</strong>: (In progress) In the next few days, I'll be publishing a video of basic Pootle usage that slowly shows how to be sure you are using it effectively.  I'm happy to answer other questions about how
to use it.

<strong>Issue</strong>: "It's hard to keep up"

<strong>Response</strong>: (In progress) We'll start emailing statistics to the CCi list showing which languages are in need of work.  The new Pootle calculates how many words need translation rather than how many messages, which is much more accurate.

Other changes we have or will be making:
<ul>
	<li>We've gone through and made all existing translators for the website into admins which means you can now deputize others without our intervention.  Documentation managing your translators will be part of the documentation/screencasts that Asheesh works on.</li>
	<li>Pootle will be likely migrating from its old "jToolkit" backend to the more modern Django.  This will make it faster and more reliable in the long run</li>
	<li>We'll run a nighly script that makes sure that if we add a new string to translate, it shows up in Pootle within a day.</li>
	<li>I've [Asheesh] enriched the PO files with some extra "context"information saying what the string is used for; for example, you will see not only the language name "Korean" but our internal code for it, "lang.kr". This probably won't be interesting to most contributors but if you're trying to re-use our templates, etc for your own site it'll help you connect the dots.</li>
</ul>
Again, this is just the first stage of the Pootle upgrade coming down the pipe thanks to our working with Mozilla.  We were working on an independent replacement for Pootle called "Herder," but when we
discovered all this activity by Mozilla we realized it would be most beneficial if we joined forces with them.

We're planning to flip the switch Wednesday morning Pacific time. There may be up to one hour of downtime, but we think the downtime should be limited to about a period of five minutes.

Thanks for your contributions to date and all your feedback.  If you have additional feedback, gripes, suggestions, we'd love to hear them.  Also, please feel free to email us offlist with questions regarding
your account.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2008-11-25 17:45:53</wp:post_date>
		<wp:post_date_gmt>2008-11-25 17:45:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>updating-pootle-with-mozillas-help</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>ionicer: Making Subversion and git extra friendly</title>
		<link>http://labs.creativecommons.org/2008/12/02/ionicer-extra-friendly/</link>
		<pubDate>Tue, 02 Dec 2008 22:11:50 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[We've discovered that some of our websites, in particular those that rely on MySQL, are very sensitive to spikes in disk I/O load. Right now, we do run some non-interactive services on the same machines as some of our websites.

Subversion and git in particular seem to cause long-duration high disk load, which causes Nathan Kinkade to get paged when e.g. wiki.creativecommons.org takes too long to load. We have found that using <a href="http://friedcpu.wordpress.com/2007/07/17/why-arent-you-using-ionice-yet/">ionice to set</a> background activities to "idle" priority is very useful in avoiding sending text messages to NK.

However, ionice can only be run by root, meaning regular users can't even request the system be more gentle. So I wrote a simple tool, "ionicer," that is a setuid-root C tool that sets its parent process's IO priority to idle.

You <a href="http://git.asheesh.org/?p=ionicer.git;a=summary">can check it out in my gitweb</a>.

I then used <a href="http://www.debian-administration.org/articles/118">dpkg-divert</a> to replace /usr/bin/svnserve and /usr/bin/git with simple shell wrappers that call ionicer before calling the real binaries.  So the call path goes:
<ul>
	<li>user connects with svn+ssh to code.creativecommons.org</li>
	<li>user logs in with an SSH key and executes "svnserve."</li>
	<li>svnserve is really a shell script. /bin/bash runs a script which does two things:
<ol>
	<li>Runs ionicer, which changes the shell to I/O priority class idle, and</li>
	<li>Executes svnserve.real with the same arguments as were passed into the wrapper.</li>
</ol>
</li>
</ul>
Ta-da!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2008-12-02 22:11:50</wp:post_date>
		<wp:post_date_gmt>2008-12-02 22:11:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ionicer-extra-friendly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC Boston Tech Summit kickoff</title>
		<link>http://labs.creativecommons.org/2008/12/12/ccboston-tech-summit-kickoff/</link>
		<pubDate>Fri, 12 Dec 2008 15:00:39 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=195</guid>
		<description></description>
		<content:encoded><![CDATA[CC board member <a title="Hal Abelson" href="http://en.wikipedia.org/wiki/Hal_Abelson" target="_blank">Hal Abelson</a> kicked off today's Boston tech summit with a brief history of where CC tech has been, and where CC tech is going.

Where the licenses provide interoperability for legal code, the interoperability for technologies has taken longer to develop. <a title="RDFa" href="http://en.wikipedia.org/wiki/RDFa" target="_blank">RDFa</a>, which allows for distributed embedding of metadata in web pages, has been accepted as a W3C recommendation. CC and others are developing inherently distributed technologies that are inherently extensible. Clearly interoperability is the name of the game.

Hal also touted the as-yet-unreleased book <a title="Viral Spiral" href="http://www.amazon.com/Viral-Spiral-Commoners-Digital-Republic/dp/1595583963/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1229093722&amp;sr=8-1" target="_blank">Viral Spiral: how the commoners built a digital republic of their own</a> as a story of what we have accomplished, and what more is possible.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2008-12-12 15:00:39</wp:post_date>
		<wp:post_date_gmt>2008-12-12 15:00:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccboston-tech-summit-kickoff</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Building the CC Network</title>
		<link>http://labs.creativecommons.org/2008/12/12/building-the-cc-network/</link>
		<pubDate>Fri, 12 Dec 2008 15:17:55 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[Creative Commons CTO Nathan Yergler discussed the Creative Commoner network, which was developed beginning in October and is still under active development. The network allows creators to collect references to their work in one place -- to act as a registry. It also serves to bring people in to the CC community, and aid interoperability and connection of existing data and works.

The CC network sports personalized profile pages, OpenID, and a simple registry, which Nathan discussed in turn. Creative Commons can build layers of trust by validating a user's "confirmed" name from PayPal transactions, meaning that license claims are more legitimate than otherwise. But there are issues, such as name changes and incorrect or outdated information from PayPal.

<a title="OpenID" href="http://en.wikipedia.org/wiki/OpenID" target="_blank">OpenID</a> is an open single sign-on standard which CC provides with a Commoner account. There are issues around this as well, such as a need to trust your provider. Nathan laid out the various ways CC is working to mitigate these issues.

But "the meat of the CC network" is in the work registry. As yet it is a simple implementation. Reciprocal claims and validation are key, where the registration learns about the validity about a work registration claim based on the presence of similar license data on that page. This shows that the user making the claim does indeed have the ability to edit the work in question.

Future developments include better identification of works and metadata, registration of feeds, the ability to follow creators in their subsequent works, and general future efforts exploring registry technology.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2008-12-12 15:17:55</wp:post_date>
		<wp:post_date_gmt>2008-12-12 15:17:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-the-cc-network</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="openid"><![CDATA[openid]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Copyright Registries 2.0</title>
		<link>http://labs.creativecommons.org/2008/12/12/copyright-registries-2_0/</link>
		<pubDate>Fri, 12 Dec 2008 15:33:32 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[Mario Pena of <a href="https://www.safecreative.org/">Safe Creative</a>, Joe Benso of <a href="http://www.registeredcommons.org/">Registered Commons</a>, and Mike Linksvayer of CC gave a talk on "Copyright Registries 2.0" as a continuation of the registration conversation we had at our first tech summit in June.

Mario began with a summary of registries and how they should work: they must provide pointers to works, and they must facilitate the sharing of relevant information. He pointed to RDFa and ccREL as examples of technologies in this sphere promoting interoperability. He also mentioned the <a href="http://oscri.org/">Open Standards for Copyright Registry Interop</a> as an example of the work being done to help foster online registries interoperability and standardization.

Next, Joe discussed what he sees as necessary for registries moving forward. The big point he made was that Registered Commons feels a registry authority is a necessary condition for registries to be successfully implemented. He started with a brief history of Registered Commons and named the features they provide, including use of the CC API, timestamping of works, and physical identity verification. He finished with the need for an authority: to allocate namespaces, appoint registries based on criteria, identify entities to be certified, etc.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2008-12-12 15:33:32</wp:post_date>
		<wp:post_date_gmt>2008-12-12 15:33:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>copyright-registries-2_0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="registry"><![CDATA[registry]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Detecting CC Attribution License Violations with Flickr Images on the Web</title>
		<link>http://labs.creativecommons.org/2008/12/12/detecting-cc-attribution-license-violations/</link>
		<pubDate>Fri, 12 Dec 2008 16:30:21 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[Oshani Seneviratne, a student at MIT, presented her work on "Detecting Creative Commons Attribution License Violations with Flickr Images on the World Wide Web," which she completed as a summer project. She summarized her motivation, the use of CC licenses in Flickr, system design, and future directions for the project.

CC provides free copyright licenses but does not provide a means of detecting violations of the terms of these licenses. For instance, someone could use a CC-BY photo on their home page without providing attribution. Oshani's project demonstrates a means of searching Flickr to detect violations like these. The implementation uses the Flickr API to find images and license data, and detect whether or not attribution is given on the web page where the image is re-used. One limitations is that the validator needs to know the image URI in order to search Flickr.

Future directions include extending this project to other licenses, determining the feasibility of looking for non-commercial use violations, and checking for the Share-Alike condition.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2008-12-12 16:30:21</wp:post_date>
		<wp:post_date_gmt>2008-12-12 16:30:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>detecting-cc-attribution-license-violations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Government Information Licensing Framework</title>
		<link>http://labs.creativecommons.org/2008/12/12/government-information-licensing-framework/</link>
		<pubDate>Fri, 12 Dec 2008 17:01:29 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[David Torpie of the Office of Economic and Statistical Research at the <a title="Queensland Treasury" href="http://www.treasury.qld.gov.au/" target="_blank">Queensland Treasury</a> gave a talk on "Government Information Licensing Framework: a multidisciplinary project improving access to Public Sector Information." This is a project to give greater access to Australian government data, to make government more transparent, and in doing so to develop a standard set of terms and conditions that are broadly applicable to other government contexts.

David first answered the question of why the Australian government even needs to worry about licensing its works. In Australia, unlike the United States, the government has copyright over works produced by government agencies. Australian copyright law also extends to less-than-creative works (such as telephone directories), which increases the importance that public licensing is clear and simple.

The solution developed at the Queensland Treasury is "digital license management", or DLM. DLM is a technology to embed license metadata into documents and other works, developed in Java. Benefits include ease of linking from data to license, and finding information based on its license. DLM was developed before a suitable alternative was available; <a title="liblicense" href="http://wiki.creativecommons.org/Liblicense" target="_blank">liblicense</a> now provides a similar functionality in C. The team developing DLM is working with CC's tech team for collaboration, and initial indications are that a dedicated Java tool may prove very useful.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2008-12-12 17:01:29</wp:post_date>
		<wp:post_date_gmt>2008-12-12 17:01:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>government-information-licensing-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="liblicense"><![CDATA[liblicense]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Life After REC: The Future of RDFa</title>
		<link>http://labs.creativecommons.org/2008/12/12/life-after-rec-the-future-of-rdfa/</link>
		<pubDate>Fri, 12 Dec 2008 19:37:30 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[Ben Adida is back again from the first tech conference with a new talk about RDFa.

First he gave a brief review of RDFa: there exists a huge chasm between the human web and the data web. RDFa addresses our need to bridge this gap. We want machine-readable metadata so we can use computer programs to answer simple questions about a work to save on time and effort. He then moved on to explaining ccREL, the Creative Commons Rights Expression Language. There are four principles for publishing in HTML: 1) visual correspondence, 2) don't repeat yourself, 3) remix friendliness, 4) extensibility and modularity.

For the main portion of his talk, Ben went over the events of the past six months regarding RDFa adoption.
<ul>
	<li>April-May: Digg deployed RDFa.</li>
	<li>June: RDFa goes W3C "Candidate Recommendation" with around 12 implementations (parsers).</li>
	<li>June: Open Archives Initiatives supports RDFa; UK National Archive uses RDFa.</li>
	<li>September: Yahoo SearchMonkey deploys RDFa support.</li>
	<li>October: RDFa goes W3C Recommendation.</li>
	<li>November: CC launches the CC network in November; Drupal announces roadmap for RDFa integration.</li>
</ul>
He concluded with a demonstration of sample <a title="Search Monkey" href="http://developer.yahoo.com/searchmonkey/" target="_blank">SearchMonkey</a> functionality that grabs CC license metadata from search results and displays that information on the search page.

What's next?, asks Ben, with a strong disclaimer that this is just a small glimpse of what is possible. He points to HTML 4 and 5 integration, the simplification of common cases (not having to keep redefining common namespaces), finding common ground with the microformat community, and better search and in-browser tools.

The question Ben asks you to take away is this: What are you waiting for to consume and/or publish RDFa?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2008-12-12 19:37:30</wp:post_date>
		<wp:post_date_gmt>2008-12-12 19:37:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>life-after-rec-the-future-of-rdfa</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Open Source Knowledge Management: What Comes After Access?</title>
		<link>http://labs.creativecommons.org/2008/12/12/open-source-knowledge-management-what-comes-after-access/</link>
		<pubDate>Fri, 12 Dec 2008 20:36:06 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[Jonathan Rees of Science Commons discussed the <a href="http://sciencecommons.org/projects/data">open source knowledge management system</a> that Science Commons is developing. He discussed the importance of interfacing different stores of data and knowledge, and elucidated how Science Commons is making progress on these issues. In the process Jonathan gave six layers of what comprises an interface: permission, access, container, syntax, vocabulary, and semantics.

The focus of this project is on data integration, and the importance of data integration is reducing the huge transactions costs of using different data stores which have been assembled for different purposes. Data integration does happen, but at huge expense of effort; it is hard, complex, and fragile;"glue" is necessary at all levels, and the process is manual and error-prone.

By developing and testing the whole interface stack for scientific data, the data integration problem becomes vastly easier to understand, browse, search, consult, transform, analyze, visualize, model, annotate, and organize data.

Jonathan closed with a call to action is to "choose, promote, and nourish sharing solutions at every level in the stack".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2008-12-12 20:36:06</wp:post_date>
		<wp:post_date_gmt>2008-12-12 20:36:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>open-source-knowledge-management-what-comes-after-access</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="neurocommons"><![CDATA[neurocommons]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Preview of FairShare and Findings on NC License Distribution</title>
		<link>http://labs.creativecommons.org/2008/12/12/preview-of-fairshare-and-findings-on-nc-license-distribution/</link>
		<pubDate>Fri, 12 Dec 2008 20:54:35 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[Rich Pearson began with an introduction to FairShare, which is a soon-to-be-launched free tool that allows creators to claim their works and discover how their works are shared and remixed. FairShare is open and supports multiple licensing standards. He then stepped through a demo of FairShare.

The second part of his talk was a brief overview of some CC licensing statistics from the web. They found at least 56 million licenses uses (excluding a deep search of images and Flickr).  Another interesting point was the long tail of jurisdiction-specific licenses: nearly 75% of licenses were generic (unported), with all other jurisdictions having a no more than a few percent each.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date>2008-12-12 20:54:35</wp:post_date>
		<wp:post_date_gmt>2008-12-12 20:54:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preview-of-fairshare-and-findings-on-nc-license-distribution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Closing: What&#039;s next in 2009</title>
		<link>http://labs.creativecommons.org/2008/12/12/closing-whats-next-in-2009/</link>
		<pubDate>Fri, 12 Dec 2008 20:58:51 +0000</pubDate>
		<dc:creator><![CDATA[frank]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[Nathan Yergler proceeded to wrap up the tech conference with some humble predictions about where CC tech will be headed.

The following are a brief list of these future initiatives:
<ul>
	<li>Using RDFa to publish metadata in a distributed fashion</li>
	<li>The Next Generation of <a href="http://wiki.creativecommons.org/MozCC">MozCC</a></li>
	<li>Making attribution easier</li>
	<li>Universal Education Search</li>
	<li>CC0 &amp; Public Domain Assertion</li>
	<li>OSCRI / CC Network and creating an interoperable registry with Safe Creative and Registered Commons</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2008-12-12 20:58:51</wp:post_date>
		<wp:post_date_gmt>2008-12-12 20:58:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>closing-whats-next-in-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="registry"><![CDATA[registry]]></category>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>liblicense 0.8.1: The bugfixiest release ever</title>
		<link>http://labs.creativecommons.org/2008/12/25/liblicense-081-the-bugfixiest-release-ever/</link>
		<pubDate>Thu, 25 Dec 2008 03:46:43 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I'm greatly pleased to announce liblicense 0.8.1.  Steren and Greg found a number of major issues (Greg found a consistent crasher on amd64, and Steren found a consistent crasher in the Python bindings).  These issues, among
some others, are fixed by the wondrous liblicense 0.8.1.  I mentioned to Nathan Y. that liblicense is officially "no longer ghetto."</p>
<p>The best way enjoy liblicense is from our Ubuntu and Debian package repository, at <a href="http://mirrors.creativecommons.org/packages/">http://mirrors.creativecommons.org/packages/</a>.  More information on what liblicense does is <a href="http://wiki.creativecommons.org/liblicense">available on our wiki page about liblicense</a>. You can also get them in fresh Fedora 11 packages.  And the source tarball is available for <a href="https://sourceforge.net/project/showfiles.php?group_id=80503&amp;package_id=238700&amp;release_id=649438">download from sourceforge.net</a>.</p>
<p>P.S. MERRY CHRISTMAS!</p>
<p>The full ChangeLog snippet goes like this:</p>
<p>liblicense 0.8.1 (2008-12-24):<br />
* Cleanups in the test suite: test_predicate_rw's path joiner finally works<br />
* Tarball now includes data_empty.png<br />
* Dynamic tests and static tests treat $HOME the same way<br />
* Fix a major issue with requesting localized informational strings, namely that the first match would be returned rather than all matches (e.g., only the first license of a number of matching licenses). This fixes the Python bindings, which use localized strings.<br />
* Add a cooked PDF example that actually works with exempi; explain why that is not a general solution (not all PDFs have XMP packets, and the XMP packet cannot be resized by libexempi)<br />
* Add a test for writing license information to the XMP in a PNG<br />
* Fix a typo in exempi.c<br />
* Add basic support for storing LL_CREATOR in exempi.c<br />
* In the case that the system locale is unset (therefore, is of value "C"), assume English<br />
* Fix a bug with the TagLib module: some lists were not NULL-terminated<br />
* Use calloc() instead of malloc()+memset() in read_license.c; this improves efficiency and closes a crasher on amd64<br />
* Improve chooser_test.c so that it is not strict as to the *order* the results come back so long as they are the right licenses.<br />
* To help diagnose possible xdg_mime errors, if we detect the hopeless application/octet-stream MIME type, fprintf a warning to stderr.<br />
* Test that searching for unknown file types returns a NULL result rather than a segfault.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2008-12-25 03:46:43</wp:post_date>
		<wp:post_date_gmt>2008-12-25 03:46:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liblicense-081-the-bugfixiest-release-ever</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="embedding"><![CDATA[embedding]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="releases"><![CDATA[releases]]></category>
		<category domain="category" nicename="sanity"><![CDATA[sanity]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>New validator released!</title>
		<link>http://labs.creativecommons.org/2009/01/06/new-validator-released/</link>
		<pubDate>Tue, 06 Jan 2009 18:52:16 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This past summer, Hugo Dworak worked with us (<a href="http://labs.creativecommons.org/2008/05/26/license%E2%80%91oriented-metadata-validator-and-viewer-the-development-has-just-started/">thanks to Google Summer of Code</a>) on a new validator. This work was greatly overdue, and we are very pleased that Google could fund Hugo to work on it. Our previous validator had not been updated to reflect our new metadata standards, so we disabled it some time ago to avoid creating further confusion. The textbook on CC metadata is the <a href="http://wiki.creativecommons.org/CcREL">"Creative Commons Rights Expression Language", or ccREL</a>, which specifies the use of RDFa on the web. (If this sounds like keyword soup, rest assured that the <a href="http://creativecommons.org/license/">License Engine</a> generates HTML that you can copy and paste; that HTML is fully compliant with ccREL.) We hoped Hugo's work on a new validator would let us offer a validator to the Creative Commons community so that publishers can test their web pages to make sure they encode the information they intended.</p>
<p>Hugo's work was a success; he <a href="http://labs.creativecommons.org/2008/08/16/license-oriented-metadata-validator-and-viewer-summertime-is-winding-up/">announced in August 2008 a test version of the validator</a>. He built on top of the work of others: the new validator uses the <a href="http://pylonshq.com/">Pylons</a> web framework, <a href="http://code.google.com/p/html5lib/">html5lib</a> for HTML parsing and tokenizing, and <a href="http://rdflib.net/">RDFlib</a> for working with RDF. He shared his source code under the recent free software license built for network services, <a href="http://www.fsf.org/licensing/licenses/agpl-3.0.html">AGPLv3</a>.</p>
<p>So I am happy to announce that the test period is complete, and we are now running the new code at <a href="http://validator.creativecommons.org/">http://validator.creativecommons.org/</a>. Our thanks go out to Hugo, and we look forward to the new validator gaining some use as well as hearing your feedback. If you want to contribute to the validator's development or check it out for any reason, take a look at <a href="http://wiki.creativecommons.org/CcValidator">the documentation</a> on the CC wiki.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2009-01-06 18:52:16</wp:post_date>
		<wp:post_date_gmt>2009-01-06 18:52:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-validator-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>103</wp:comment_id>
			<wp:comment_author><![CDATA[New web metadata validator released - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org/weblog/entry/11985</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-07 04:29:44</wp:comment_date>
			<wp:comment_date_gmt>2009-01-07 04:29:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] (This was originally published on CC Labs.) [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Banshee - Now with Creative Commons support! (devel)</title>
		<link>http://labs.creativecommons.org/2009/01/14/banshee-now-with-creative-commons-support-devel/</link>
		<pubDate>Wed, 14 Jan 2009 22:43:24 +0000</pubDate>
		<dc:creator><![CDATA[greg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=275</guid>
		<description></description>
		<content:encoded><![CDATA[Great news from <a href="http://gburt.blogspot.com/">Gabriel Burt</a>, lead developer for the Open Source media player <a href="http://banshee-project.org/">Banshee</a>:

<a href="http://labs.creativecommons.org/files/2009/01/banshee-cc.png"><img class="alignnone size-medium wp-image-276" title="banshee-cc" src="http://labs.creativecommons.org/files/2009/01/banshee-cc.png" alt="" width="300" height="158" /></a><br /> (click for larger version) <br />

<strong>Search based on the license of a song/album with direct support of displaying CC license logos!</strong>

More details available on <a href="http://gburt.blogspot.com/2009/01/catching-up.html">Gabriel's blog post</a>.

This feature is slated to be in Banshee 1.6 but you can play with Gabriel's development branch which has this feature thanks to the beauty of git.

<code>git clone <a href="http://banshee-project.org/~gburt/banshee.git">http://banshee-project.org/~gburt/banshee.git</a></code>

Technical notes of the feature: Gabriel wrote his own parser for extracting the license information from the files.  That was needed because there is currently not a Mono port of <a href="http://wiki.creativecommons.org/liblicense">liblicense</a>, a library which reads and writes license metadata to a wide variety of files.  But now if anyone wants to help out and do the port to Mono you have an example of how to access this information via Mono.

Lets keep this ball rolling and get license read/write support in more applications!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2009-01-14 22:43:24</wp:post_date>
		<wp:post_date_gmt>2009-01-14 22:43:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>banshee-now-with-creative-commons-support-devel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC Technology Summit Video</title>
		<link>http://labs.creativecommons.org/2009/01/16/cc-technology-summit-video/</link>
		<pubDate>Fri, 16 Jan 2009 23:58:47 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=303</guid>
		<description></description>
		<content:encoded><![CDATA[In December we held our second <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2008-12-12">CC Technology Summit at MIT</a> in Cambridge, MA.  I think the day provided a great perspective on what we're doing at CC and how others are building a real community around it.  If you weren't able to attend, we now have <a href="http://www.archive.org/details/cc-techsummit-200812-audio">audio</a> and <a href="http://labs.creativecommons.org/videos/tech-summit-dec-2008">video</a> available.  And if you missed <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2008-06-18">the first one</a>, the <a href="http://labs.creativecommons.org/videos/cc-technology-summit-june-2008/">video</a> for that is available as well.

We're currently thinking about plans for the next event; if you have feedback or suggestions, email them to <a href="mailto:techsummit@creativecommons.org">techsummit@creativecommons.org</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2009-01-16 23:58:47</wp:post_date>
		<wp:post_date_gmt>2009-01-16 23:58:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-technology-summit-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>104</wp:comment_id>
			<wp:comment_author><![CDATA[CC Technology Summit Video Available - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org/weblog/entry/12260</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2009-01-17 00:01:20</wp:comment_date>
			<wp:comment_date_gmt>2009-01-17 00:01:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] noted on the CC Labs blog, video and audio from the December CC Technology Summit is now available:  In [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>LicenseChooser 0.96 released: Fixes Share-Alike help text </title>
		<link>http://labs.creativecommons.org/2009/03/16/licensechooser-096-released-fixes-share-alike-help-text/</link>
		<pubDate>Mon, 16 Mar 2009 18:53:25 +0000</pubDate>
		<dc:creator><![CDATA[asheesh]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=306</guid>
		<description></description>
		<content:encoded><![CDATA[We just noticed that <a href="http://wiki.creativecommons.org/LicenseChooser.js">LicenseChooser.js</a> 0.95 and earlier had the wrong help
text for "Share Alike". Due to a copy and pasting error, if you hold your
mouse over "Require Share Alike" icon in the old demos (e.g.
<a href="http://labs.creativecommons.org/demos/jswidget/tags/0.95/example_web_app/">http://labs.creativecommons.org/demos/jswidget/tags/0.95/example_web_app/</a>), you will see a copy of the help text that corresponds to "Prohibit Commercial Use".

Eek.

LicenseChooser.js 0.96, as you can see at <a href="http://labs.creativecommons.org/demos/jswidget/tags/0.96/example_web_app/">http://labs.creativecommons.org/demos/jswidget/tags/0.96/example_web_app/</a>, fixes this problem.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2009-03-16 18:53:25</wp:post_date>
		<wp:post_date_gmt>2009-03-16 18:53:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>licensechooser-096-released-fixes-share-alike-help-text</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC Technology Summit 3: Turin, Italy</title>
		<link>http://labs.creativecommons.org/2009/03/29/cc-technology-summit-3-turin-italy/</link>
		<pubDate>Sun, 29 Mar 2009 16:03:04 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=308</guid>
		<description></description>
		<content:encoded><![CDATA[As you may have see on the <a href="http://creativecommons.org/weblog/">blog</a> or one of the mailing lists, we've <a href="http://creativecommons.org/weblog/entry/13682">announced</a> the third CC Technology Summit.  The CFP is currently open (presentations due April 24) and full details are <a href="http://wiki.creativecommons.org/Creative_Commons_Technology_Summit_2009-06-26">in the wiki</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2009-03-29 16:03:04</wp:post_date>
		<wp:post_date_gmt>2009-03-29 16:03:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-technology-summit-3-turin-italy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="post_tag" nicename="techsummit"><![CDATA[techsummit]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Enumeration descriptions in CC Web Services</title>
		<link>http://labs.creativecommons.org/2009/04/02/enumeration-descriptions-in-cc-web-services/</link>
		<pubDate>Thu, 02 Apr 2009 21:14:05 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[We had a request come in from a developer using the <a href="http://api.creativecommons.org/">CC web services</a> for better contextual information about the choices users make when selecting a license.  In particular, they wanted to present users with information about what <em>"ShareAlike"</em> means.  As I dug into it I realized that the existing <code>&lt;description&gt;</code> we provided for the questions themselves are... well, bad.  I can only imagine how hard it'd be to craft a user interface using <strong>those</strong> as help text.

I just pushed an update to the <a href="https://api.creativecommons.org/docs/readme_dev.html">development version</a> of the API that adds <code>&lt;description&gt;</code> elements to the individual <code>&lt;enum&gt;</code> elements.  These map to the help pop-ups we use on the main license chooser.  If all seems well we'll push this down to <a href="https://api.creativecommons.org/docs/readme_15.html">1.5</a> as well.

I should also note that this update includes two new, very nice (for me) improvements:

<ul>
	<li>I finally landed Frank's test suite work from last summer.  We had intended to replace the whole API with a leaner version, but that's still in the works.  So in the interim, we have a test suite and I'm not afraid of change anymore (on this project at least).</li>
	<li>I've updated the documentation to use <a href="http://sphinx.pocoo.org/">Sphinx</a>.  <a href="http://en.wikipedia.org/wiki/ReStructuredText">ReStructured Text</a> is the secret weapon of many a Python project; Sphinx makes it even more powerful, providing a set of directives and tools to generate something that looks, well, at least decent.</li>
</ul>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2009-04-02 21:14:05</wp:post_date>
		<wp:post_date_gmt>2009-04-02 21:14:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>enumeration-descriptions-in-cc-web-services</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="rst"><![CDATA[rst]]></category>
		<category domain="post_tag" nicename="sphinx"><![CDATA[sphinx]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Updates to CC Network OpenID Provider</title>
		<link>http://labs.creativecommons.org/2009/04/13/updates-to-cc-network-openid-provider/</link>
		<pubDate>Mon, 13 Apr 2009 22:44:29 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[We received a couple bug reports over the weekend about the CC Network OpenID provider.  Users were seeing a situation where they were asked to log into the CC Network with a username that was <em>similar</em>to their's, but not quite right &mdash; specifically, the final character was omitted.  When they put in their correct username and password they were just redirected to the login screen again and again.

After some digging we arrived at <a href="http://code.creativecommons.org/issues/issue308">Issue 308</a>.  The problem occurs when a non-compliant OpenID-enabled site asks for the OpenID URL and the user supplies something that <em>should</em> work, but isn't canonical.  For example, my CC Network profile is at <code>https://creativecommons.net/nathan/</code>.  I should be able to use any of the following as my OpenID and have the site get to the canonical version:

<ul>
	<li>creativecommons.net/nathan</li>
	<li>http://creativecommons.net/nathan</li>
	<li>http://creativecommons.net/nathan/</li>
	<li>https://creativecommons.net/nathan</li>
</ul>

The process of getting from one of these to the canonical version is called <a href="http://openid.net/specs/openid-authentication-2_0.html#normalization">normalization</a>.

So if an OpenID enabled site (such as, say, sourceforge.net or intensedebate.com) doesn't do normalization, the user ends up asking to be validated for some URL other than their own canonical identity.  And our server kicks that back as an invalid OpenID URL.  Intense Debate seems to be aware of the issue; someone already reported it on their <a href="http://getsatisfaction.com/intensedebate/topics/openid_url_must_match_exactly_when_logging_in">Get Satisfaction forum</a>.

We briefly considered working around this bug (and it is a bug) but ultimately decided against it.  It didn't "smell" right and after some thought we realized that it could cause users more problems down the road.  For example, if we implemented the proposed fix (making the trailing slash optional, which would have fixed it in most cases, it appears), a user could end up logging in at a broken site with the URL <code>https://creativecommons.net/foo</code>.  If that site later fixed their code to correctly perform normalization, the user would suddenly be asking to validate a <em>different</em> URL -- <code>https://creativecommons.net/foo<strong>/</strong></code>. I suppose a site that has this bug and needs to fix it could normalize all the OpenID URLs stored in their database before pushing out the patch.  

Instead we went ahead and added an error screen so that instead of the completely frustrating never-ending login loop, you at least get a hint that something's wrong (and how to fix it).

The moral of the story? If you run into a problem logging into an OpenID-enabled site, first make sure you're using your "real" URL (and if you still have a problem, at least with your CC Network ID, please <a href="http://code.creativecommons.org/issues/issue?@template=item">report it</a>).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2009-04-13 22:44:29</wp:post_date>
		<wp:post_date_gmt>2009-04-13 22:44:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>updates-to-cc-network-openid-provider</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-network"><![CDATA[CC Network]]></category>
		<category domain="post_tag" nicename="openid"><![CDATA[openid]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>105</wp:comment_id>
			<wp:comment_author><![CDATA[Allogarage]]></wp:comment_author>
			<wp:comment_author_email>nicolas.chevallier@b2b-net.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.allogarage.fr/</wp:comment_author_url>
			<wp:comment_author_IP>88.178.176.141</wp:comment_author_IP>
			<wp:comment_date>2009-11-22 15:45:01</wp:comment_date>
			<wp:comment_date_gmt>2009-11-22 15:45:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the tips! I never read something about the normalization process. It's important for developpers to read specs because this simple mistake could be a serious problem in next years.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>OpenOffice.org Add-in Updates - GSoC 2009</title>
		<link>http://labs.creativecommons.org/2009/07/06/openofficeorg-add-in-updates-gsoc-2009/</link>
		<pubDate>Mon, 06 Jul 2009 15:22:02 +0000</pubDate>
		<dc:creator><![CDATA[nimal]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[I've been working on the GSoC 2009 project, where I'm working on certain updates to the existing Creative Commons Add-in for OpenOffice.org. This project is mentored by <a href="http://creativecommons.org/about/people/#31">Nathan Yergler</a>.

The main goals for this project is to provide the following updates to the existing plugin.
<ul>
	<li>Update the codebase to the OOo 3 SDK</li>
	<li>The license selection UI could be refined to provide help around what each option means (”what is Share Alike”).</li>
	<li>Display license information when opening CC licensed documents</li>
	<li>Internationalization – prepare the code for translation and write the scripts to integrate PO files prepared by translators</li>
	<li>Support for OOo Draw</li>
	<li>Add support for CC0</li>
	<li>Make a release incorporating Flickr Image Re-Use for OpenOffice.org.</li>
</ul>

As there are many distinct tasks, I'm working on complete the most I can. I have been struggling a bit in the past couple of weeks with my progress, but I'm now bouncing back and coming back to track.

I hope I'll be able to present the CC community with an updated version of the Add-in at the end of the project completion.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2009-07-06 15:22:02</wp:post_date>
		<wp:post_date_gmt>2009-07-06 15:22:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>openofficeorg-add-in-updates-gsoc-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>git-svn with svn:externals</title>
		<link>http://labs.creativecommons.org/2009/07/21/git-svn-with-svnexternals/</link>
		<pubDate>Tue, 21 Jul 2009 18:16:10 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[We've been slowly but surely moving projects from Subversion to git, but there are still large pieces of code that are sort of deadlocked in Subversion.  We make extensive use of <code>svn:externals</code> in our repository as a way to pull in dependencies and shared code (both within our repository and from other repositories, like <a href="http://pypi.python.org/pypi/zc.buildout">zc.buildout's</a> bootstrap).  This means that in order to convert something like the license engine (cc.engine) we need to also convert cc.license (which uses license_xsl), license.rdf and i18n.  Of course, the <a href="http://api.creativecommons.org">API</a> also uses license_xsl and the main site uses license.rdf.  Taking the time to move all of that wholesale isn't something we have the time or desire to do right now.  It's not just converting the repository -- that's the easy part; converting the deployments and surrounding tools is the real pain.

Last week I decided I wanted to use git to work on code currently in Subversion (my supporting tool chain really is that much better for git) and decided to check it out using git-svn.  And once again I was burned by our use of svn:externals.  So I wrote <strong>gsc</strong> -- git subversion clone.  You can read more details <a href="http://yergler.net/blog/2009/07/21/git-svn-and-svnexternals/">on my blog</a> or find the code <a href="http://gitorious.org/gsc">on gitorious</a>.

Incidentally, cleaning up that dependency graph is very much on our radar.  I'm hoping to land work that we started last summer this fall that will remove some duplicated code and clean up the dependencies of the remaining code.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2009-07-21 18:16:10</wp:post_date>
		<wp:post_date_gmt>2009-07-21 18:16:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-svn-with-svnexternals</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="gcs"><![CDATA[gcs]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="git-svn"><![CDATA[git-svn]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>License Engine path changes</title>
		<link>http://labs.creativecommons.org/2009/07/21/license-engine-path-changes/</link>
		<pubDate>Tue, 21 Jul 2009 23:19:57 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=332</guid>
		<description></description>
		<content:encoded><![CDATA[We just pushed out a resolution to <a href="http://code.creativecommons.org/issues/issue381">Issue 381</a>, updating the path to the license engine.  The license engine (the <a href="http://code.creativecommons.org/viewsvn/cc.engine/">cc.engine</a> application) is responsible for handling the license selection portions of the website as well as the deeds.  Some background may be helpful.

When we launched CC0 earlier this year we made a conscious decision to locate the deed on a different path than the rest of the license deeds.  CC0 is a <em>waiver</em>, not a <em>license</em>, so the deed appropriately is located at <a href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</a> (as opposed to the license deeds which URLs that look like <a href="http://creativecommons.org/licenses/by/3.0/">http://creativecommons.org/licenses/by/3.0/</a>).  At the time we decided to leave the CC0 chooser in the same group as the other choosers.  This unfortunately gave us a URL that contained <code>license</code> in it -- <code>http://creativecommons.org/license/zero/</code> -- which caused confusion for some users.  Is it a license or isn't it?

It's not.  

So starting this afternoon we've relocated the license engine to <a href="http://creativecommons.org/choose">http://creativecommons.org/choose</a> and CC0 to <a href="http://creativecommons.org/choose/zero">http://creativecommons.org/choose/zero</a>.  Redirects are in place so you shouldn't notice any changes.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2009-07-21 23:19:57</wp:post_date>
		<wp:post_date_gmt>2009-07-21 23:19:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-engine-path-changes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Developers landing page revamp</title>
		<link>http://labs.creativecommons.org/2009/08/11/developers-landing-page-revamp/</link>
		<pubDate>Tue, 11 Aug 2009 20:08:22 +0000</pubDate>
		<dc:creator><![CDATA[greg]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=336</guid>
		<description></description>
		<content:encoded><![CDATA[If you haven't looked at the <a href="http://wiki.creativecommons.org/Developers">Developers</a> landing page on the Creative Commons wiki lately, you're missing out!  We've recently put a lot of effort into reorganizing the information, making the important things easier to find, and overall just making the whole place a bit more welcoming.

<img src="http://labs.creativecommons.org/files/2009/08/developer_redesign_screenshot1.png" alt="developer_redesign_screenshot" title="developer_redesign_screenshot" width="500" height="387" class="alignnone size-full wp-image-342" />

First of all, we've made the semantic split between information for <a href="http://wiki.creativecommons.org/Desktop_Integration">desktop-based development</a> and <a href="http://wiki.creativecommons.org/Web_Integration">web-based development</a>.  At each page there is a list (and short description) of the various tools to help you integrate CC-license metadata functionality and a short list of <a href="http://wiki.creativecommons.org/Developer_challenges">open Developer Challenges</a>.  These challenges are things the developer community think would be cool to have; a wishlist everyone can help with!

Also, we're starting to produce some more "HowTo" guides for developers who are interested in the best practices of integrating CC-license metadata.  Thus far we have one for <a href="http://wiki.creativecommons.org/Web_Integration/HowTo">Web Integration</a> which lists the various ways a service could support CC licenses with best practices examples (pictoral and code) of how they did it.  See, for example, the page on <a href="http://wiki.creativecommons.org/Web_Integration/FileUploadExample">adding license choice when uploading content</a>.

We hope this redesign will make it easier for developers to find the information they need to improve their services.  If you have any other suggestions, don't hesitate to send an email to <a href="mailto:greg@creativecommons.org">greg@creativecommons.org</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date>2009-08-11 20:08:22</wp:post_date>
		<wp:post_date_gmt>2009-08-11 20:08:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>developers-landing-page-revamp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Creative Commons Drupal Module -- GSoC 2009</title>
		<link>http://labs.creativecommons.org/2009/09/03/creative-commons-drupal-module-gsoc-2009/</link>
		<pubDate>Thu, 03 Sep 2009 00:29:05 +0000</pubDate>
		<dc:creator><![CDATA[blaise]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[This past year was my last at the <a href="http://individual.utoronto.ca/balleyne">University of Toronto</a>, making this summer my last chance to participate in the Google Summer of Code. I searched hard for a project and mentor organization that would suit my interests, and when I noticed that the <a href="http://drupal.org/project/creativecommons">Creative Commons Drupal module</a> was in need of some developer love, I knew exactly what I wanted to spend my summer doing. With <a href="http://creativecommons.org/about/people#112">John Doig</a> as my CC mentor, and <a href="http://drupal.org/user/48877">Kevin Reynen</a> (the module's maintainer and initial author) as an unofficial Drupal mentor, I've been privileged to have spent the past few months updating and extending the module.

A couple years ago, development for Drupal 4.7 was begun, but it was never quite completed. <a href="http://drupal.org/project/creativecommons_lite">CC Lite</a> came to be the reliable choice for Drupal 6. However, CC Lite's scope is limited -- it allows you to attach a license to content in Drupal, but that's about it. The main CC module's vision is broader -- to fully integrate CC technology with the Drupal platform -- and I hope I've helped to realize that just a little.

Some of the module's features:
<ul>
<li>it uses the CC API for license selection and information (so, for example, when <a href="http://creativecommons.org/weblog/entry/15990">new license versions are released</a>, they become available on your Drupal site automatically)</li>
<li>you can set a site-wide default license/jurisdictoin, and user's can set their own default license/jurisdiction</li>
<li>ccREL metadata is supported, output in RDFa (and, optionally, RDF/XML for legacy systems)</li>
<li>supports CC0, along with the 6 standard licenses and the Public Domain Certification tool</li>
<li>you can control which licenses and metadata fields are available to users</li>
<li>basic support for the Views API has been added (including a default /creativecommons view)</li>
<li>there's a CC site search option</li>
</ul>

The module is still listed as a beta release, as some folks have been submitting bug fixes and patches over the past few weeks, though it's quite usable. Special thanks to <a href="http://drupal.org/user/463154">Turadg Aleahmad</a>, who's helped with a lot of the recent bug fixes towards the end of the GSoC term, and committed to being active in future development. If you're into Drupal development, we could use help with testing, and any translations would be greatly appreciated too.

Right now, the focus is on getting to a stable release, but we've got lots of ideas for the future too. Thanks to John and Kevin for their support through the summer, and to Turadg for his recent help. I look forward to seeing the module put to good use!

<a href="http://drupal.org/project/creativecommons/"><strong>Check it out!</strong></a>

<em>I'm a musician, writer, software developer, free culture / free software advocate and recent graduate of the University of Toronto -- get in touch at <a href="http://blaise.ca/">http://blaise.ca/</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2009-09-03 00:29:05</wp:post_date>
		<wp:post_date_gmt>2009-09-03 00:29:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-commons-drupal-module-gsoc-2009</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="drupal"><![CDATA[drupal]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC @ Mozilla Service Week</title>
		<link>http://labs.creativecommons.org/2009/09/09/cc-mozilla-service-week/</link>
		<pubDate>Wed, 09 Sep 2009 22:36:54 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=373</guid>
		<description></description>
		<content:encoded><![CDATA[Next week is <a href="http://mozillaservice.org">Mozilla Service Week</a> and Creative Commons is participating by hosting a week long help desk in <a href="http://wiki.creativecommons.org/IRC">IRC</a>.  You can find more details on our <a href="http://creativecommons.org/weblog/entry/17450">earlier blog post</a> or <a href="http://wiki.creativecommons.org/Mozilla_Service_Week">in the wiki</a>.  Several CC staff members and community volunteers will be available during the week to answer questions about using CC licenses and the associated tools.  We'll be answering questions about:

<ul>
	<li>General CC help</li>
	<li>CC technology (ccREL and software projects)</li>
	<li>Where and how to publish CC works</li>
	<li>Where and how to find CC works</li>
	<li>CC in education and science </li>
</ul>

If you'd like to help out and educate others about using CC licenses and tools, you can sign up on the <a href="http://wiki.creativecommons.org/Mozilla_Service_Week#Volunteers">wiki page</a>.  ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date>2009-09-09 22:36:54</wp:post_date>
		<wp:post_date_gmt>2009-09-09 22:36:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-mozilla-service-week</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="community"><![CDATA[community]]></category>
		<category domain="post_tag" nicename="irc"><![CDATA[irc]]></category>
		<category domain="post_tag" nicename="mozilla-service"><![CDATA[mozilla service]]></category>
		<category domain="post_tag" nicename="mozservice09"><![CDATA[mozservice09]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>One click PayPal donations with CiviCRM</title>
		<link>http://labs.creativecommons.org/2009/11/09/one-click-paypal-donations-with-civicrm/</link>
		<pubDate>Mon, 09 Nov 2009 17:28:39 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=383</guid>
		<description></description>
		<content:encoded><![CDATA[About a month ago CC launched its <a href="https://support.creativecommons.org/donate">annual Fall fundraising campaign</a>.  Along with it we also rolled out a streamlined donation process.  I <a href="http://civicrm.org/node/660">wrote about this</a> on the CiviCRM blog, and also wrote up <a href="http://wiki.creativecommons.org/OneClickDonate.php">some documentation</a> on the CC Wiki.  This new donation method required some custom code, and leveraging an existing CiviCRM <a href="http://svn.civicrm.org/civicrm/trunk/bin/ContributionProcessor.php">script</a> written by <a href="http://civicrm.org/blog/810">Donald Lobo</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>383</wp:post_id>
		<wp:post_date>2009-11-09 17:28:39</wp:post_date>
		<wp:post_date_gmt>2009-11-09 17:28:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-click-paypal-donations-with-civicrm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>108</wp:comment_id>
			<wp:comment_author><![CDATA[Google Checkout support added to CC&#8217;s donation page - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/03/18/google-checkout-support-added-to-ccs-donation-page/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-03-18 16:17:54</wp:comment_date>
			<wp:comment_date_gmt>2010-03-18 16:17:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] number of months ago CC launched a simplification of the donation process on the CC contribution page. At that time, only PayPal was supported, but [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Understanding the State of Sanity (via whiteboards and ascii art)</title>
		<link>http://labs.creativecommons.org/2009/12/18/understanding-the-state-of-sanity-via-whiteboards-and-ascii-art/</link>
		<pubDate>Fri, 18 Dec 2009 20:14:19 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[Since I started working at Creative Commons a number of months ago, I've been primarily focused on something we refer to as the "sanity overhaul".  In this case, sanity refers to try and simplify what is kind of a long and complicated code history surrounding Creative Commons' licenses, both as in terms of the internal tooling to modifying, deploying, and querying licenses and the public facing web interfaces for viewing and downloading them.  Efforts toward the sanity overhaul started before I began working here, executed by both Nathan Yergler and Frank Tobia, but for a long time they were in a kind of state of limbo as other technical efforts had to be dedicated to other important tasks.  The good news is that my efforts have been permitted to be (almost) entirely dedicated toward the sanity overhaul since I have started, and we are reaching a point where all of those pieces are falling into place and we are very close to launch.

To give an idea of the complexity of things as they were and how much that complexity has been reduced, it is useful to look at some diagrams.  When Nathan Kinkade first started working at Creative Commons (well before I did), Nathan Yergler took some time to draw on the whiteboard what the present infrastructure looked like:

<a href="http://www.flickr.com/photos/nathan_y/2347987536/sizes/m/in/photostream/"><img class="alignnone" title="The Present" src="http://farm3.static.flickr.com/2297/2347987536_5515b1f963.jpg" alt="" width="500" height="375" /></a>

as well as what he envisioned the "glorious future" (sanity) would look like:

<a href="http://www.flickr.com/photos/nathan_y/2347986388/sizes/m/in/photostream/"><img class="alignnone" title="The Glorious Future (Sanity)" src="http://farm4.static.flickr.com/3267/2347986388_dd1c466a5e.jpg" alt="" width="500" height="375" /></a>

When I started, the present infrastructure had shifted a little bit further still, but the vision of the "glorious future" (sanity) had mostly stayed the same.

This week (our "tech all-hands week") I gave a presentation on the "State of Sanity".  Preparing for that presentation I decided to make a new diagram.  Since I was already typing up notes for the presentation in Emacs, I thought I might try and make the most minimalist and clear ASCII art UML-like diagram that I could (my love of ASCII art is well known to anyone who hangs out regularly in #cc on Freenode).  I figured that I would later convert said diagram to a traditional image using <a href="http://inkscape.org">Inkscape</a> or <a href="http://projects.gnome.org/dia/">Dia</a>, but I was so pleased with the end result that I just ended up using the ASCII version:
<pre>*******************
* CORE COMPONENTS *
*******************

      .--.
     ( o_o)
     /'---
     |USER| --.
     '----'   |
              |
              V
         ___   .---.
       .'   ','     '.
     -'               '.
    (     INTARWEBS     )
     '_.     ____    ._'
        '-_-'    '--'
              |
              |
              V
      +---------------+  Web interface user
      |   cc.engine   |  interacts with
      +---------------+
              |
              |
              V
      +---------------+  Abstraction layer for
      |  cc.license   |  license querying and
      +---------------+  pythonic license API
              |
              |
              V
      +---------------+  Actual rdf datastore and
      |  license.rdf  |  license RDF operation tools
      +---------------+  

****************
* OTHER PIECES *
****************

  +--------------+
  |  cc.i18npkg  |
  | .----------. |
  | | i18n.git | |
  +--------------+

********************************************
* COMPONENTS DEPRECATED BY SANITY OVERHAUL *
********************************************

  +------------+  +-----------+  +---------+  +-------------+
  |    old     |  | old zope  |  | licenze |  | license_xsl |
  | cc.license |  | cc.engine |  +---------+  +-------------+
  +------------+  +-----------+</pre>
This isn't completely descriptive on its own, and I will be annotating as I include it in part of the <a href="http://sphinx.pocoo.org/">Sphinx</a> developer docs we are bundling with the new cc.engine.  But I think that even without annotation, it is clear how much cleaner the new infrastructure is at than the old "present infrastructure" whiteboard drawing, which means that we are making good progress!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2009-12-18 20:14:19</wp:post_date>
		<wp:post_date_gmt>2009-12-18 20:14:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-the-state-of-sanity-via-whiteboards-and-ascii-art</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ascii-art"><![CDATA[ascii art]]></category>
		<category domain="post_tag" nicename="cc-engine"><![CDATA[cc.engine]]></category>
		<category domain="post_tag" nicename="cclicense"><![CDATA[cc.license]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="post_tag" nicename="sanity"><![CDATA[sanity]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>110</wp:comment_id>
			<wp:comment_author><![CDATA[Denise Steinbock]]></wp:comment_author>
			<wp:comment_author_email>dsteinbock@mac.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.131.3.102</wp:comment_author_IP>
			<wp:comment_date>2009-12-19 16:26:53</wp:comment_date>
			<wp:comment_date_gmt>2009-12-19 16:26:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This does look simpler.  Not sure what it means, but what is important is that you know what it means.  I am proud of the work you are doing and that you are passionate about everything that you do.  I love you very much.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>111</wp:comment_id>
			<wp:comment_author><![CDATA[Denise Steinbock]]></wp:comment_author>
			<wp:comment_author_email>dsteinbock@mac.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>72.131.3.102</wp:comment_author_IP>
			<wp:comment_date>2009-12-19 16:28:17</wp:comment_date>
			<wp:comment_date_gmt>2009-12-19 16:28:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The old drawings remind me of our meetings at McLeodUSA.  You would have to be at the meeting to understand any of the drawings.  I miss those times.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>112</wp:comment_id>
			<wp:comment_author><![CDATA[Asheesh Laroia]]></wp:comment_author>
			<wp:comment_author_email>asheesh-not-at-creativecommons-dot-org@asheesh.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.asheesh.org/</wp:comment_author_url>
			<wp:comment_author_IP>67.247.133.24</wp:comment_author_IP>
			<wp:comment_date>2009-12-26 05:57:11</wp:comment_date>
			<wp:comment_date_gmt>2009-12-26 05:57:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Our glorious future awaits.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>113</wp:comment_id>
			<wp:comment_author><![CDATA[Caching deeds for peak performance - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/01/06/caching-deeds-for-peak-performance/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-01-06 20:10:33</wp:comment_date>
			<wp:comment_date_gmt>2010-01-06 20:10:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Chris mentioned, he&#8217;s been working on improving the license chooser, among other things simplifying it and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>114</wp:comment_id>
			<wp:comment_author><![CDATA[cc.engine and web non-frameworks - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/01/13/cc-engine-and-web-non-frameworks/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-01-13 22:04:45</wp:comment_date>
			<wp:comment_date_gmt>2010-01-13 22:04:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] sanity overhaul has included a number of reworkings, one of them being a rewrite of cc.engine, which in its [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>115</wp:comment_id>
			<wp:comment_author><![CDATA[CC REST API Updated for Public Domain Mark - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/01/13/cc-rest-api-updated-for-public-domain-mark/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-01-13 18:42:15</wp:comment_date>
			<wp:comment_date_gmt>2011-01-13 18:42:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the past year, there has been a collaborative effort by the CC Tech team to perform a &#8220;sanity overhaul&#8221; on the tools and libraries that much of the CC Tech infrastructure relies on. Among the [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>116</wp:comment_id>
			<wp:comment_author><![CDATA[Converting cc.engine from ZPT to Jinja2 and i18n logical keys to english keys - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/09/02/converting-cc-engine-from-zpt-to-jinja2-and-i18n-logical-keys-to-english-keys/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-09-02 22:16:59</wp:comment_date>
			<wp:comment_date_gmt>2011-09-02 22:16:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] now I&#8217;m in the middle of retooling of our translation infrastructure. cc.engine and related tools have a long, complex history (dating back, as I understand, to TCL scripts running on AOL server [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Caching deeds for peak performance</title>
		<link>http://labs.creativecommons.org/2010/01/06/caching-deeds-for-peak-performance/</link>
		<pubDate>Wed, 06 Jan 2010 20:10:31 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=401</guid>
		<description></description>
		<content:encoded><![CDATA[As Chris <a href="http://labs.creativecommons.org/2009/12/18/understanding-the-state-of-sanity-via-whiteboards-and-ascii-art/">mentioned</a>, he's been working on improving the <a href="http://creativecommons.org/choose/">license chooser</a>, among other things simplifying it and making it a better behaved <a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">WSGI</a> citizen.  That code also handles generating the license deeds.  For performance reasons we like to serve those from static files; I <a href="http://yergler.net/blog/2010/01/05/caching-wsgi-applications-to-disk/">put together some details</a> about <a href="http://pypi.python.org/pypi/wsgi_cache">wsgi_cache</a>, a piece of WSGI middleware I wrote this week to help with this, on my <a href="http://yergler.net/blog/">personal blog</a>:

<blockquote>The idea behind wsgi_cache is that you create a disk cache for results, caching only the body of the response. We only cache the body for a simple reason—we want something else, something faster, like Apache or other web server, to serve the request when it’s a cache hit. We’ll use mod_rewrite to send the request to our WSGI application when the requested file doesn’t exist; otherwise it hits the on disk version. And cache “invalidation” becomes as simple as rm (and as fine grained as single resources).</blockquote>

You can read the full entry <a href="http://yergler.net/blog/2010/01/05/caching-wsgi-applications-to-disk/">here</a>, find wsgi_cache <a href="http://pypi.python.org/pypi/wsgi_cache">documentation on PyPI</a>, and get the <a href="http://code.creativecommons.org/viewgit/wsgi_cache.git/">source code</a> from our git repository.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date>2010-01-06 20:10:31</wp:post_date>
		<wp:post_date_gmt>2010-01-06 20:10:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caching-deeds-for-peak-performance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="cc-engine"><![CDATA[cc.engine]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="wsgi"><![CDATA[wsgi]]></category>
		<category domain="post_tag" nicename="wsgi_cache"><![CDATA[wsgi_cache]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>MediaWiki, the application platform</title>
		<link>http://labs.creativecommons.org/2010/01/08/mediawiki-the-application-platform/</link>
		<pubDate>Fri, 08 Jan 2010 23:41:22 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=406</guid>
		<description></description>
		<content:encoded><![CDATA[As noted on the <a href="http://creativecommons.org/weblog/entry/18234">CC weblog</a> and <a href="http://gondwanaland.com/mlog/2009/10/06/acawiki/">elsewhere</a>, AcaWiki <a href="http://acawiki.org/AcaWiki:PressRelease-2009-10-07">launched</a> back in October.  I'm <a href="http://yergler.net/blog/2010/01/04/acawiki-on-building-emerging-applications/">much later noting the launch</a>, which is really inexcusable since CC did much of the tech buildout.  AcaWiki is only the most recent example of our work with <a href="http://mediawiki.org">Mediawiki</a> and <a href="http://semantic-mediawiki.org">Semantic Mediawiki</a>.  Both are critical pieces of our infrastructure here, and tools we'd like to see developed further.  One area that we've brainstormed but not attempted to implement is the idea of "actions"; you can read an overview of the idea <a href="http://yergler.net/blog/2010/01/07/actions-for-smw-applications-hypothetically/">here</a>.

The combination of Mediawiki and Semantic MediaWiki has allowed us to build applications faster and increase the effective number of "developers" on our team by lowering the barriers to entry.  I expect 2010 to be a really interesting year for wiki applications.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date>2010-01-08 23:41:22</wp:post_date>
		<wp:post_date_gmt>2010-01-08 23:41:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mediawiki-the-application-platform</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="post_tag" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="smw"><![CDATA[smw]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[Thoughts on Installing SMW &#8220;Applications&#8221; - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/02/02/thoughts-on-installing-smw-applications/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-02-02 15:59:55</wp:comment_date>
			<wp:comment_date_gmt>2010-02-02 15:59:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] posted a follow up to my previous notes on Semantic MediaWiki as an application platform. Installation and upgrade matters for an [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Conferencing with Asterisk on a $20/month Linode</title>
		<link>http://labs.creativecommons.org/2010/01/07/conferencing-with-asterisk-on-a-20month-linode/</link>
		<pubDate>Thu, 07 Jan 2010 19:59:46 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[For quite some years CC has been using <a href="http://www.freeconferencecall.com/">Free Conference Call</a> for tele-conferencing needs.  It generally worked pretty well, but people frequently complained of not being able to connect, or getting erroneously dropped into some empty conference room, and things of that nature ... to say nothing of the <a href="http://arstechnica.com/business/news/2007/03/attcingular-blocks-cellular-customers-from-free-conference-call-services.ars">questionable practices</a> used by services like Free Conference Call that allow them to make a service like that free.  Paid conferencing systems are actually quite expensive, and CC doesn't have the resources to be able to roll out some $10,000 to $20,000 custom conferencing system.  We ended up deciding to setup <a href="http://asterisk.org">Asterisk</a> on one of our servers.  We didn't really want to load one of our core servers, so we decided to give it a try on a $20/month <a href="http://linode.com">Linode</a> which we were already using for server monitoring.

Getting Asterisk installed on a Debian system is as easy as <code>$ apt-get install asterisk</code>.  Configuring it is covered by thousands of other articles on the Internet.  However, the problem is that Debian's default kernel is shipped with a particular configuration that is unacceptable for VoIP applications like Asterisk.  Debian's default kernel sets CONFIG_HZ=250, but for tele-conferencing with Asterisk to have acceptable audio quality it needs to be 1000.  No problem, building a custom Debian kernel package is pretty easy, <em>but</em> we wanted to run this on a Linode <a href="http://en.wikipedia.org/wiki/Virtual_private_server">VPS</a>, which is a <a href="http://www.xen.org">Xen</a> environment.  So the question became how to get Xen patches applied to the vanilla Debian kernel sources.  It may sound trivial, but it actually took me quite some time to work it out.  The first issue was resources -- a $20/month Linode doesn't have many, and the VPS ran out of memory while trying to compile the kernel.  I got around this by killing virtually every other un-needed process.  The next problem was what turned out to be a bug in the Debian <code>kernel-package</code> package, which took me quite a long time to find ... I didn't locate the bug in the code myself, but it took me a long time to realize it was a bug causing my problem and then find the existing bug report and a workaround.

I'll try to post here again soon with the actual steps needed to get this working, partly for the benefit of the community, but also to document what I did in case I ever have to do it again.  For now, suffice it to say that we are successfully running our own conferencing system using <a href="http://en.wikipedia.org/wiki/FOSS">FOSS</a> telephony software (Asterisk) on a $20/month VPS.  Not only does this give us much more control over the system, but it opened up the possibility for people to start calling in via VoIP (<a href="http://en.wikipedia.org/wiki/Session_Initiation_Protocol">SIP</a> or <a href="http://en.wikipedia.org/wiki/Inter-Asterisk_eXchange">IAX</a>!) software instead of dialing in through the <a href="http://en.wikipedia.org/wiki/Public_switched_telephone_network">PSTN</a>.  This saves CC even more money because dialing into our conferencing system through the PSTN is not free.  For that we had to find a good <a href="http://en.wikipedia.org/wiki/Direct_inward_dialing">DID</a> provider.   We ended up going with <a href="http://www.flowroute.com/">Flowroute</a> and so far I've been very happy with their service.  Their rates are very competitive (< 1¢/minute), and the web interface for account management is very clean and intuitive.  We have had conference calls with 20 people and the call quality has been just fine.  Not only that, we can set up as many conference rooms as we want and hold multiple conferences simultaneously.

<strong>UPDATE</strong>: <em>Wed Aug 11 21:56:24 UTC 2010</em> <a rel="nofollow" href="http://pc.de/pages/conferencing-with-asterisk-be">Belorussian</a> translation provided by Patricia Clausnitzer.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2010-01-07 19:59:46</wp:post_date>
		<wp:post_date_gmt>2010-01-07 19:59:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conferencing-with-asterisk-on-a-20month-linode</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Ryan Tucker]]></wp:comment_author>
			<wp:comment_author_email>ryan@hoopycat.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.hoopycat.com/</wp:comment_author_url>
			<wp:comment_author_IP>74.74.150.138</wp:comment_author_IP>
			<wp:comment_date>2010-01-08 18:03:37</wp:comment_date>
			<wp:comment_date_gmt>2010-01-08 18:03:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Did you need to use the dahdi_dummy module at all, or did the Debian package not require it?  I've been documenting various ways of accomplishing this with Ubuntu on a Linode, and it keeps getting tougher with each new Ubuntu release.  For what it's worth, I didn't end up needing to recompile the kernel, but I have done compiles on 360s before without OOMing.

The necessary Xen magic is in recent vanilla kernels, by the way, so that part shouldn't need patching with kernels after 2.6.24 or so ('tho you want at least 2.6.29 for stability).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Kinkade]]></wp:comment_author>
			<wp:comment_author_email>nkinkade@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org</wp:comment_author_url>
			<wp:comment_author_IP>207.244.182.103</wp:comment_author_IP>
			<wp:comment_date>2010-01-11 18:09:02</wp:comment_date>
			<wp:comment_date_gmt>2010-01-11 18:09:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, the zaptel and ztdummy modules were/are necessary.  The Debian asterisk package doesn't require the zaptel modules, but there are packages available.  How did you get around the CONFIG_HZ issue without a recompile, or do Ubuntu's default kernels ship with CONFIG_HZ=1000?  I tried using a stock Debian kernel (CONFIG_HZ=250), but call quality was pretty terrible.  Yes, the Xen patches are already included in the vanilla sources, but I still has to apply them with:

/usr/src/kernel-patches/all/2.6.26/apply/debian -a amd64 -f xen]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>128</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email>chrischolette@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>67.124.39.49</wp:comment_author_IP>
			<wp:comment_date>2010-02-06 20:29:38</wp:comment_date>
			<wp:comment_date_gmt>2010-02-06 20:29:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the info.

On the DID provider, didforsale.com has a flat rate did with up to 20 channels.  Not sure how they will hold up with 20 channels, but you might give them a try as free=good.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>129</wp:comment_id>
			<wp:comment_author><![CDATA[Ido Rosen]]></wp:comment_author>
			<wp:comment_author_email>cc@idorosen.com</wp:comment_author_email>
			<wp:comment_author_url>http://idorosen.com</wp:comment_author_url>
			<wp:comment_author_IP>67.80.49.163</wp:comment_author_IP>
			<wp:comment_date>2010-11-20 13:48:24</wp:comment_date>
			<wp:comment_date_gmt>2010-11-20 13:48:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've gotten this working on Debian and Ubuntu on a Linode, and created kernel headers for the latest Linode kernels to let other Linode users play with kernel modules already.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[mazpe]]></wp:comment_author>
			<wp:comment_author_email>lesterm@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.108.83.211</wp:comment_author_IP>
			<wp:comment_date>2011-05-23 14:07:40</wp:comment_date>
			<wp:comment_date_gmt>2011-05-23 14:07:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any chance on getting the details on how you got dahdi_dummy installed and how you change CONFIG_HZ to 1000? It will be a great post for FOSS]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>131</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Kinkade]]></wp:comment_author>
			<wp:comment_author_email>nkinkade@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org</wp:comment_author_url>
			<wp:comment_author_IP>207.244.187.134</wp:comment_author_IP>
			<wp:comment_date>2011-05-31 23:23:56</wp:comment_date>
			<wp:comment_date_gmt>2011-05-31 23:23:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[mazpe,

There is a follow up post to this one which should have the information you are looking for.

http://labs.creativecommons.org/2010/01/20/asterisk-on-a-20mo-linode-part-2/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Removing duplicate rows in MySQL</title>
		<link>http://labs.creativecommons.org/2010/01/12/removing-duplicate-rows-in-mysql/</link>
		<pubDate>Tue, 12 Jan 2010 18:06:21 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[There are thousands of articles out there on removing duplicate rows from a SQL database.  However, almost all of the first-page results of a search at Google for something like "<em>mysql remove duplicates</em>" involved creating temporary tables and other convoluted ways of solving the problem.  I'm posting this simple method here in the hope that it could simplify this process for someone else.  This is likely old news for people highly experienced with MySQL and SQL databases in general, but it's not that frequent that I have to tackle the duplicate row issue, so I post here for my own reference and that of others.  The idea is that you create a unique index on the table based on the columns that should not be duplicated.  MySQL will delete the duplicates in order to comply with the uniqueness of the index created.  You then simply remove the temporary index.

There was <a href="http://issues.civicrm.org/jira/browse/CRM-3901">a bug</a> in <a href="http://civicrm.org">CiviCRM</a> which was causing duplicate records in a particular table.  Find the duplicates:

<code>mysql> SELECT contact_id, contribution_id, receive_date, product_id, count(*) FROM civicrm_contribution_product JOIN civicrm_contribution ON civicrm_contribution_product.contribution_id = civicrm_contribution.id GROUP BY contribution_id, product_id having count(*) > 1 ORDER BY receive_date;</code>

Removing most of the duplicates:

<code>mysql> ALTER IGNORE TABLE civicrm_contribution_product ADD UNIQUE INDEX `tmp_index` (contribution_id, product_id);</code>

Removing the temporary index:

<code>mysql> ALTER TABLE civicrm_contribution_product DROP INDEX tmp_index;</code>

Thanks to Paul Swarthout's comments on <a href="http://www.databasejournal.com/features/mysql/article.php/10897_2201621_2/Deleting-Duplicate-Rows-in-a-MySQL-Database.htm">a thread</a> at <a href="http://www.databasejournal.com">databasejournal.com</a> for this simple solution.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date>2010-01-12 18:06:21</wp:post_date>
		<wp:post_date_gmt>2010-01-12 18:06:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>removing-duplicate-rows-in-mysql</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="civicrm"><![CDATA[civicrm]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[mysql]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>cc.engine and web non-frameworks</title>
		<link>http://labs.creativecommons.org/2010/01/13/cc-engine-and-web-non-frameworks/</link>
		<pubDate>Wed, 13 Jan 2010 22:04:43 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=432</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://labs.creativecommons.org/2009/12/18/understanding-the-state-of-sanity-via-whiteboards-and-ascii-art/">sanity overhaul</a> has included a number of reworkings, one of them being a rewrite of cc.engine, which in its previous form was a Zope 3 application.  Zope is a full featured framework and we already knew we weren't using many of its features (most notably the ZODB); we suspected that something simpler would serve us better, but weren't certain what.  Nathan suggested one of two directions: either we go with Django (although it wasn't clear this was "simpler", it did seem to be where a large portion of the python knowledge and effort in the web world is pooling), or we go with <a href="http://docs.repoze.org/bfg/">repoze.bfg</a>, a minimalist WSGI framework that pulls in some Zope components.  After some discussion we both agreed: repoze.bfg seemed like the better choice for a couple of reasons: for one, Django seemed like it would be providing quite a bit more than necessary... in cc.engine we don't have a traditional database (we do have an RDF store that we query, but no SQL), we don't have a need for a user model, etc... the application is simple: show some pages and apply some specialized logic.  Second, repoze.bfg built upon and reworked Zope infrastructure and paradigms, and so in that sense it looked like an easier transition.  So we went forward with that.

As I went on developing it, I started to feel more and more like, while repoze.bfg certainly had some good ideas, I was having to create a lot of workarounds to support what I needed.  For one thing, the URL routing is unordered and based off a ZCML config file.  It was at the point where, for resolving the license views, I had to route to a view method that then called other view methods.  We also needed a type of functionality as Django provides with its "APPEND_SLASH=True" feature.  I discussed with the repoze.bfg people, and they were accommodating to this idea and actually applied it to their codebase for the next release.  There were some other components they provided that were well developed but were not what we really needed (and were besides technically decoupled from repoze.bfg the core framework).  As an example, the <a href="http://chameleon.repoze.org/">chameleon zpt</a> engine is very good, but it was easier to just pull Zope's template functionality into our system than make the minor conversions necessary to go with chameleon's zpt.

Repoze was also affecting the Zope queryutility functionality in a way that made internationalization difficult.  Once again, this was done for reasons that make sense and are good within a certain context, but make did not seem to mesh well with our existing needs.  I was looking for a solution and reading over the repoze.bfg documentation when I came across these lines:
<blockquote>repoze.bfg provides only the very basics: URL to code mapping, templating, security, and resources. There is not much more to the framework than these pieces: you are expected to provide the rest.</blockquote>
But if we weren't using the templating, we weren't using the security model, and we weren't using the resources, the URL mapping was making things difficult, and those were the things that repoze.bfg was providing on top of what was otherwise just WSGI + WebOb, how hard would it be to just strip things down to just the WSGI + WebOb layer?  It turns out, not too difficult, and with an end result of significantly cleaner code.

I went through Ian Bicking's excellent tutorial <a href="http://pythonpaste.org/webob/do-it-yourself.html">Another Do-It-Yourself Framework</a> and applied those ideas to what we already had in cc.engine.  Within a night I had the entire framework replaced with a single module, cc/engine/app.py, which contained these few lines:
<pre>import sys
import urllib

from webob import Request, exc

from cc.engine import routing

def load_controller(string):
    module_name, func_name = string.split(':', 1)
    __import__(module_name)
    module = sys.modules[module_name]
    func = getattr(module, func_name)
    return func

def ccengine_app(environ, start_response):
    """
    Really basic wsgi app using routes and WebOb.
    """
    request = Request(environ)
    path_info = request.path_info
    route_match = routing.mapping.match(path_info)
    if route_match is None:
        if not path_info.endswith('/') 
                and request.method == 'GET' 
                and routing.mapping.match(path_info + '/'):
            new_path_info = path_info + '/'
            if request.GET:
                new_path_info = '%s?%s' % (
                    new_path_info, urllib.urlencode(request.GET))
            redirect = exc.HTTPTemporaryRedirect(location=new_path_info)
            return request.get_response(redirect)(environ, start_response)
        return exc.HTTPNotFound()(environ, start_response)
    controller = load_controller(route_match['controller'])
    request.start_response = start_response
    request.matchdict = route_match
    return controller(request)(environ, start_response)

def ccengine_app_factory(global_config, **kw):
    return ccengine_app</pre>
The main method of importance in this module is ccengine_app.  This is a really simple WSGI application: it takes routes as defined in cc.engine.routes (which uses the very enjoyable <a href="http://routes.groovie.org/">Routes</a> package) and sees if the current URL (or, the path_info portion of it) matches that URL.  If it finds a result, it loads that controller and passes a WebOb-wrapped request into it, with any special URL matching data tacked into the matchdict attribute.  And actually, the only reason that this method is even so long at all is because of the "if route_match is None" block in the middle: that whole part is providing APPEND_SLASH=True type functionality, as one would find in Django.  (Ie, if you're visiting the url "/licenses", and that doesn't resolve to anything, but the URL "/licenses/" does, redirect to /licenses/.)  The portions before and after are just getting the controller for a url and passing the request into it.  That's all! (The current app.py is a few lines longer than this, utilizing a callable class rather than a method in place of ccengine_app for the sake of configurability and attaching a few more things onto the request object, but not longer or complicated by much.  The functionality otherwise is pretty much the same.)

Most interesting is that I swapped in this code, changed over the routing, fired up the server and.. it pretty much just worked.  I swapped out a framework for about a 50 line module and everything was just as nice and functioning as it was.  In fact, with the improved routing provided by Routes, I was able to cut out the fake routing view, and thus the amount of code was actually *less* than what it was before I stripped out the framework.  Structurally there was no real loss either; the application still looks familiar to that you'd see in a pylons/django/whatever application.

I'm still a fan of frameworks, and I think we are very fortunate to *have* Zope, Pylons, Django, Repoze.bfg, and et cetera.  But in the case of cc.engine I do believe that the position we are at is the right one for us; our needs are both minimal and special case, and the number of components out there for python are quite rich and easily tied together.  So it seems the best framework for cc.engine turned out to be no framework at all, and in the end I am quite happy with it.

<strong>ADDENDUM:</strong> Chris McDonough's comments below are worth reading.  It's quite possible that the issues I experienced were my own error, and not repoze.bfg's.  I also hope that in no way did I give the impression that we moved away from repoze.bfg because it was a bad framework, because repoze.bfg is a great framework, especially if you are using a lot of zope components and concepts.  It's also worth mentioning that the type of setup that we ended up at, as I described, probably wouldn't have happened unless I had adapted my concepts directly from repoze.bfg, which does a great job of showing just how usable Zope components are without using the entirety of Zope itself.  Few ideas are born without prior influence; repoze.bfg was built on ideas of Zope (as many Python web frameworks are in some capacity), and so too was the non-framework setup I described here based on the ideas of repoze.bfg.  It is best for us to be courteous to giants as we step on their shoulders, but it is also easier to forget or unintentionally fail to extend that courtesy as I may have done here.  Thankfully I've talked to Chris offline and he didn't seem to have taken this as an offense, so for that I am glad.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>432</wp:post_id>
		<wp:post_date>2010-01-13 22:04:43</wp:post_date>
		<wp:post_date_gmt>2010-01-13 22:04:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-engine-and-web-non-frameworks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-engine"><![CDATA[cc.engine]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="frameworks"><![CDATA[frameworks]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="sanity"><![CDATA[sanity]]></category>
		<category domain="post_tag" nicename="wsgi"><![CDATA[wsgi]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>133</wp:comment_id>
			<wp:comment_author><![CDATA[Chris McDonough]]></wp:comment_author>
			<wp:comment_author_email>chrism@plope.com</wp:comment_author_email>
			<wp:comment_author_url>http://plope.com</wp:comment_author_url>
			<wp:comment_author_IP>72.209.213.57</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 16:29:04</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 16:29:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi,

I'd like to say "I'm sorry BFG didn't work out for you" but its probably unnecessary.. sometimes the best framework really is no framework at all, and I think you're right to use the minimal amount of software required to get the job done, and I'm glad you got there.

The "interaction with queryutility" you speak of is probably the fact that BFG uses its own component registry by default.  In theory, this shouldn't be a problem, because ZCML directives should not be directly addressing the global registry.  But some do, because they are written badly.

I actually recently fixed (IIRC) the zope.i18n stuff so that it wouldn't always put stuff in the global registry, so you might not have noticed this if you used a more recent version of it. 

But even easier, in the latest version of BFG, you can instruct BFG to, please, please, by god, always use the Zope global component registry:

from zope.component import getGlobalSiteManager
reg = getGlobalSiteManager()
from repoze.bfg.configuration import Configurator
config = Configurator(registry=reg)
config.setup_registry()
config.hook_zca()

This makes it impossible to run both a Zope application and a BFG application in the same process with separate registrations for each, but it works well when you really just don't care about that case.

I don't know what you mean by the "URL routing is unordered".  Order definitely matters there.  I'd like to understand it so we can address a wider set of cases in the future.

Thanks,

- C]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>134</wp:comment_id>
			<wp:comment_author><![CDATA[Chris McDonough]]></wp:comment_author>
			<wp:comment_author_email>chrism@plope.com</wp:comment_author_email>
			<wp:comment_author_url>http://plope.com</wp:comment_author_url>
			<wp:comment_author_IP>72.209.213.57</wp:comment_author_IP>
			<wp:comment_date>2010-01-14 16:35:07</wp:comment_date>
			<wp:comment_date_gmt>2010-01-14 16:35:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, also, too late for you, but the latest BFG (1.2-series) requires no ZCML at all.  For example, instead of using  statements in ZCML, you can do:

config = Configurator(...)
config.add_route(name='foo', path='abc/:def', view=some.view.func)
config.add_route(name='bar', path='def/:ghi', view=some.other.view.func)

The simplest BFG application now requires only a single Python file (it doesn't even need to live in a package): 

http://docs.repoze.org/bfg/1.2/narr/configuration.html#hello-world-configured-imperatively]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Search and Discovery for OER</title>
		<link>http://labs.creativecommons.org/2010/01/14/search-and-discovery-for-oer/</link>
		<pubDate>Thu, 14 Jan 2010 00:46:12 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=437</guid>
		<description></description>
		<content:encoded><![CDATA[Last summer the <a href="http://www.soros.org" title="Open Society Institute">Open Society Institute</a> generously provided funding for CC to host a <a href="http://opened.creativecommons.org/OER_Discovery_2009">meeting about search and discovery for OER</a>.  The goal was to bring together people with experience and expertise in different areas of OER discovery and see if there was common ground: pragmatic recommendations publishers could follow to achieve increased visibility right now.

After many months of inactivity, I'm happy to announce that we've published a draft of an initial document, a basic publishing guide for OER. <a href="http://wiki.creativecommons.org/Towards_a_Global_Infrastructure_For_Sharing_Learning_Resources">"Towards a Global Infrastructure For Sharing Learning Resources"</a> describes steps creators and publishers of OER can take today to make sure their work spreads as widely as possible.  This draft was developed by attendees of the meeting, and is currently being reviewed; as such it may (and probably will) change.

As you can see from the <a href="http://opened.creativecommons.org/OER_Discovery_2009_Notes#Can_we_set_some_initial_priorities_and_plans_of_action.3F">meeting notes</a>, this isn't the last thing we hope to get from this meeting. The next steps involve getting our hands a little dirtier -- figuring out how we link registries of OER repositories and implementing code to do so.  It should be interesting to see how this work develops, and how it influences our prototype, <a href="http://wiki.creativecommons.org/Category:DiscoverEd">DiscoverEd</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2010-01-14 00:46:12</wp:post_date>
		<wp:post_date_gmt>2010-01-14 00:46:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>search-and-discovery-for-oer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="discovery"><![CDATA[discovery]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="oer"><![CDATA[OER]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>135</wp:comment_id>
			<wp:comment_author><![CDATA[Tatiana Griffin]]></wp:comment_author>
			<wp:comment_author_email>ctgrif45@msn.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>174.27.218.3</wp:comment_author_IP>
			<wp:comment_date>2012-01-29 01:06:45</wp:comment_date>
			<wp:comment_date_gmt>2012-01-29 01:06:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeah for OER!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Asterisk on a $20/mo. Linode, part 2.</title>
		<link>http://labs.creativecommons.org/2010/01/20/asterisk-on-a-20mo-linode-part-2/</link>
		<pubDate>Wed, 20 Jan 2010 23:56:49 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[I mentioned in my recent post about running Asterisk on a $20/month Linode that I would try to follow up with a review of the steps necessary to actually get it working.  This isn't going to be a detailed review, but just a more or less bulleted list of steps to take.

In the previous post I said that I had run into a kernel-package bug (<a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=508487">#508487</a>) that was preventing me from successfully building a Xen kernel with make-kpkg.  So I installed the version from unstable, in which the bug had been fixed.  This step may not be necessary at some point:

# vi /etc/apt/sources.lst
[change deb-src to point to an unstable repository]
# apt-get update
# mkdir kernel-package && cd kernel-package
# apt-get source kernel-package
# apt-get build-dep kernel-package
# dpkg-buildpackage -rfakeroot -uc -b
# dpkg -i kernel-package_12.025_all.deb

Now to build the kernel.

# cd /usr/src
# apt-get source linux-image-`uname -r`
# cd linux-2.6-2.6.26
# aptitude install linux-patch-debian-2.6.26
# /usr/src/kernel-patches/all/2.6.26/apply/debian -a amd64 -f xen
# make menuconfig
[<em>Processor type & features</em> -&gt; <em>Timer frequency</em> -&gt; <em>1000 HZ</em>]
# make-kpkg clean
# make-kpkg --initrd kernel_image
[wait a good while for the kernel to compile]
# mv /lib/modules/2.6.26/kernel/ /root/kernel.old.old
# dpkg -i ../linux-xen0-2.6.26_2.6.26-10.00.Custom_amd64.deb
# update-initramfs -c -k 2.6.26

Now to build the <a href="http://www.voip-info.org/wiki/view/DAHDI">Zaptel</a> (DAHDI) kernel modules.  It would normally be just a few steps, but there were some other problems regarding references to the RTC in zaptel-sources.  You can find more information about this at the  <a href="http://www.voip-info.org/wiki/view/Asterisk+timer+ztdummy">voip-info.org wiki</a>, most relevantly under the heading "<em>zaptel and xen-kernel 2.6.26-1-xen-686 in Debian Lenny</em>": 

# apt-get install zaptel-source
# cd /usr/src
# vi modules/zaptel/kernel/ztdummy.c
[comment out <em>#define USE_RTC</em> lines]
# m-a prepare
# m-a build zaptel
# m-a install zaptel
# modprobe ztdummy

I think those are the basic steps I took.  The actual path was much less clean, as I hit bugs and went back and forth.  It's possible I have missed a step or two in there, or that the way I went about things wasn't right, ideal or even correct.  Of course, all of this also presupposes that you have already configured your Linode to boot from a custom local kernel instead of the default Linode kernel.  <a href="http://library.linode.com/advanced/pv-grub-howto">Instructions</a> on how to do this can be found at at linode.com.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2010-01-20 23:56:49</wp:post_date>
		<wp:post_date_gmt>2010-01-20 23:56:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asterisk-on-a-20mo-linode-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Thoughts on Installing SMW &quot;Applications&quot;</title>
		<link>http://labs.creativecommons.org/2010/02/02/thoughts-on-installing-smw-applications/</link>
		<pubDate>Tue, 02 Feb 2010 15:59:53 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=453</guid>
		<description></description>
		<content:encoded><![CDATA[I've posted a follow up to my <a href="http://labs.creativecommons.org/2010/01/08/mediawiki-the-application-platform/">previous notes</a> on Semantic MediaWiki as an application platform.  Installation and upgrade matters for an application; an <a href="http://yergler.net/blog/2010/01/25/thoughts-on-deploying-and-maintaining-smw-applications/">expanded brainstorm on how that might work</a> is available on my blog.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date>2010-02-02 15:59:53</wp:post_date>
		<wp:post_date_gmt>2010-02-02 15:59:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thoughts-on-installing-smw-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ideas"><![CDATA[ideas]]></category>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="post_tag" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="smw"><![CDATA[smw]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>License badges and icons now available via HTTPS</title>
		<link>http://labs.creativecommons.org/2010/02/23/license-badges-and-icons-now-available-via-https/</link>
		<pubDate>Tue, 23 Feb 2010 17:57:24 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[Prompted by a <a href="http://identi.ca/notice/21809109">nudge</a> from <a href="http://evan.prodromou.name/">Evan Prodromou</a>, license badges and icons are now available via HTTPS on i.creativecommons.org.  If you run a site available via HTTPS and use CC license badges or icons served from i.creativecommons.org, then you can now pull those images via HTTPS to avoid your users receiving a message from their browser that some of the page content is not encrypted. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date>2010-02-23 17:57:24</wp:post_date>
		<wp:post_date_gmt>2010-02-23 17:57:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-badges-and-icons-now-available-via-https</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Evan Prodromou]]></wp:comment_author>
			<wp:comment_author_email>evan@status.net</wp:comment_author_email>
			<wp:comment_author_url>http://evan.status.net/</wp:comment_author_url>
			<wp:comment_author_IP>24.203.218.162</wp:comment_author_IP>
			<wp:comment_date>2010-02-23 19:00:25</wp:comment_date>
			<wp:comment_date_gmt>2010-02-23 19:00:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great news! We'll start using it right away.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Using virtualenv and zc.buildout together</title>
		<link>http://labs.creativecommons.org/2010/03/16/using-virtualenv-and-zc-buildout-together/</link>
		<pubDate>Tue, 16 Mar 2010 15:47:41 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=462</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://pypi.python.org/pypi/virtualenv">Virtualenv</a> and <a href="http://www.buildout.org/">zc.buildout</a> are both great ways to develop python packages and deploy collections of packages without needing to touch the system library.  They are both fairly similar, but also fairly different.

The primary difference between them is that zc.buildout focuses on having a single package, and all relevant dependencies are installed automatically within that package's directory via the buildout script (Nathan Yergler points out that you don't have to use things this way, but that seems to me to be the way things happen in practice... anyway, I'm not a buildout expert).  The buildout script is very automagical and does all the configuration and installation of dependencies for you.   Since this is a build system, you can also configure it to do a number of other neat things, such as compile all your gettext catalogs, or scp the latest cheesefile.txt from themoon.example.org... whatever you need to do to build a package.

Virtualenv is mostly the same creature, but it's like you reached your hand inside and pulled it inside out.  Instead of a bunch  of packages installed within a subdirectory of one package, there is a more generic directory layout that allows you to set up a number of packages within it.  Installing a package and keeping it up to date is much more manual in general, but also a bit more flexible in the sense that you can switch paths around within the environment fairly easily and simultaneously developing multiple interwoven packages is not difficult.

I came to CC with a lot of experience with virtualenv and no experience with zc.buildout.  Initially I could discern no differences of use case between them, but now I have a pretty good sense of when you'd want to use one over the other.  An example use case, which has come up pretty often with me actually: say you have two packages, one of which is a dependency on the other.  In this case, we'll use both cc.license and cc.engine, where cc.engine has cc.license as a
dependency.

Now say I'm adding a feature to cc.engine, but this feature also requires that I add something in cc.license.  At this point it is
easier for me to switch to using virtualenv; I can set up both development packages in the same virtualenv and use them together.  This is great because it means that I should have little to no difficulty switching back and forth between both of them.  If I make a change in cc.license it is immediately available to me in cc.engine.  This also  prevents either having to set up a tedious to switch around configuration checking out cc.license into cc.engine and etc, or making a bunch of unnecessary releases just to make sure things work, etc.  It's easier to work on multiple packages at once in
virtualenv in my experience.

Now let's assume that we got things in working order, cc.license has the new feature and cc.engine is able to use it properly, tests are passing, and et cetera.  At this point is where I think returning to zc.buildout is a good idea.  One of the things I like about zc.buildout is that it provides a certain type of integrity checking with the buildout command.  If you forget to mark a dependency or even remove it from setup.py on accident or whatever, buildout will simply unlink it from your path the next time you run it.  In this case, I think zc.buildout is especially useful because I might forget to make a cc.license release here or some such thing.  There are some other reasons for using zc.buildout (as the name implies, buildout is a full build system, so there are a lot of neat things you can do with it), but for a forgetful person such as myself this is by far the most important to me (and the most relevant to this example).

So I've described use cases for both cc.engine and cc.license.  How do we get them to work nicely together?  Let's assume we just want to check out these packages once.  Let's also assume that our virtualenv directory is ~/env/ccommons (because I'm clearly basing this off my own current setup currently, heh).

First, we'll create our virtualenv environment, if we haven't already:
<blockquote>
<pre>$ virtualenv ~/env/ccommons
</pre>
</blockquote>
Next, we'll check out cc.engine and cc.license into ~/devel/ and run
buildout on each:
<blockquote>
<pre>$ cd ~/devel/
$ git clone git://code.creativecommons.org/cc.license.git
$ git clone git://code.creativecommons.org/cc.engine.git
</pre>
</blockquote>
Next, we'll buildout the packages:
<blockquote>
<pre>$ cd ~/devel/cc.license
$ wget http://svn.zope.org/*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py
$ python bootstrap.py
$ ./bin/buildout
$ cd ~/devel/cc.engine
$ python bootstrap.py # the cc engine already has bootstrap.py checked in
$ ./bin/buildout
</pre>
</blockquote>
Buildout can take a while, so be prepared to go grab some cookies and coffee and/or tea.  But once it's done, getting these packages set up in virtualenv is super simple.

First activate the virtualenv environment:
<blockquote>
<pre>$ source ~/env/ccommons/bin/activate
$ cd ~/devel/cc.license
$ python setup.py develop
$ cd ~/devel/cc.engine
$ python setup.py develop
</pre>
</blockquote>
That's it!  Now we can verify that these packages are set up in virtualenv.  Open python and verify that you get the following output (adjusted to your own home directory and etc):
<blockquote>
<pre>&gt;&gt;&gt; import cc.engine
&gt;&gt;&gt; cc.engine.__file__
'/home/cwebber/devel/cc.engine/cc/engine/__init__.pyc'
&gt;&gt;&gt; import cc.license
&gt;&gt;&gt; cc.license.__file__
'/home/cwebber/devel/cc.license-git/cc/license/__init__.pyc'
</pre>
</blockquote>
To leave virtualenv, you can simply type "deactivate".

That's it!  Now you have a fully functional zc.buildout AND virtualenv setup, where switching back and forth is super simple.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>462</wp:post_id>
		<wp:post_date>2010-03-16 15:47:41</wp:post_date>
		<wp:post_date_gmt>2010-03-16 15:47:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-virtualenv-and-zc-buildout-together</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="buildout"><![CDATA[buildout]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="techblog"><![CDATA[techblog]]></category>
		<category domain="post_tag" nicename="virtualenv"><![CDATA[virtualenv]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>138</wp:comment_id>
			<wp:comment_author><![CDATA[Wyatt]]></wp:comment_author>
			<wp:comment_author_email>wyatt.lee.baldwin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>63.224.231.192</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 01:05:45</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 01:05:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[&gt; I can set up both development packages in the same virtualenv and use them together.

You can do essentially the same thing with Buildout. Just set the `develop` property in your buildout.cfg. For example (assuming you have cc.engine and cc.license in a common projects directory):

develop = ../cc.license
                   /path/to/some/other/thing
                   /and/so/on]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>139</wp:comment_id>
			<wp:comment_author><![CDATA[Kevin Teague]]></wp:comment_author>
			<wp:comment_author_email>kevin@bud.ca</wp:comment_author_email>
			<wp:comment_author_url>http://bud.ca</wp:comment_author_url>
			<wp:comment_author_IP>96.49.216.132</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 01:08:14</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 01:08:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The 'develop' directive in Buildout is for pulling in multiple packages under development. For example, in 'cc.license', the develop line is:

  develop = .

Which means that the package in the cc.license directory will be picked by Buildout instead of Buildout trying to fetch and install a cc.license package. It's very handy to twiddle with this line, I'll often do something like:

  develop = . ../cc.engine

And Buildout will find the source files for a package checked out at ../cc.engine.

You won't usually find too many examples of using Buildout like this, since most buildout.cfg files people use as references are checked into a project, and it doesn't make sense for that file to have assumptions about the layout of stuff specific to one developer's setup. But it is quite handy, and also convenient, as the develop directive is usually listed first in the config file. An advantage of twiddling the develop line is that it's easy to switch between using a released version of a package and a development version, since you can have both packages installed at the same time, and Buildout is only modifying the generated script wrappers.

If you're doing this with more than a few packages though, then using mr.developer, a Buildout extension, is the way to go. This lets you do additional source code checkouts when buildout is run, and you can apply buildout and version control commands en-masse.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Rob Miller]]></wp:comment_author>
			<wp:comment_author_email>rob@kalistra.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>66.117.137.130</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 02:33:29</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 02:33:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You may or may not find this useful, but I've put together a zc.buildout recipe that will automatically turn the buildout root into a virtualenv, and ensure that bootstrap.py and buildout itself are always run within the context of that virtualenv.  It's available on pypi:

http://pypi.python.org/pypi/rjm.recipe.venv]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[Florian Schulze]]></wp:comment_author>
			<wp:comment_author_email>florian.schulze@gmx.net</wp:comment_author_email>
			<wp:comment_author_url>http://blog.crowproductions.de</wp:comment_author_url>
			<wp:comment_author_IP>84.171.52.153</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 03:04:18</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 03:04:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You might want to take a look at mr.developer:
http://pypi.python.org/pypi/mr.developer
In addition to handle development versions in buildout with ease, it also integrates with various version control systems.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>142</wp:comment_id>
			<wp:comment_author><![CDATA[Bertrand Mathieu]]></wp:comment_author>
			<wp:comment_author_email>bert.mathieu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://zebert.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>80.13.205.211</wp:comment_author_IP>
			<wp:comment_date>2010-03-17 17:31:10</wp:comment_date>
			<wp:comment_date_gmt>2010-03-17 17:31:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can work on multiple packages with buildout, easily.

suppose you have done your checkout in ./src/cc.*. You have:

./src/cc.engine/
./src/cc.license/

In your buildout.cfg, you just have to declare these paths in develop. It would look like this:

[buildout]
develop = 
  ./src/cc.engine
  ./src/cc.license

parts = eggs

[eggs]
recipe = zc.recipe.egg

eggs = 
    cc.engine
    cc.license


(hint: develop accept any path, so it could start with ../...)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>143</wp:comment_id>
			<wp:comment_author><![CDATA[cwebber]]></wp:comment_author>
			<wp:comment_author_email>cwebber@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://dustycloud.org</wp:comment_author_url>
			<wp:comment_author_IP>207.229.176.139</wp:comment_author_IP>
			<wp:comment_date>2010-03-23 16:43:12</wp:comment_date>
			<wp:comment_date_gmt>2010-03-23 16:43:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Wyat, Kevin, Bernard:

Thanks!  This information is good to know.  Nathan Yergler did indicate that this was possible with a develop= line but didn't really go into details, so it is good to read how to go about this.

At any rate, I still think that it is valuable to know how to use both of these tools together.  For example, I am developing interest in Silver Lining, and it might be good to be able to use some of the build system tools of buildout along with Silver Lining's virtualenv deployment setup.  Even so, that's *not* what I'm doing now, so knowing how to do this with zc.buildout is very helpful... thanks!

Rob & Bertrand:

Thanks, I've taken note to look at those tools soon!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>14</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Google Checkout support added to CC&#039;s donation page</title>
		<link>http://labs.creativecommons.org/2010/03/18/google-checkout-support-added-to-ccs-donation-page/</link>
		<pubDate>Thu, 18 Mar 2010 16:17:52 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=469</guid>
		<description></description>
		<content:encoded><![CDATA[A number of months ago CC launched <a href="http://labs.creativecommons.org/2009/11/09/one-click-paypal-donations-with-civicrm/">a simplification</a> of the donation process on the <a href="https://support.creativecommons.org/donate">CC contribution page</a>.  At that time, only PayPal was supported, but I'm happy to announce that Google Checkout support was recently integrated.    The only change to the actual interface is that now a query string variable of <strong>&pp=</strong> (pp = payment processor) is required.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>469</wp:post_id>
		<wp:post_date>2010-03-18 16:17:52</wp:post_date>
		<wp:post_date_gmt>2010-03-18 16:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-checkout-support-added-to-ccs-donation-page</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC Project Introduction: CC Wordpress Plugin</title>
		<link>http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/</link>
		<pubDate>Mon, 24 May 2010 22:27:52 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=471</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Who I am</h3>

<p>
    I'm Nils Dagsson Moskopp, a 22 year old student of philosophy and computer science, living in Berlin (German speakers may check out my <a href="http://blog.dieweltistgarnichtso.net/">blog</a>). I dislike the act of programming, but love the results, so I seem to have no other choice than to do it from time to time.
</p>

<p>
    Recently, after submitting a <a href="http://socghop.appspot.com/gsoc/student_proposal/show/google/gsoc2010/erlehmann/t126992832487">proposal</a>, I got accepted into the <a href="http://code.google.com/soc/"><i>Google Summer of Code</i></a> program, being mentored by <a href="http://creativecommons.org/about/people#nathankinkade"><i>Nathan Kinkade</i></a>. In the rest of this entry, I will do my best to explain how it came to that and what kind of software I intend to create.
</p>

<h3>The Idea</h3>

<p>
    As far as I know, there currently is no automated, easy way to have human- and machine-readable markup for specific subsections of a blog post in the blogging software <a href="http://wordpress.org"><i>Wordpress</i></a>; it is only possible to have an entire page licensed under one specific license. Further complicating the issue is the fact that the Wordpress media manager actually does not know about licenses accociated with specific content. This poses a problem for the not-so-uncommon use case of embedding <abbr title="Creative Commons">CC</abbr>-licensed media, mainly photos.
</p>

<p>
    I was first confronted with the idea of having an automated way to markup media with Creative Commons licensing information when reading <i>Matthias Mehldau</i>'s post <a href="http://einmachglas.wordpress.com/2009/03/10/creative-commons-html-code/"><i>More precise Creative Commons HTML-Codes</i></a>. He envisioned an annotation containing not only the well-known <abbr title="Creative Commons">CC</abbr> license symbols, but also the jurisdiction and a button to show the markup used, for easy re-embedding. Well versed in graphics design, he also created a mockup:
</p>


    <img src="http://einmachglas.files.wordpress.com/2009/03/cc-html-code1.jpg">
    Matthias Mehldau's Mockup


<p>
    Shortly after that, <a href="http://de.wikipedia.org/wiki/Julia_Seeliger"><i>Julia Seeliger</i></a> posted a suggestion how a Creative Commons plugin backend for Wordpress <a href="http://julia-seeliger.de/wunschzettel-creative-commons-plugin-fur-wordpress/">could look like</a>. She suggested integrating the <a href="http://creativecommons.org/choose/">official license chooser</a> or a <a href="http://en.wikipedia.org/wiki/Drop-down_list">drop down list</a> within the Wordpress upload form.
</p>

<p>
    We three chatted about these ideas, me even actually implementing some parts (see next section), but nothing qualifying as currently usable came from that. When approximately one year later, I did come upon the <abbr title="Creative Commons">CC</abbr> wiki site describing the developer challenge titled <a href="http://wiki.creativecommons.org/Support_for_CC_licenses_in_WordPress_Media_Manager"><i>Support for CC licenses in WordPress Media Manager</i></a>, I chose to apply for that with <i>Google Summer of Code</i>.
</p>

<h3>Existing Solutions</h3>

<p>
    As mentioned in the introduction to the last section, a tool that provides easy licensing management for Wordpress media content, automating subsequent insertion, currently does not exist. Several existing projects, however, have features related to this goal; code re-use may be possible.
</p>

<p>
    In 2006, <i>George Notaras</i> created the <a href="http://www.g-loaded.eu/2006/01/14/creative-commons-configurator-wordpress-plugin/"><i>Creative-Commons-Configurator WordPress Plugin</i></a>. It allows the user to choose a global license for his or her blog, using <q cite="http://www.g-loaded.eu/2006/01/14/creative-commons-configurator-wordpress-plugin/">the <a href="http://creativecommons.org/choose/">web-based license selection engine</a> from <i>CreativeCommons.org</i></q> and adds localized machine- and human-readable license information to pages and feeds. Similar plugins, putting global licensing information into footer and sidebars, exist.
</p>

<p>
    For <abbr title="Google Summer of Code">GSoC</abbr> 2009, <i>Dinishika Nuwangi</i> made a Wordpress plugin called <a href="http://code.creativecommons.org/viewgit/wprdfa.git/"><i>wprdfa</i></a> (not to confuse with <a href="http://dev.squarecows.com/projects/wp-rdfa/"><i>wp-rdfa</i></a>). Unfortunately, the project has an empty <a href="http://code.creativecommons.org/viewgit/wprdfa.git/tree/README">README</a> file. Judging from a quick glance at the source code, part of its intended purpose is to add buttons to the <a href="http://tinymce.moxiecode.com/">TinyMCE</a> editor integrated into Wordpress, although on installation I was unable to see this functionality. The <a href="http://wiki.creativecommons.org/RDFa_Plugin_for_WordPress">related developer challenge</a> still seems to be open, on the page the plugin is described as <q cite="http://wiki.creativecommons.org/RDFa_Plugin_for_WordPress">foundational work</q>.
</p>

<p>
    Also in 2009, I created two pieces of software, inspired by <a href="http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-May/019668.html">a post on the <abbr title="Web Hypertext Application Technology Working Group">WHATWG</abbr> mailing list</a>. First, a <a href="http://daten.dieweltistgarnichtso.net/src/cc-license-markup/generator2.xhtml">web application generating HTML5 license markup</a> (enriched with <i>Microdata</i>, see next section), second a <a href="http://blog.dieweltistgarnichtso.net/html5-cc-plugin-fur-wordpress-version-0-6">Wordpress plugin</a> capable of generating similar markup using both <i>Microdata</i> and <i><abbr title="Recourse Description Framework in Attributes">RDFa</abbr></i>. And there was <a href="http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2009-July/021154.html">much rejoicing</a>.
    <em>It is important to note that since then the HTML5 standard <a href="http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2010-January/024887.html">has changed</a> and the generated markup is no longer valid.</em>

</p>

<p>
    On a less technical note, the German blog <a href="http://spreeblick.com"><i>Spreeblick</i></a> has a unique way of presenting the license information, only showing a small "cc" in the bottom left corner; on hovering, author name and a link to the source are presented (<a href="http://www.spreeblick.com/2010/05/20/von-gahnern-und-gammlern/">live example</a>). However, while <i>Spreeblick</i> <em>is</em> using Wordpress, the folks behind it have no intention of releasing their plugin: As <i>Max Winde</i> told me in April 2009, it is tightly entangled with their image layout functionality and would require complex cleanup.
</p>

<h3>Planned Interface</h3>

<p>
    I plan to implement the presentation part using the new HTML5 elements <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/grouping-content.html#the-figure-element"><i>figure</i></a> and <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/grouping-content.html#the-figcaption-element"><i>figcaption</i></a>. Together, they can be used to denote content <q cite="http://www.whatwg.org/specs/web-apps/current-work/multipage/grouping-content.html#the-figure-element">with a caption […] that is self-contained and is typically referenced as a single unit from the main flow of the document</q>. A code example shows how markup using the figure element may looks like:
</p>

<p>
    <code>&lt;figure&gt;
    &lt;!-- content goes here --&gt;
    &lt;figcaption&gt;caption&lt;/figcaption&gt;
&lt;/figure&gt;</code>
</p>

<p>
    Naturally, as a rather general markup language HTML5 does not contain any elements to give this construct more specific meaning, such as marking up which license applies to said content. However, two markup extensions provide this capability at the <i>attribute</i> level, the complex and established <a href="http://www.w3.org/TR/xhtml-rdfa-primer/"><i><abbr title="Recourse Description Framework in Attributes">RDFa</abbr></i></a> and the simpler, newer <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#microdata"><i>Microdata</i></a> proposal, part of HTML5. While both standards are sufficiently open, <i><abbr title="Recourse Description Framework in Attributes">RDFa</abbr></i> is <a href="http://wiki.creativecommons.org/RDFa">endorsed by Creative Commons</a>; for this reason I will not stray into <i>Microdata</i> territory unless I have time to spare at the end of <abbr title="Google Summer of Code">GSoC</abbr>.
</p>

<p>
    To this point, I have been only accounting for machine readability. Nevertheless, with <a href="http://www.w3.org/Style/CSS/"><i><abbr title="Cascading Style Sheets">CSS</abbr></i></a> it is easily possible to beautify the visual presentation in nearly any way imaginable. The following two screenshots, taken with the now-defunct Wordpress plugin I created in 2009, exemplify this — both are based on the same markup.
</p>


    <img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/cc-license-markup/stil-wetter.png">
    simple style



    <img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/cc-license-markup/stil-spreeblick.png">
    <i>Spreeblick</i> style


<p>
    On the author side, I plan to have the plugin look like the <i>Spreeblick</i> one (<a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/spreeblick-plugin.png">screenshot</a>), which will mean adding options to the Wordpress media uploader:
</p>

<ul>
    <li>
        an additional drop down list, for choosing one of the six <a href="http://en.wikipedia.org/wiki/Creative_Commons_licenses">main <abbr title="Creative Commons">CC</abbr> licenses</a>
    </li>
    <li>an additional text input for the author or rights holder</li>
    <li>an additional text input for specifying the source <abbr title="Uniform Resource Identifier">URI</abbr></li>
</ul>

<p>
    Media could then be inserted the usual way, with the <i><abbr title="Recourse Description Framework in Attributes">RDFa</abbr></i> annotation automatically generated.
</p>
<p>
    
        Now, that the <abbr title="Google Summer of Code">GSoC</abbr> <a href="http://google-opensource.blogspot.com/2010/05/google-summer-of-code-2010-coding.html">coding phase has started</a>, I plan to do a weekly progress report; the impatient may want to track the contents of the <a href="http://code.creativecommons.org/viewgit/wordpress-cc-plugin.git/">official Git repository</a>. Stay tuned.
    
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date>2010-05-24 22:27:52</wp:post_date>
		<wp:post_date_gmt>2010-05-24 22:27:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-project-introduction-cc-wordpress-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[css]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[html5]]></category>
		<category domain="post_tag" nicename="microdata"><![CDATA[microdata]]></category>
		<category domain="post_tag" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="people"><![CDATA[people]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #1 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/01/gsoc-cc-wordpress-plugin-weekly-report-1/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:16:20</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:16:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] week I was busy and lazy in turns, so I worked on the plugin only on two days. These are the tasks that I [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #2 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/08/gsoc-cc-wordpress-plugin-weekly-report-2/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:16:36</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:16:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] last week&#8217;s work on the plugin, I had two targets, both related to the goal of making the interface functional: First, saving [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #3 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/16/gsoc-cc-wordpress-plugin-weekly-report-3/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:17:00</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:17:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] week, development on the plugin proceeded at a faster pace. Shortly after I posted the last report, Nathan Kinkade pointed out the [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>147</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #5 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/30/gsoc-cc-wordpress-plugin-weekly-report-5/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:18:07</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:18:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] delayed report, late by a day. This time, however, I can deliver; the current version of the plugin sports the filter system I unsuccessfully tried to implement the week before: While previous [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>148</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #6 / #7 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/07/13/gsoc-cc-wordpress-plugin-weekly-report-6-7/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-13 21:55:08</wp:comment_date>
			<wp:comment_date_gmt>2010-07-13 21:55:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the plugin, I have fixed a number of small bugs and also added several new features, listed [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC WordPress Plugin: Weekly Report #8 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/07/21/gsoc-cc-wordpress-plugin-weekly-report-8/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-21 17:39:17</wp:comment_date>
			<wp:comment_date_gmt>2010-07-21 17:39:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is a short one. This week, I did only a few things related to the plugin: First, planned features and bugs are now listed in the issue tracker. Second, you can now specify [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>150</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #9 / #10 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/08/04/gsoc-cc-wordpress-plugin-weekly-report-9-10/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-08-04 14:28:14</wp:comment_date>
			<wp:comment_date_gmt>2010-08-04 14:28:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is running out for work on the plugin. With the 9th of this month being the suggested date to start working on documentation and cleanup [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>151</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC WordPress Plugin: Weekly Report #11 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/08/10/gsoc-cc-wordpress-plugin-weekly-report-11/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-08-10 22:19:36</wp:comment_date>
			<wp:comment_date_gmt>2010-08-10 22:19:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] week most of the work on the plugin consisted of styling changes and fixing bugs, mainly regressions that sneaked in due to the rewrite [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>152</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #12 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/08/19/gsoc-cc-wordpress-plugin-weekly-report-12/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-08-19 20:02:41</wp:comment_date>
			<wp:comment_date_gmt>2010-08-19 20:02:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is my last report for the plugin. After 150 commits and a bit over 30KB of written PHP code, the Google Summer of Code proposal [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #4 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/25/gsoc-cc-wordpress-plugin-weekly-report-4/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-09-03 16:09:32</wp:comment_date>
			<wp:comment_date_gmt>2010-09-03 16:09:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] some of you may have noticed, this report about the WordPress CC plugin is several days late. This is because I was unable to produce new substantial features and have hit [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Creative Commons Open Office Plugin. Here it is with some new features....</title>
		<link>http://labs.creativecommons.org/2010/05/20/creative-commons-open-office-plugin-here-it-is-with-some-new-features/</link>
		<pubDate>Thu, 20 May 2010 04:43:08 +0000</pubDate>
		<dc:creator><![CDATA[akila87]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=473</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } 		A:link { so-language: zxx } -->

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">Hi there!</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">I was selected for the Google Summer of Code for the above project with the guidance from <a href="http://creativecommons.org/about/people#christopherwebber">Christopher Webber</a> &amp; <a href="http://creativecommons.org/about/people#nathanyergler">Nathan Yergler</a>. I am a 22 year old student from <a href="http://www.mrt.ac.lk/">University of Moratuwa</a> Sri Lanka where I am doing my BSc Engineering degree on Electronic &amp; Telecommunication. What I am doing in this project is updating the OpenOffice plugin developed by <a href="../2007/04/14/summer-of-code-project-%E2%80%9Copenofficeorg-writer-add-in-for-publishing-cc-licensed-documents%E2%80%9D/">Cassio Melo</a> in GSoC 2007.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">I have been working on the project since last April. I was able to add many requested features and some new ideas by me.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">So lets look at the progress of the add-on and those “New Features”.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Support for OpenOffice 3.1, 3.2</strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">The add on currently in the extension repository only has support for the OpenOffce 2 version. I recompiled the add on to make it work in OpenOffice 3.1, 3.2</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Support for adding images from Flickr, Open Clip Art and Wikimedia Commons.</strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">In 2008 Summer of Code <a href="../2008/05/29/gsoc-2008-flickr-image-re-use-for-openofficeorg/">Mihai Husleag</a> made the Flickr Image Re-Use add on.  I used this code to add this feature.  Now you can search images in Flickr, Open Clip Art and Wikimedia Commons and add them to your document. The license and attribution data will also be added with the image. This works on Writer Calc Impress and Draw.</span></span>
<p style="text-align: center"><span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"> </span></span></p>


[caption id="" align="aligncenter" width="640" caption="Insert Clip Art from Open Clip Art"]<a href="http://picasaweb.google.com/akila.wajirasena/CreativeCommonsBlog#5473192775342969666"><img class="  " src="http://lh6.ggpht.com/_LE-WXW82VPE/S_Sv1LmNU0I/AAAAAAAAADw/-hC2PpWR2pI/s800/InsertPicture.png" alt="" width="640" height="376" /></a>[/caption]

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } -->

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Support for OpenOffice Draw. </strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">This task was included in developer challenges. This is the first task that I completed in the project. Now you can add visible license statement and the metadata to a draw document.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"> </span></span>

[caption id="" align="aligncenter" width="640" caption="Support for Draw"]<a href="http://picasaweb.google.com/akila.wajirasena/CreativeCommonsBlog#5473192774355267538"><img class=" " src="http://lh3.ggpht.com/_LE-WXW82VPE/S_Sv1H6uL9I/AAAAAAAAADc/1XDNaxpldHY/s800/Draw.png" alt="" width="640" height="390" /></a>[/caption]

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Showing a notification when opening CC licensed documents.</strong></span></span>

[caption id="" align="aligncenter" width="715" caption="License Notification"]<a href="http://picasaweb.google.com/akila.wajirasena/CreativeCommonsBlog#5473192777594297474"><img class=" " src="http://lh3.ggpht.com/_LE-WXW82VPE/S_Sv1T-93II/AAAAAAAAAD8/M-Xlnwq4wJQ/Notification.png" alt="" width="715" height="457" /></a>[/caption]

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } --><span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Speed Up first time license insertion.</strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">Now the RDF database will load to memory when open office starts but this will not <span style="color: #000000">freeze</span> OpenOffice because it is done in a separate thread.  So the initial license insertion delay which is due to RDF loading will no longer be there.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Auto update visible license notice when license changes.</strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">In the previous version this worked only for writer documents. Now Calc, Impress and Draw also have this feature.</span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><strong>Adding RDF meta data.</strong></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">This only works for Writer. Other OpenOffice applications doesn't support this currently.</span></span>

[caption id="" align="aligncenter" width="584" caption="RDF Metadata"]<a href="http://picasaweb.google.com/akila.wajirasena/CreativeCommonsBlog#5473192782644041586"><img class=" " src="http://lh5.ggpht.com/_LE-WXW82VPE/S_Sv1my613I/AAAAAAAAADo/WJnuPRho7ck/RDF.png" alt="" width="584" height="309" /></a>[/caption]

<!-- 		@page { margin: 0.79in } 		P { margin-bottom: 0.08in } 		A:link { so-language: zxx } --><span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"><span style="color: #000000"><span style="font-family: DejaVu Sans,sans-serif">This is what I've done so far</span></span>. You can get the add on at <a href="http://extensions.services.openoffice.org/en/project/ccoootest" target="_blank">http://extensions.services.openoffice.org/en/project/ccoootest</a></span></span><span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small"> and the check the source code at: <a href="http://code.creativecommons.org/viewsvn/ccooo/branches/akila-gsoc-2010/" target="_blank">http://code.creativecommons.org/viewsvn/ccooo/branches/akila-gsoc-2010/</a></span></span>

<span style="font-family: DejaVu Sans,sans-serif"><span style="font-size: small">If you have any suggestions about this project (new functionalities, things you don’t like, etc) feel free to leave a comment.  And if you found any bugs please let me know.</span></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>473</wp:post_id>
		<wp:post_date>2010-05-20 04:43:08</wp:post_date>
		<wp:post_date_gmt>2010-05-20 04:43:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-commons-open-office-plugin-here-it-is-with-some-new-features</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="open-clip-art"><![CDATA[open clip art]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="wikimedia"><![CDATA[wikimedia]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>154</wp:comment_id>
			<wp:comment_author><![CDATA[Carolina Flores]]></wp:comment_author>
			<wp:comment_author_email>caro@piensalibre.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>163.178.144.6</wp:comment_author_IP>
			<wp:comment_date>2010-07-03 16:43:57</wp:comment_date>
			<wp:comment_date_gmt>2010-07-03 16:43:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi. Thanks a lot for this plug-in. I would like to translate it into Spanish. Let me know if I can help.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Akila Wajirasena]]></wp:comment_author>
			<wp:comment_author_email>akila.wajirasena@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://akila87.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>127.0.0.1</wp:comment_author_IP>
			<wp:comment_date>2010-07-07 17:01:00</wp:comment_date>
			<wp:comment_date_gmt>2010-07-07 17:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm working on the gnu gettext (.po) integration. I'll put a blog post and let you when it's finished. 
Thanks for the help :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>154</wp:comment_parent>
			<wp:comment_user_id>28</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>156</wp:comment_id>
			<wp:comment_author><![CDATA[Creative Commons OpenOffice Plugin now Supports Internationalization. - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/07/21/creative-ommons-openoffice-plugin-supports-for-internationalization/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-21 15:49:45</wp:comment_date>
			<wp:comment_date_gmt>2010-07-21 15:49:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] is a screen shot of the GUI with some Spanish translated strings (I choose Spanish because of this comment). GUI in [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #1</title>
		<link>http://labs.creativecommons.org/2010/06/01/gsoc-cc-wordpress-plugin-weekly-report-1/</link>
		<pubDate>Tue, 01 Jun 2010 17:02:48 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=497</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
This week I was busy and lazy in turns, so I worked on <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">the plugin</a> only on two days. These are the tasks that I finished:
</p>
<ul>
	<li>Setting up a test Wordpress installation, to start with a clean slate.</li>
	<li>Installing the <a href="http://wordpress.org/extend/plugins/wordpress-hook-sniffer/"><i>Hook Sniffer</i></a> plugin; which prints out every <a href="http://codex.wordpress.org/Plugin_API#Hooks.2C_Actions_and_Filters">Wordpress hook</a> triggered on a page load.</li>
	<li>Creating a simple form interface (<a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/dummy-upload.png">screenshot</a>).</li>
	<li>Putting all this together into a dummy plugin that adds the non-functional interface to the Wordpress upload manager.</li>
</ul>
<p>
I am aware that this is not much and will try to improve on my progress for the coming week. Currently I am trying to find out how to correctly handle the form input and write the incoming data into appropriate database fields, license representation in the media manager will probably come after that.
</p>
<p>

As always, the code is in the <a href="http://code.creativecommons.org/viewgit/wordpress-cc-plugin.git/">official Git repository</a>.

</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>497</wp:post_id>
		<wp:post_date>2010-06-01 17:02:48</wp:post_date>
		<wp:post_date_gmt>2010-06-01 17:02:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>159</wp:comment_id>
			<wp:comment_author><![CDATA[igorlukanin]]></wp:comment_author>
			<wp:comment_author_email>mail@igor.lukanin.name</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>213.191.13.167</wp:comment_author_IP>
			<wp:comment_date>2010-06-08 21:35:36</wp:comment_date>
			<wp:comment_date_gmt>2010-06-08 21:35:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Probably, it would be nice in future to test your plugin to work with my extension: http://labs.creativecommons.org/2010/06/08/gsoc-ccffext-1-2/

These two GSoC projects seem to be like Yin and Yang in a way :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>29</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Recent instability of the CC Wiki: ImageMagick?</title>
		<link>http://labs.creativecommons.org/2010/06/04/recent-instability-of-the-cc-wiki-imagemagick/</link>
		<pubDate>Fri, 04 Jun 2010 21:09:17 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[For the past few weeks we have been having some intermittent but fairly serious problems with the machine that runs the CC Wiki.  Every few days it would just crash and burn, and not being able to login, the only remedy was a reboot.  The system and application logs were very silent on the cause.

A day or two ago <a href="http://purl.org/NET/JesseW/SundryStuff/">Jesse Weinstein</a> (who helps CC greatly by monitoring the CC Wiki and keeping down spam) wrote to say that he was getting 503 errors from the wiki.  I explained that we were having problems, but that it should be working at that moment.  He wrote back to mention that /Special:NewFiles was still returning a 503.  Sure
enough, not only did it return a 503, but it hung for 30s to a minute, and eventually <a href="http://varnish-cache.org/">Varnish</a> would return the 503 error.

Mediawiki debugging was not terribly explicit, but I did notice that the logging for such a request always ended with information about Mediawiki invoking ImageMagick to resize an image.  I went through our LocalSettings.php file and found that we had $wgUseImageMagick set to true.  I commented it out, and voilà, the page starting working.  I uncommented $wgUseImageMagick and then bumped $wgMaxShellMemory to an arbitrarily high number.  This fixed it too.  Apparently ImageMagick was running out of allowed memory causing not only the page to hang while it ate up memory, but apparently it was also taking down the Apache process with it, because Apache never even got to logging the request.   I couldn't think of why we'd be using ImageMagick instead of just using PHP's GD libraries, which seemed to work without any special settings or bumping $wgMaxShellMemory, so I just removed the use of ImageMagick.

I'm guessing our problem was something like this: bots and crawlers were hitting the /Special:NewFiles page repeatedly with an incremental &from= query parameter, and each Apache process would hang until eventually we reached Apache's MaxClients setting, then requests would start to back up in Varnish's queue, and the machine would slow to a crawl and eventually become unresponsive.

Hopefully this supposition is true, and we not only have a fully functional wiki again, but the systemic problems with the server are now resolved.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2010-06-04 21:09:17</wp:post_date>
		<wp:post_date_gmt>2010-06-04 21:09:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>recent-instability-of-the-cc-wiki-imagemagick</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="imagemagick"><![CDATA[imagemagick]]></category>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #2</title>
		<link>http://labs.creativecommons.org/2010/06/08/gsoc-cc-wordpress-plugin-weekly-report-2/</link>
		<pubDate>Tue, 08 Jun 2010 15:20:23 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
For last week's work on <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">the plugin</a>, I had two targets, both related to the goal of making the interface functional: First, saving <i>license</i>, <i>rights holder</i> and <i>attribution <abbr title="Uniform Resource Locator">URL</abbr></i> in the database and enabling the Wordpress media manager to display that information; second, generating the <i><abbr title="Recourse Description Framework in Attributes">RDFa</abbr></i>-enriched markup using those aforementioned three bits. While I succeeded in generating the markup, when trying to actually save the input, I hit a wall, neither being able to figure out how this <em>should</em> be done, nor how it <em>could</em> be done. By the way, a <a href="http://xplus3.net/2008/11/17/custom-thumbnails-wordpress-plugin/">blog post about a thumbnail plugin</a> helped me understand which hooks are actually important.
</p>
<p>
The added functionality is easily explained: If a Creative Commons license is selected, the standard Wordpress markup generating behaviour is replaced by the plugin's. Two screenshots exemplify this development:
</p>
<ul>
	<li><a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/partially-functional-interface.png">the interface</a></li>
	<li><a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/generated-markup-rdfa.png">generated markup</a></li>
</ul>
<p>
As always, this version can be viewed and checked out at the <a href="http://code.creativecommons.org/viewgit/wordpress-cc-plugin.git/">official Git repository</a>. For this week, I will be focusing on stylesheets and trying to further tackle the saving issue.
</p>
<p>
On a related note, the inconsistent order of parameters regarding Wordpress functions, the lack of easy debugging facilities and the subtle differences between double quoted and single quoted strings added to my frustration.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date>2010-06-08 15:20:23</wp:post_date>
		<wp:post_date_gmt>2010-06-08 15:20:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[html5]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC Firefox Extension: Project Introduction and Weekly Reports #1-2</title>
		<link>http://labs.creativecommons.org/2010/06/08/gsoc-ccffext-1-2/</link>
		<pubDate>Tue, 08 Jun 2010 21:09:24 +0000</pubDate>
		<dc:creator><![CDATA[igorlukanin]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=529</guid>
		<description></description>
		<content:encoded><![CDATA[Hello, my name's Igor Lukanin. I'm a 21 year old student of the <a href="http://ustu.ru/">Ural Federal University</a> located in <a href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=Russian+Federation,+Sverdlovskaya+oblast,+Yekaterinburg&amp;sll=37.0625,-95.677068&amp;sspn=33.710275,53.789062&amp;ie=UTF8&amp;hq=&amp;hnear=Yekaterinburg,+gorodskoy+okrug+gorod+Ekaterinburg,+Province+of+Sverdlovsk,+Russian+Federation&amp;ll=43.834527,139.21875&amp;spn=129.775476,346.289063&amp;z=2">Yekaterinburg</a>, Russia. Despite the fact that I study IT security, I've always been interested in the <abbr title="Free and Open Source Software">FOSS</abbr> initiative and licensing issues, that's why I'm proud to present the other <abbr title="Google Summer of Code">GSoC</abbr> project here at <abbr title="Creative Commons">CC</abbr>. But first, I should thank <a href="http://creativecommons.org/about/people#nathanyergler">Nathan Yergler</a> who was giving valuable comments on the project proposal, and my mentor <a href="http://creativecommons.org/about/people#johndoig">John Doig</a> who is always willing to help, letting me work around any obstacles I face.
<h3>Project Introduction</h3>
The project is intended to develop an extension for Mozilla Firefox web browser that would make it easy to find <abbr title="Creative Commons">CC</abbr>-licensed content on browsed pages, know the license and its terms, clarify their meaning and generate correct attribution information for content re-usage. The major advantage of this project is its (future) nice and polished <abbr title="user interface">UI</abbr> (a <a href="http://simplest-image-hosting.net/i0-info-png-0.png">mockup</a> of the browser's Page Info dialog is available).
<!--more-->
Paying attention to the seamy side of life, I should mention that the extension would do its magic by parsing RDFa metadata. It seems that it would perfectly consume the outcome of the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/"><abbr title="Google Summer of Code">GSoC</abbr> Wordpress plugin</a>, as well as work with a huge number of existing web-sites providing RDFa metadata.

A bit more information may be found in the <a href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/doc/proposal.pdf">project proposal</a> (choose Save Link As from the context menu).
<h3>Weekly Reports #1-2</h3>
The strong side of my project is that the result of the development may be easily observed. The <a href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/cc.ff_ext.xpi">current version</a> of the extension (as well, choose Save Link As from the context menu, then install) is capable of parsing RDFa metadata and showing gathered triples in a separate tab of the browser's Page Info dialog (an icon in the location bar may be clicked to get there).

I spent the 1st week creating the skeleton code of my extension and observing available solutions that may be used to parse RDFa data in JavaScript.

The 2nd week was spent integrating the <a href="http://www.w3.org/2006/07/SWD/RDFa/impl/js/">RDFa in Javascript</a> library by Ben Adida, Nathan Yergler, and Jeni Tennison, using it to parse and cache RDFa matadata while browsing web pages, creating a new tab in the Page Info dialog for this info to be shown. The changes in the code caused the need for a refactoring which I'm currently thinking of.

The current state of the project shows that its not too much effort left to start implementing the UI that was shown in the proposal.
<h3>Contact details</h3>
The project is hosted in the <a href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/"><abbr title="Creative Commons">CC</abbr> Code repository</a>, so you may always fetch and try the latest version of the extension (for example, using <code>wget http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/cc.ff_ext.xpi</code>).

I'll be pleased if anyone tries the extension, probably <a href="http://code.creativecommons.org/issues/">reporting any issues</a>. It's generally useless now, however you may find it interesting to dig into the raw RDFa of web-sites. Anyway, I'd like to hear any opinions here in comments, on the <code>irc.freenode.net#cc</code> channel, by <a href="mailto:mail@igor.lukanin.name">email</a> or via <a title="jabber@igor.lukanin.name">Jabber</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>529</wp:post_id>
		<wp:post_date>2010-06-08 21:09:24</wp:post_date>
		<wp:post_date_gmt>2010-06-08 21:09:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-ccffext-1-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mozilla-firefox"><![CDATA[Mozilla Firefox]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[erlehmann]]></wp:comment_author>
			<wp:comment_author_email>nils@dieweltistgarnichtso.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.204.137.64</wp:comment_author_IP>
			<wp:comment_date>2010-06-08 22:50:48</wp:comment_date>
			<wp:comment_date_gmt>2010-06-08 22:50:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am already generating valid and useful RDFa with my project. Try it out ! :)

Also, will you also implement HTML5 microdata parsing ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>25</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC OpenOffice Plugin Updates: Weekly Report 1 &amp; 2</title>
		<link>http://labs.creativecommons.org/2010/06/14/gsoc-openoffice-plugin-updates-weekly-report-1-2/</link>
		<pubDate>Mon, 14 Jun 2010 17:07:32 +0000</pubDate>
		<dc:creator><![CDATA[akila87]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=558</guid>
		<description></description>
		<content:encoded><![CDATA[For the last two weeks I was focusing on the User Interface and the Picasa support. At first lets look at the new changes to the license insertion dialog. I have changed the UI to something similar to the <a href="http://creativecommons.org/choose/">license choosing page</a> in Creative Commons website. The new UI is quite simple to understand and it will not confuse the user. I have also included the tips about each choice. Currently you can see them when you move your mouse over the "i" image in the right side of each choice. The tip is displayed in a single line and that cannot be changed. I am going to add a small dialog for each of the tip which will activate when you click the "i" for the choice.

[caption id="" align="aligncenter" width="460" caption="New UI"]<a href="http://lh3.ggpht.com/_LE-WXW82VPE/TA-xeFhPV1I/AAAAAAAAAGA/4L8gngUBYW0/s800/new%20layout.png"><img title="New UI" src="http://lh3.ggpht.com/_LE-WXW82VPE/TA-xeFhPV1I/AAAAAAAAAGA/4L8gngUBYW0/s800/new%20layout.png" alt="New UI" width="460" height="288" /></a>[/caption]

The next thing I did in the past two week was Picasa support for the insert image menu. Now you can add creative commons licensed images. Currently you cannot select the images by license and the image sizes when inserting the image to the document. I am hopeing to add this feature very soon.

Current version of the plugin can be downloaded from <a href="http://extensions.services.openoffice.org/en/project/ccoootest">here</a> and the source can be found in <a href="http://code.creativecommons.org/viewsvn/ccooo/branches/akila-gsoc-2010/">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>558</wp:post_id>
		<wp:post_date>2010-06-14 17:07:32</wp:post_date>
		<wp:post_date_gmt>2010-06-14 17:07:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-openoffice-plugin-updates-weekly-report-1-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="picasa"><![CDATA[picasa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="post_tag" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>DiscoverEd Code Sprint: Day 1</title>
		<link>http://labs.creativecommons.org/2010/06/16/discovered-code-sprint-day-1/</link>
		<pubDate>Wed, 16 Jun 2010 14:14:41 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[This week some of us from Creative Commons are in lovely East Lansing, Michigan <a href="http://www.msu.edu/">Michigan State University</a> for the <a href="http://wiki.creativecommons.org/DiscoverEd_Sprint_(June,_2010)">DiscoverEd code sprint</a> hosted by the folks at <a href="http://vudat.msu.edu/">MSU vuDAT</a>.

For those of you not familiar with <a href="http://discovered.creativecommons.org/search/">DiscoverEd</a>, it first began as a Creative Commons project to show how structured data can enable and improve search and discovery of educational resources on the web.

Search and discovery of education resources has been a hot topic within the OER (Open Educational Resources) community for some time. Given the decentralization of high-quality educational resources free to use, remix, and redistribute existing on the web, the question has been "How can learners and instructors find and discover these resources in useful ways?" CC has previously done significant work in the metadata domain, having developed a <a href="http://wiki.creativecommons.org/CC_REL">W3C-published vocabulary</a> for publishing licensing metadata and being involved in early <a href="http://sciencecommons.org/projects/data/">efforts</a> to being semantic web concepts to scientific data. DiscoverEd not only represents a continuation of CC's efforts to make data interoperability work, but insofar as it deals in metadata about open content, it's an interesting synthesis of open, standardized data formats and open content.

Development for DiscoverEd has recently been supported by <a href="www.oerafrica.org/agshare">AgShare</a>, an MSU-led project funded by the Gates Foundation:
<blockquote>The aim of the AgShare planning and pilot project is to create a scalable and sustainable collaboration of existing organizations for African publishing, localizing, and sharing of teaching and learning materials that fill critical resource gaps in African MSc agriculture curriculum and that can be modified for other downstream uses.</blockquote>

AgShare involves institutional collaboration for the modification and dissemination of very useful open educational content internationally. Creative Commons is supporting the project by developing, documenting, and supporting an instance of DiscoverEd educational search that will provide learners in Africa with a method to find or discover educational resources curated by participating organizations.

Which takes me to where we are today: CC and our AgShare partners at MSU put together a DiscoverEd code sprint to connect our AgShare developers with the community of programmers and downstream users who are interested in educational resource search and discovery using structured data to find common ground and areas for collaboration. Most participants have listed themselves on the <a href="http://wiki.creativecommons.org/DiscoverEd_Sprint_(June,_2010)">sprint wiki-page</a>.

After brief introductions, everyone spent some time <a href="http://wiki.creativecommons.org/Hacking_DiscoverEd">instantiating the codebase</a>, getting access to <a href="http://gitorious.org/discovered">version control</a>, sharing <a href="http://wiki.creativecommons.org/DiscoverEd_Glossary">commonly used terms</a>, and settling other coordination issues. That took up the first half of the day, and after lunch at a great <a href="http://www.yelp.com/biz/altus-ethiopian-cuisine-east-lansing">Ethiopian restaurant</a>, we returned to begin work on new code. Given the unfamiliarity many of the developers had with the codebase, the original plan for pair programming was abandoned to allow larger groups:

One group focused on developing code to allow users to add missing or additional metadata about resources.  This would enable arbitrary tags to be injected into both the Jena triple-store and Lucene documents from the Nuch front-end. This functionality would extend the reach of Nutch's search beyond what's found through aggregation, to include metadata provided by users, or a community.

Another group focused on developing a plugin interface for storing and retrieving metadata from external and services and databases. This functionality could potentially supply metadata for resources without any metadata, or could supplement existing metadata with additional data from other services and databases. A splinter group of that original team took time to analyze the OpenCalais API to see if it could be integrated with the above DiscoverEd functionality to provide back useful metadata.

The last team worked on getting up to speed on the DiscoverEd architecture and creating instructions for getting it running in an Ubuntu virtual box environment on Windows, as well as test-driving new documentation for hacking DiscoverEd. This team also spent time mapping out the work needed to implement more flexible query filtering.  This turned out to be an invaluable exercise as they discovered inefficiencies and unnecessary code in the DiscoverEd codebase (namely, in how DiscoverEd maps query strings for metadata to Lucene index data), and are in the process of planning for a new metadata query syntax.

Day 2 will likely be an extension of today's work. Look for another post soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date>2010-06-16 14:14:41</wp:post_date>
		<wp:post_date_gmt>2010-06-16 14:14:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>discovered-code-sprint-day-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="post_tag" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="category" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="post_tag" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="ethiopian-food"><![CDATA[Ethiopian food]]></category>
		<category domain="post_tag" nicename="jena"><![CDATA[Jena]]></category>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="msu"><![CDATA[MSU]]></category>
		<category domain="post_tag" nicename="oer"><![CDATA[OER]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>165</wp:comment_id>
			<wp:comment_author><![CDATA[DiscoverEd Code Sprint: Day 2 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/17/discovered-code-sprint-day-2/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:17:31</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:17:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Day 2 of the DiscoverEd code sprint was largely a continuation of work that started on Day 1. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #3</title>
		<link>http://labs.creativecommons.org/2010/06/16/gsoc-cc-wordpress-plugin-weekly-report-3/</link>
		<pubDate>Wed, 16 Jun 2010 01:16:37 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=594</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
This week, development on the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a> proceeded at a faster pace. Shortly after I posted the <a href="http://labs.creativecommons.org/2010/06/08/gsoc-cc-wordpress-plugin-weekly-report-2/">last report</a>, Nathan Kinkade pointed out the fix to the bug that prevented saving, a simple type error. On the next day, I implemented stylesheet support, hereby adapting three styles I originally made for my defunct <a href="http://github.com/erlehmann/cc-figure">microdata plugin</a>, and an admin interface to switch between them (<a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/admin-interface-stylesheets.png">screenshot</a>). Additional more or less notable changes are:
</p>

<ul>
    <li>metadata is not only saved now, but will also be retrieved to populate form fields</li>
    <li>multiple <abbr title="Resource Document Framework in Attributes">RDFa</abbr> fixes, machine-readable data should be correct now</li>
    <li>the plugin has a directory structure, earlier versions were just a single file</li>
    <li>there is now a sample file for stylesheet development</li>
    <li>metadata is also saved when the media item is inserted into the post</li>
    <li>the plugin now uses the <a href="http://api.creativecommons.org/docs/index.html">Creative Commons <abbr title="Application Programming Interface">API</abbr></a> to get the current license version</li>
</ul>

<p>
The current output of the plugin can be seen at my <a href="http://gsoc2010.dieweltistgarnichtso.net/?p=1"><abbr title="Google Summer of Code">GSoC</abbr> test blog</a> and checked using the <abbr title="World Wide Web Consortium">W3C</abbr>s <a href="http://www.w3.org/2007/08/pyRdfa/"><abbr title="Resource Document Framework in Attributes">RDFa</abbr> distiller and parser</a>.
</p>

<p>
On a less technical note, I have met three people relevant to plugin development: When I explained to <i>Julia Seeliger</i> that I was implementing her <a href="http://julia-seeliger.de/wunschzettel-creative-commons-plugin-fur-wordpress/">plugin idea</a>, she was <a href="http://twitter.com/zeitrafferin/status/16031917904">delighted</a>. <i>Max Winde</i>, creator of the inspiring <a href="http://spreeblick.com"><i>Spreeblick</i></a> plugin, suggested including an easy option for re-embedding the relevant content, possibly using Javascript. Last but not least, <i>Moritz Metz</i>, a radio journalist and blogger at <a href="http://breitband.dradio.de/"><i>Breitband</i></a>, intending to use the plugin when it is finished, told me about his use of <a href="http://codex.wordpress.org/Determining_Plugin_and_Content_Directories">alternate content and plugin directories</a> and urged me to consider supporting not only inline content, but also <a href="http://markjaquith.wordpress.com/2009/12/23/new-in-wordpress-2-9-post-thumbnail-images/">post thumbnail images</a>.
</p>
<p>
I consider this version of the plugin not finished, but functional enough for testers, who are encouraged to check out the <a href="http://code.creativecommons.org/viewgit/wordpress-cc-plugin.git/">Git repository</a>. For the coming week, I will look into the issue surrounding alternate content and plugin directories and proceed to polish the existing features.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date>2010-06-16 01:16:37</wp:post_date>
		<wp:post_date_gmt>2010-06-16 01:16:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="ccapi"><![CDATA[cc.api]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="juliaseeliger"><![CDATA[juliaseeliger]]></category>
		<category domain="post_tag" nicename="maxwinde"><![CDATA[maxwinde]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="moritzmetz"><![CDATA[moritzmetz]]></category>
		<category domain="post_tag" nicename="pyrdfa"><![CDATA[pyrdfa]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>DiscoverEd Code Sprint: Day 2</title>
		<link>http://labs.creativecommons.org/2010/06/17/discovered-code-sprint-day-2/</link>
		<pubDate>Thu, 17 Jun 2010 14:23:47 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=610</guid>
		<description></description>
		<content:encoded><![CDATA[Day 2 of the <a href="http://discovered.creativecommons.org/search/">DiscoverEd</a> <a href="http://wiki.creativecommons.org/DiscoverEd_Sprint_(June,_2010)">code sprint</a> was largely a continuation of work that started on <a href="http://labs.creativecommons.org/2010/06/16/discovered-code-sprint-day-1/">Day 1</a>.

The team working on a plugin architecture for DiscoverEd finished their project, which was to build an extension point that enables plugins to pull arbitrary metadata from external sources. At the beginning of the day they had to finish some tests for the new support for arbitrary metadata added in Day 1, but by the end of the day were able to merge their new functionality back into the DiscoverEd repository. They were even able to build a small proof-of-concept plugin that pulled data from the <a href="http://delicious.com/help/tools">delicious.com API</a> into the Jena store, which later makes its way into the Lucene index. Tomorrow they'll start looking at developing support for custom vocabularies and ontologies (such as <a href="http://en.wikipedia.org/wiki/AGROVOC">AGROVOC</a>).

The flexible query syntax team were able to commit their changes to the DiscoverEd code that makes it so you can configure arbitrary metadata queries. For example, if you had been running a DiscoverEd instance to search a feed of OpenCourseWare resources that uses <a href="http://en.wikipedia.org/wiki/Dublin_Core">Dublin Core</a> metadata in RDFa format to express information about those resources, and wanted to enable searches on metadata which weren't supported in DiscoverEd, you would have had to write Java code to enable that. With this change you can now just create a configuration file mapping an arbitrary tag to that metadata, which will store that metadata along side the tag in the Lucene index. This allows Nutch (which searches the Lucene index) to search for those custom tags in the config file. This code was pushed to a branch while the team spent the rest of the day chasing down a bug where only a subset of metadata gets successfully added to the Lucene index in their working environment.

The "user-generated metadata" team was able to create a test which adds a new resource into the Jena store, adds a tag to that resource, and verifies the tag was added... and it passes! Their next step is to create a test for a similar process in the Lucene index, such that a tag added to a new resource in the Jena store gets successfully added to the index and one can search for that tag through Nutch. The first test passing was a prerequisite for starting work on the second test.

Work continues into the third and final day, so look for a wrap-up report from Day 3 soon. The various repository commits can be <a href="http://gitorious.org/discovered">browsed on Gitorious</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>610</wp:post_id>
		<wp:post_date>2010-06-17 14:23:47</wp:post_date>
		<wp:post_date_gmt>2010-06-17 14:23:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>discovered-code-sprint-day-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="post_tag" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="category" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="post_tag" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="jena"><![CDATA[Jena]]></category>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="msu"><![CDATA[MSU]]></category>
		<category domain="post_tag" nicename="nutch"><![CDATA[nutch]]></category>
		<category domain="post_tag" nicename="oer"><![CDATA[OER]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>166</wp:comment_id>
			<wp:comment_author><![CDATA[DiscoverEd Code Sprint: Day 3 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/18/discovered-code-sprint-day-3/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-01 23:17:46</wp:comment_date>
			<wp:comment_date_gmt>2010-07-01 23:17:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] 1 and Day 2 of the DiscoverEd code sprint turned out to be very productive, and the third and final day [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>DiscoverEd Code Sprint: Day 3</title>
		<link>http://labs.creativecommons.org/2010/06/18/discovered-code-sprint-day-3/</link>
		<pubDate>Fri, 18 Jun 2010 19:11:55 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=633</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://labs.creativecommons.org/2010/06/16/discovered-code-sprint-day-1/">Day 1</a> and <a href="http://labs.creativecommons.org/2010/06/17/discovered-code-sprint-day-2/">Day 2</a> of the <a href="http://wiki.creativecommons.org/DiscoverEd_Sprint_(June,_2010)">DiscoverEd code sprint</a> turned out to be very productive, and the third and final day didn't disappoint either. All teams were able to complete or make significant contributions to useful new features.

Our team that originally developed support for arbitrary metadata and a <a href="http://wiki.creativecommons.org/Metadata_Retriever_Plugins">plugin architecture</a> to pull in external data in Day 1 and 2 switched to working on integrating branches with the main DiscoverEd source tree.  They spent some time fixing bugs in new code that connects the RDFa parser with the Jena store, so that it could be merged with other branches in the code repository, including their work on the metadata plugins, the master branch, and the provenance work previously begun by Creative Commons. After merging those branches, they also took some time to update their work from Day 1 and Day 2 to store the provenance of the metadata.  Towards the end of the day they began working on support for running all the DiscoverEd tests with a script.  After today they plan on doing some housekeeping work, namely creating documentation about new plugin support in the CC wiki.

The "flexible query interface" team continued to debug problems with DiscoverEd. They had identified the bugs encountered in Days 1 and 2, so they worked on transitioning away from an old metadata-writing API that they suspect doesn't work with the current version of Nutch. It appears this issue may be related to the upgrade from Nutch 0.8 to 1.1.  Going forward, they plan on migrating code to the new API, and testing if it resolves the problems.

The "user generated metadata" team decided to divide and conquer smaller tasks of their project. They mocked up the form interface and began work on building it into a JSP. They were also building tests for the back end of DiscoverEd, which basically test that once you add a tag, you can get the resource ID and the tag back through a search, and that it's been added into the Jena store such that when the Nutch index is run again the tag will be added to the Lucene index. They worked through a lot of merge conflicts, which had stalled development.

Creative Commons thanks <a href="http://www.oerafrica.org/Default.aspx?alias=www.oerafrica.org/agshare">AgShare</a> project funders (<a href="http://www.gatesfoundation.org/Pages/home.aspx">The Gates Foundation</a>), <a href="http://www.msu.edu/">MSU</a>, <a href="http://vudat.msu.edu/">vuDAT</a>, <a href="http://www.msuglobal.com/">MSU Global</a>, and to the <a href="http://wiki.creativecommons.org/DiscoverEd_Sprint_(June,_2010)#Attendees">participants</a> in the sprint for making all of the contributions to DiscoverEd over the past three days possible.

What makes DiscoverEd exciting is that, while most search engines use algorithmic analyses of resources alone for search, DiscoverEd can incorporate facts and semantic information provided by the publishers or curators, enabling more useful search. Structured data in standardized formats such as RDFa is a powerful way for otherwise unrelated projects and resource curators to cooperate and express facts about their resources in the same way so that third-party tools (like DiscoverEd) can use that data for other purposes (like search and discovery). We look forward to deploying this innovative tool for our AgShare partners to enable search and discovery of educational resources about agriculture and hope that it's found useful in other contexts as well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date>2010-06-18 19:11:55</wp:post_date>
		<wp:post_date_gmt>2010-06-18 19:11:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>discovered-code-sprint-day-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="post_tag" nicename="agshare"><![CDATA[AgShare]]></category>
		<category domain="category" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="post_tag" nicename="code-sprint"><![CDATA[code sprint]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="jena"><![CDATA[Jena]]></category>
		<category domain="post_tag" nicename="lucene"><![CDATA[Lucene]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="msu"><![CDATA[MSU]]></category>
		<category domain="post_tag" nicename="nutch"><![CDATA[nutch]]></category>
		<category domain="post_tag" nicename="oer"><![CDATA[OER]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[open source]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #4</title>
		<link>http://labs.creativecommons.org/2010/06/25/gsoc-cc-wordpress-plugin-weekly-report-4/</link>
		<pubDate>Fri, 25 Jun 2010 03:20:54 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=669</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
As some of you may have noticed, this report about the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">Wordpress <abbr title="Creative Commons">CC</abbr> plugin</a> is several days late. This is because I was unable to produce new substantial features and have hit a roadblock with the one that is most important right now: A filter.
</p>
<p>
In its current state, the plugin works fairly straightforward; it generates the markup and inserts it into the post. When planning it, I thought that would suffic — however, Nathan Kinkade advised me that several use cases would break this simple behaviour: If, for example, the chosen license is changed, there is no way to update all posts containing the already generated markup.
</p>
<p>
The solution lies in an intermediate form of markup that gets applied every time a page containing cc-licensed media is generated. My current approach looks like this: <code>[[cc:18]]</code> (where 18 is the id of the image/audio/video). This should get converted to the already known <abbr title="Resource Description Framework in Attributes">RDFa</abbr>-enriched <abbr title="Hypertext Markup Language">HTML</abbr>; currently, however, a bug in my code apparently makes Wordpress return a blank page whenever I activate that filter.
</p>
<p>
On a related note, someone in <a href="irc://chat.freenode.net/#swig">#swig on FreeNode</a> advised me to look at <i>Oshani Seneviratne</i>s <a href="http://dig.csail.mit.edu/2009/Clipboard/">semantic clipboard</a>; as I can tell, it would go together nicely with my plugin.
</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>669</wp:post_id>
		<wp:post_date>2010-06-25 03:20:54</wp:post_date>
		<wp:post_date_gmt>2010-06-25 03:20:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[GSoC CC Wordpress Plugin: Weekly Report #5 - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/06/30/gsoc-cc-wordpress-plugin-weekly-report-5/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-07-13 19:26:18</wp:comment_date>
			<wp:comment_date_gmt>2010-07-13 19:26:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] This time, however, I can deliver; the current version of the plugin sports the filter system I unsuccessfully tried to implement the week before: While previous versions of the plugin inserted HTML directly into the post [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #5</title>
		<link>http://labs.creativecommons.org/2010/06/30/gsoc-cc-wordpress-plugin-weekly-report-5/</link>
		<pubDate>Wed, 30 Jun 2010 17:08:33 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=681</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Another delayed report, late by a day. This time, however, I can <em>deliver</em>; the current version of the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a> sports the filter system I <a href="http://labs.creativecommons.org/2010/06/25/gsoc-cc-wordpress-plugin-weekly-report-4/">unsuccessfully tried to implement</a> the week before: While previous versions of the plugin inserted <abbr title="Hypertext Markup Language">HTML</abbr> directly into the post (<a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/generated-markup-rdfa.png">example screenshot</a>), the new iteration only inserts a <em>shortcode</em> containing the attachment ID and a caption (e.g. <code>[[cc:18|some caption]]</code>). The actual markup is then generated when the page is requested. This satisfies use cases in which a blogger wishes to modify media metadata later on, like changing license or alt text.
</p>
<p>
Less visible for the user, I was able to unify the two saving functions triggered on saving and inserting media and adding a metadata field which holds the exact license <abbr title="Uniform Resource Identifier">URI</abbr> for every attachment (determined using the <a href="http://api.creativecommons.org/docs/index.html">Creative Commons <abbr title="Application Programming Interface">API</abbr></a>). I recommend checking out the <a href="http://code.creativecommons.org/viewgit/wordpress-cc-plugin.git">repository</a>.
</p>
<p>
For the coming week, I will look into <a href="http://markjaquith.wordpress.com/2009/12/23/new-in-wordpress-2-9-post-thumbnail-images/">post thumbnails</a>, which require no inline markup for purely decorative pictures, like those used at <a href="http://www.spreeblick.com/"><i>Spreeblick</i></a> and <a href="http://breitband.dradio.de/"><i>Breitband</i></a>. I will also explore alternate content and plugin directories again, as my last attempt regarding that issue was a complete failure.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>681</wp:post_id>
		<wp:post_date>2010-06-30 17:08:33</wp:post_date>
		<wp:post_date_gmt>2010-06-30 17:08:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="ccapi"><![CDATA[cc.api]]></category>
		<category domain="post_tag" nicename="filter"><![CDATA[filter]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Creative Commons Open Office Plugin gets a new UI and supports for Public Domain tools</title>
		<link>http://labs.creativecommons.org/2010/07/03/creative-commons-open-office-plugin-gets-a-new-ui-and-supports-for-public-domain-tools/</link>
		<pubDate>Sat, 03 Jul 2010 01:15:17 +0000</pubDate>
		<dc:creator><![CDATA[akila87]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=703</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div><strong>User Interface</strong></div>
<div><span style="font-weight: normal">For the past few weeks I  have been working on changing the User Interface and adding public domain tools for the Open Office plugin. In my previous post I introduced a new UI for adding creative Commons License, which is more simple and less confusing. In the same way I tried to make the UI for public domain tools as simple as possible. </span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">The first idea was to make a wizard for the Public Domain tools. The disadvantage of this was you want to click “Next” several times to add the license. This may be a good option for a new user, but for an experienced user  this may become an annoying.</span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">The second idea was to display the license deed and necessary instructions in the same dialog, but this made the dialog too confusing and large (may be larger than the screen height).</span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">The next idea was to add separate menu items for CC0 and Public Domain, but this was rejected because this would have less attention to the CC0 and the Public Domain.</span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">Finally Nathan came up with a better idea: to use tabs in the same dialog. This is a good idea in several ways. You have all Creative commons licensing and Public Domain tools in the same place, so it is easy to switch between them. Less area and less confusing. </span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">So this is the new user interface for the plugin. And I would like to thank <a href="http://creativecommons.org/about/people#alexroberts" target="_blank">Alex Roberts</a>, <a href="http://blog.grossmeier.net/">Greg Grossmeier</a> and my mentors <a href="http://creativecommons.org/about/people#christopherwebber">Christopher</a> and <a href="http://creativecommons.org/about/people#nathanyergler">Nathan</a> for their valuable ideas.</span></div>
<div><span style="font-weight: normal">
</span></div>
<div>

[caption id="" align="alignleft" width="280" caption="Creative Commons Tab"]<a href="http://lh4.ggpht.com/_LE-WXW82VPE/TCy5nLN7azI/AAAAAAAAAH8/FjqnXMDTUrA/s512/Screenshot.png"><img class=" " src="http://lh4.ggpht.com/_LE-WXW82VPE/TCy5nLN7azI/AAAAAAAAAH8/FjqnXMDTUrA/s512/Screenshot.png" alt="" width="280" height="296" /></a>[/caption]

[caption id="" align="alignright" width="278" caption="CC0 Tab"]<a href="http://lh4.ggpht.com/_LE-WXW82VPE/TCy5nJMXN_I/AAAAAAAAAIA/_IxDfWeb4tE/s512/Screenshot-1.png"><img class=" " src="http://lh4.ggpht.com/_LE-WXW82VPE/TCy5nJMXN_I/AAAAAAAAAIA/_IxDfWeb4tE/s512/Screenshot-1.png" alt="" width="278" height="287" /></a>[/caption]

[caption id="" align="aligncenter" width="277" caption="Public Domain Tab"]<a href="http://lh3.ggpht.com/_LE-WXW82VPE/TCy5nWIxE1I/AAAAAAAAAIE/yURkDLdjC-c/s512/Screenshot-2.png"><img class=" " src="http://lh3.ggpht.com/_LE-WXW82VPE/TCy5nWIxE1I/AAAAAAAAAIE/yURkDLdjC-c/s512/Screenshot-2.png" alt="" width="277" height="290" /></a>[/caption]

</div>
<div><span style="font-weight: normal">
</span></div>
<div><strong>CC0 &amp; Public Domain</strong></div>
<div><span style="font-weight: normal">Adding CC0 was one of the most important task of this project. Now users can use CC0 and Public Domain tools from the license selection dialog. Both meta data (OpenOffice.org fields and RDF) and the human viewable text will be added to the document. </span></div>
<div><span style="font-weight: normal">
</span></div>
<div><span style="font-weight: normal">The dialog will warn the user about the usage of CC0 and the Public Domain. This will help a new user to select the tool appropriately.</span></div>
<div><span style="font-weight: normal"> </span></div>

[caption id="" align="aligncenter" width="439" caption="CC0"]<a href="http://lh4.ggpht.com/_LE-WXW82VPE/TCy9kks5QWI/AAAAAAAAAIk/cHADsQ4dBfE/Screenshot-3.png"><img src="http://lh4.ggpht.com/_LE-WXW82VPE/TCy9kks5QWI/AAAAAAAAAIk/cHADsQ4dBfE/Screenshot-3.png" alt="" width="439" height="111" /></a>[/caption]

</div>

[caption id="" align="aligncenter" width="439" caption="Public Domain"]<a href="http://lh6.ggpht.com/_LE-WXW82VPE/TCy9kh770oI/AAAAAAAAAIo/SguqNV9nfnY/Screenshot-4.png"><img src="http://lh6.ggpht.com/_LE-WXW82VPE/TCy9kh770oI/AAAAAAAAAIo/SguqNV9nfnY/Screenshot-4.png" alt="" width="439" height="85" /></a>[/caption]

Current version of the plugin can be downloaded from <a href="http://extensions.services.openoffice.org/en/project/ccoootest">here</a> and the source can be found in <a href="http://code.creativecommons.org/viewsvn/ccooo/branches/akila-gsoc-2010/">here</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>703</wp:post_id>
		<wp:post_date>2010-07-03 01:15:17</wp:post_date>
		<wp:post_date_gmt>2010-07-03 01:15:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-commons-open-office-plugin-gets-a-new-ui-and-supports-for-public-domain-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>168</wp:comment_id>
			<wp:comment_author><![CDATA[LibreOffice and CC OpenOffice Plugin: Good to go - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/12/08/libreoffice-and-cc-openoffice-plugin/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-04-03 20:58:59</wp:comment_date>
			<wp:comment_date_gmt>2011-04-03 20:58:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Wajirasena gave a wonderful overhaul to our OpenOffice plugin with many improvements, including a slick new user interface, support for public domain tools, and many other cool things. Recently he contacted us having looked into whether or not that plugin [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Labs blog now at WordPress 3.0; no more WordPress-mu</title>
		<link>http://labs.creativecommons.org/2010/07/02/labs-blog-now-at-wordpress-3-0-no-more-wordpress-mu/</link>
		<pubDate>Fri, 02 Jul 2010 19:25:31 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=734</guid>
		<description></description>
		<content:encoded><![CDATA[For quite a few years CC has maintained an installation of <a href="http://mu.wordpress.org/">WordPress-mu</a>, which has hosted this blog, as well as blogs for a couple of CC jurisdictions.  Since CC's <a href="http://creativecommons.org">main site</a> is built on <a href="http://wordpress.org">WordPress</a>, this meant that with every new release of WordPress we would have to upgrade the main site, and also our WordPress-mu install.  Upgrading the main CC site was/is very easy, because it is managed with <a href="http://code.creativecommons.org/viewsvn/ccwordpress/">version control</a>.

Well, with the release of WordPress 3.0, the functionality of WordPress-mu was integrated into the core WordPress code, so it's no longer necessary to maintain two separate code bases.  Upgrading Labs to WordPress 3.0 was (mostly) as easy as checking out <a href="http://code.creativecommons.org/viewsvn/ccwordpress/branches/production/">the code</a> that runs creativecommons.org and dropping our WordPress-mu wp-config.php file into it, then running the update.php script.  We now maintain a single WordPress code base that runs both creativecommons.org, as well as our multi-site installation, which hosts this blog.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>734</wp:post_id>
		<wp:post_date>2010-07-02 19:25:31</wp:post_date>
		<wp:post_date_gmt>2010-07-02 19:25:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>labs-blog-now-at-wordpress-3-0-no-more-wordpress-mu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress-mu"><![CDATA[wordpress-mu]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC Firefox Extension: Status Report</title>
		<link>http://labs.creativecommons.org/2010/07/11/gsoc-firefox-extension-status-report/</link>
		<pubDate>Sun, 11 Jul 2010 17:34:20 +0000</pubDate>
		<dc:creator><![CDATA[igorlukanin]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=745</guid>
		<description></description>
		<content:encoded><![CDATA[The extension for Firefox web browser I'm developing has a number of improvements in the code base, as well as in the UI. So, ladies and gentlemen, let`s get familiar with them.

The <a href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/cc.ff_ext.xpi">current version</a> of the extension may be downloaded and tried yourself (choose Save Link As from the context menu, then install).
<!--more-->
<h3>Technical docs update, current focus and progress</h3>
There`re two docs I`ve put in the repo: <a title="the 1st" href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/doc/FUNCSPEC">the 1st</a>, describing the UI the extension has/would have and the RDFa predicates it perceives/would perceive, and <a title="the 2nd" href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/doc/WEBSITES">the 2nd</a>, describing what web sites the extension is tested against now. This docs may be primarily used to see what low-level features are going to be implemented in the nearest future, as well as to value the progress.<img src="../wp-includes/js/tinymce/plugins/wordpress/img/trans.gif" alt="" />

Now that development is focused on enlarging the list of supported RDFa predicates, that would lead to drastic UI improvements.

I'm proud to say that for now two languages (English &amp; Russian) are maintained for the UI, so I'm hoping to catch the most part of possible localization problems before I actually move to multi-language support. Also, a <a title="smart way" href="https://developer.mozilla.org/en/Localization_and_Plurals">smart way</a> of handling plurals is introduced (for example, used in the location bar icon tooltip text), being one of the ways to create a human being-friendly UI.
<h3>Development process-related aspects</h3>
There`s a number of aspects I had "fun" to discover about the Firefox and its internal mechanisms.

The 1st thing is a bit obvious: it has a strong legacy impact, at least in the UI. I had pleasure to dig into the UI code of Fx (written in XUL/CSS/JavaScript), using a text editor and the DOM Inspector<a title="DOM Inspector" href="https://developer.mozilla.org/en/dom_inspector"></a>. Some UI elements that are viewed as a box or a label, are represented as a number (up to 5-6 and more) of nested blocks. Well, quite a common case for an average web page, but too bad if you want to create a component looking the same, so that you have to collect all those random n-pixel paddings specified for every nested element.

The 2nd thing relates to the recommended way to point the browser to the extension being developed. The way (mentioned <a href="http://blog.mozilla.com/addons/2009/01/28/how-to-develop-a-firefox-extension/">here</a>) is to create a text file in the extensions` directory in your profile containing the path to the extension directory (so, it may be put anywhere). I though this mechanism is primarily supported for Windows, because creating symlinks is not a very common operation there (what I did myself). Then, while testing extension uninstall process, it appeared that Fx just removes all files (and keeps directories) in the place of an extension when it gets uninstalled. Working perfectly when deleting a usual extension (a single zip-compressed *.xpi file), this behavior used to silently drop my local git repo, making to think of not using symlinks/doing frequent backups/pushing on every commit. :)
<h3>Feedback</h3>
Al usual, I'll be pleased if anyone tries the extension, probably <a href="http://code.creativecommons.org/issues/">reporting any issues</a>. Any opinions are welcome here in comments, on the <code>irc.freenode.net#cc</code> channel, by <a href="mailto:mail@igor.lukanin.name">email</a> or via <a title="jabber@igor.lukanin.name">Jabber</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>745</wp:post_id>
		<wp:post_date>2010-07-11 17:34:20</wp:post_date>
		<wp:post_date_gmt>2010-07-11 17:34:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-firefox-extension-status-report</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #6 / #7</title>
		<link>http://labs.creativecommons.org/2010/07/13/gsoc-cc-wordpress-plugin-weekly-report-6-7/</link>
		<pubDate>Tue, 13 Jul 2010 21:55:06 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=759</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
One week ago, my laptop's harddisk broke down during the afternoon. I had been accustomed to occasional data loss before — sometimes, pictures would be garbled and on one incident, a 100 <abbr title="Megabyte">MB</abbr> sound file was corrupted and could not be copied. However, as the kernel printed unpleasant warnings during <em>every</em> startup, aborting the normal boot process, insisting that the file system was damaged, I decided it was the proper time to panic and check the backups.
</p>
<p>
Getting a replacement drive took me several days. As I did not have money to spare, my first hurdle was activating the <abbr title="Google Summer of Code">GsoC</abbr> prepaid card.  To make it short, I was not able to activate the card using the error-prone web site, but succeeded in doing it by phone. When I finally held the new hard drive in my hands, I felt like an <abbr title="Role-Playing Game">RPG</abbr> character, who had in a side quest acquired the item necessary to continue his main endeavour; on sunday, almost all backups were applied.
</p>
<p>
Regarding the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a>, I have fixed a number of small bugs and also added several new features, listed below:
</p>
<ul>
	<li><b>Default licensing</b>: Users can now choose a license that gets applied to every attachment if they do not choose a specific license.</li>
	<li><b>Post thumbnail figures</b>: <a href="http://markjaquith.wordpress.com/2009/12/23/new-in-wordpress-2-9-post-thumbnail-images/">Wordpress post thumbnails</a> can now be embedded as figures with annotated markup, just like inline content. Since many theme authors do not properly filter the markup returned by the Wordpress function <a href="http://codex.wordpress.org/Function_Reference/the_post_thumbnail"><code>the_post_thumbnail()</code></a> (and similar ones), expecting only an <i>&lt;img&gt;</i> element, this option is disabled by default.</li>
	<li><b>Fallback links for multimedia content</b>: <i>&lt;audio&gt;</i>, <i>&lt;video&gt;</i> and <i>&lt;object&gt;</i> elements now sport a fallback link for browsers that do not support <abbr title="Hypertext Markup Language">HTML</abbr>5.</li>
	<li><b>Support for alternate content and plugin directories</b>: Since Wordpress 2.6, you can change the <a href="http://codex.wordpress.org/Determining_Plugin_and_Content_Directories">names of the <i>wp-content</i> and <i>plugins</i> directories</a>; earlier versions of the plugin did not cope with that. I had struggled with this issue before, but after <i>Moritz Metz</i> provided a working default configuration for <i>wp-config.php</i>, everything fell into place fast.</li>
	<li><b>New stylesheet</b>: I modified the existing <i>grau</i> style, using <a href="http://commons.wikimedia.org/wiki/Creative_Commons_icons#Small_Buttons">80×15 icons</a>. I am pondering setting it as the standard stylesheet for the plugin. This is how it looks: <img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/grau-icon-css.png" /></li>
</ul>
<p>
For this week, I will focus on making default licensing more expansive, adding differing license options for different types of media content and maybe even for single users. I will also try to modify the existing stylesheets so they work well with post thumbnail figures. As <i>Nathan Kinkade</i> suggested, I may expand the scope of the plugin to also manage licensing metadata of pages and posts.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>759</wp:post_id>
		<wp:post_date>2010-07-13 21:55:06</wp:post_date>
		<wp:post_date_gmt>2010-07-13 21:55:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-6-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="css"><![CDATA[css]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="html5"><![CDATA[html5]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>170</wp:comment_id>
			<wp:comment_author><![CDATA[Cristóbal Palmer]]></wp:comment_author>
			<wp:comment_author_email>cmp@cmpalmer.org</wp:comment_author_email>
			<wp:comment_author_url>http://pebkac.homelinux.net</wp:comment_author_url>
			<wp:comment_author_IP>206.53.107.236</wp:comment_author_IP>
			<wp:comment_date>2010-07-14 04:52:35</wp:comment_date>
			<wp:comment_date_gmt>2010-07-14 04:52:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Trying out the latest master now. Am I to understand that your plugin will only ever cover licensing of media, or will you eventually be adding code to handle per-post or per-page licensing (for example). Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>171</wp:comment_id>
			<wp:comment_author><![CDATA[erlehmann]]></wp:comment_author>
			<wp:comment_author_email>nils@dieweltistgarnichtso.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>88.75.59.120</wp:comment_author_IP>
			<wp:comment_date>2010-08-04 13:42:01</wp:comment_date>
			<wp:comment_date_gmt>2010-08-04 13:42:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The GSoC project is only about the media manager. However, as Wordpress handles attachments and posts nearly the same, it would be easy to add that in future.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>25</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC CC Firefox Extension + WordPress plugin = ?</title>
		<link>http://labs.creativecommons.org/2010/07/15/gsoc-cc-ffext-wpplugin/</link>
		<pubDate>Thu, 15 Jul 2010 20:10:05 +0000</pubDate>
		<dc:creator><![CDATA[igorlukanin]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=813</guid>
		<description></description>
		<content:encoded><![CDATA[Undoubtedly, it's very important for all GSoC student projects (and all projects under CC in general) to collaborate smoothly. A few days ago Nils Dagsson Moskopp, the developer of GSoC CC WordPress plugin, asked me to test the plugin to work with the extension for Firefox web browser I'm developing.

Today, releasing <a href="http://code.creativecommons.org/viewgit/cc.ff_ext.git/plain/cc.ff_ext.xpi">version 0.7.0</a> of the extension, I recorded a <a href='http://www.youtube.com/watch?v=u_px-jKy_YE&amp;hd=1'>short screencast</a> (watch on YouTube), showing how the extension interprets RDFa information of the WordPress plugin <a href="http://gsoc2010.dieweltistgarnichtso.net/?p=45">test page</a>.

I hope this video would make us believe we're on the right way. ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>813</wp:post_id>
		<wp:post_date>2010-07-15 20:10:05</wp:post_date>
		<wp:post_date_gmt>2010-07-15 20:10:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-ffext-wpplugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Creative Commons OpenOffice Plugin now Supports Internationalization.</title>
		<link>http://labs.creativecommons.org/2010/07/21/creative-ommons-openoffice-plugin-supports-for-internationalization/</link>
		<pubDate>Wed, 21 Jul 2010 15:49:41 +0000</pubDate>
		<dc:creator><![CDATA[akila87]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=832</guid>
		<description></description>
		<content:encoded><![CDATA[According to the schedule for the past two weeks I have been working on adding internationalization (i18n)  support for the OpenOffice plug-in. I have completed this task successfully and now the plug-in uses some existing translations from the transifex. Lets have a look at the internationalization process.

The plug-in is developed using Java. Java supports internationalization using resource bundles. Resource bundle is the file that contains locale-specific data instead of the code itself, therefore making the code locale independent. There are two types of resource bundles .properties files and .class files.  The .properties format is a text file that can be edited directly like a PO file, but this does not support plural forms. On the other hand .class format is compiled from .java source code and can support plural forms through the gnu.gettext.GettextResource API.

Here I have used .class format for resource bundle because the plural forms can be used, but I am not using gnu.gettext.GettextResource API because there is no need of plural forms at this point (Extracting new strings for internationalization is not completed yet).

I have added two shell scripts to convert PO files to resource bundle and extract new strings. You can run them separately or use them when compiling the project. To use them when compiling uncomment line 75-82 of the build.xml, but conversion will take about 3 minutes to complete, therefore it is better to use the scripts separately only when you need add a new translation or extract new strings.

Here is a screen shot of the GUI with some Spanish translated strings (I choose Spanish because of <a href="http://labs.creativecommons.org/2010/05/20/creative-commons-open-office-plugin-here-it-is-with-some-new-features/#comment-15878" target="_blank">this</a> comment).

[caption id="" align="aligncenter" width="370" caption="GUI in Spanish"]<a href="http://lh5.ggpht.com/_LE-WXW82VPE/TEMqN2H2JyI/AAAAAAAAAK4/hK2v1z-TP6c/Screenshot.png"><img class="  " src="http://lh5.ggpht.com/_LE-WXW82VPE/TEMqN2H2JyI/AAAAAAAAAK4/hK2v1z-TP6c/Screenshot.png" alt="GUI in Spanish" width="370" height="388" /></a>[/caption]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>832</wp:post_id>
		<wp:post_date>2010-07-21 15:49:41</wp:post_date>
		<wp:post_date_gmt>2010-07-21 15:49:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-ommons-openoffice-plugin-supports-for-internationalization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="gettext"><![CDATA[gettext]]></category>
		<category domain="post_tag" nicename="internationalization"><![CDATA[internationalization]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="post_tag" nicename="plug-in"><![CDATA[plug-in]]></category>
		<category domain="post_tag" nicename="po"><![CDATA[po]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC WordPress Plugin: Weekly Report #8</title>
		<link>http://labs.creativecommons.org/2010/07/21/gsoc-cc-wordpress-plugin-weekly-report-8/</link>
		<pubDate>Wed, 21 Jul 2010 17:39:15 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=847</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
This is a short one. This week, I did only a few things related to the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a>: First, planned features and bugs are now listed in <a href="http://code.creativecommons.org/issues/issue?status=-1,1,2,3,4,5,6,7&amp;@sort=-activity&amp;@search_text=&amp;@dispname=Wordpress%20CC%20Plugin&amp;@filter=status,project&amp;@group=priority&amp;project=29&amp;@columns=id,activity,title,creator,assignedto,status&amp;@pagesize=50&amp;@startwith=0">the issue tracker</a>. Second, you can now specify default attribution in the form of rights holder and URL. I did also work on the default licensing mechanism, but it probably needs a complete overhaul.
</p>
<p>
For this week, I will be looking into more REST API stuff, get rid of the shortcodes so even with a deactivated plugin, there will still be content (parsing the elements Wordpress inserts instead, using DOM methods) and approach the mentioned rewrite of the default licensing mechanism.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date>2010-07-21 17:39:15</wp:post_date>
		<wp:post_date_gmt>2010-07-21 17:39:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #9 / #10</title>
		<link>http://labs.creativecommons.org/2010/08/04/gsoc-cc-wordpress-plugin-weekly-report-9-10/</link>
		<pubDate>Wed, 04 Aug 2010 14:28:12 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=856</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
Time is running out for work on the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a>. With the 9th of this month being the suggested date to start working on documentation and cleanup and the 16th being a definitive "pencils down" date, I'm definitely in a hurry. Here's my story for the last two weeks, decorated with nicely drawn bullet points:
</p>
<ul>
	<li><b><code>&lt;figure&gt;</code> elements are <i>inline blocks</i> now</b>: Like the elements they are supposed to replace — <code>&lt;img&gt;</code>, <code>&lt;video&gt;</code>, <code>&lt;audio&gt;</code> and the occasional <code>&lt;object&gt;</code> — <code>&lt;figure&gt;</code> elements should not disturb the flow of a blog post. They also now display effortless besides each other.
</li>
	<li><b>The <i>wetter</i> style became less <abbr title="United States">US</abbr>-centric</b>: I created a version of the stylesheet with a crossed-out Euro symbol (€).
<img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/css-preview/wetter.png" alt="screenshot of wetter stylesheet with crossed out dollar symbol">
<img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/css-preview/wetter-eu.png" alt="screenshot of wetter stylesheet with crossed out euro symbol">
</li>
	<li><b>No more shortcodes</b>: The plugin now inserts simple image, video or audio elements and uses the PHP <abbr title="Document Object Model">DOM</abbr> facilities to detect and replace them. For error-tolerant parsing, I use the MIT-licensed <a href="http://code.google.com/p/html5lib/"><i>html5lib</i></a>.</li>
	<li><b>Some IE 6/7 support</b>: After discovering older versions of Internet Explorer are unable to style new HTML5 elements, I came upon Remy Sharp's <a href="http://html5doctor.com/how-to-get-html5-working-in-ie-and-firefox-2/">javascript-based workaround</a>. Granted, some parts still looks like crap in IE, but that is what you get for using a browser that is older than dirt.</li>
	<li><b>New <i>hybrid</i> style</b>: <img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/css-preview/hybrid.png" alt="screenshot of hybrid style, showing a dark bar with light text" /></li>
	<li><b>Locale and jurisdiction support</b>: Both can now be set in the admin interface, each media item can have a separate jurisdiction. All information comes from the excellent <a href="http://api.creativecommons.org/docs/readme_dev.html">CC REST API</a>. See for yourself:
<img src="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/locale-jurisdiction-defaults.png" alt="screenshot of Wordpress plugin showing Polish licenses, displayed in German" /></li>
</ul>
<p>
Two very important things are still missing: A cache for API responses and an easy method for re-embedding. I am going to work on those (and everything else Nathan Kinkade digs up in this version) in the next few days.
</p>
<p>
The overly frequent API calls result in notable slowness interface-wise and unneccessary load on the server side — so kids, don't try this at home! You have been warned.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>856</wp:post_id>
		<wp:post_date>2010-08-04 14:28:12</wp:post_date>
		<wp:post_date_gmt>2010-08-04 14:28:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-9-10</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>GSoC CC WordPress Plugin: Weekly Report #11</title>
		<link>http://labs.creativecommons.org/2010/08/10/gsoc-cc-wordpress-plugin-weekly-report-11/</link>
		<pubDate>Tue, 10 Aug 2010 22:19:34 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=869</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
This week most of the work on the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a> consisted of styling changes and fixing bugs, mainly regressions that sneaked in due to the rewrite of functions that are now using the API. Still, there are some new features:
</p>
<ul>
	<li><b>The <i>embed</i> button</b>: Suggested by <a href="http://de.wikipedia.org/wiki/Markus_Beckedahl">Markus Beckedahl</a>, a re-embedding possibility actively promotes sharing content. Clicking on the button reveals a text input filled with the markup necessary to put a copy of the media item into another website. Bonus: The re-embedded content keeps the style of the original content and <em>also</em> sports an embed-button.</li>
	<li><b>An API cache</b>: Results of queries to the <a href="http://api.creativecommons.org/docs/">CC REST API</a> are now saved for two weeks, using the <a href="http://codex.wordpress.org/Transients_API">Wordpress Transients API</a>. This speeds up figure generation and the administration page tremendously.</li>
	<li><b>Automagic locale selection</b>: The plugin now simply uses the Wordpress locale.</li>
</ul>
<p>
I also made a <a href="http://mirrors.creativecommons.org/movingimages/wordpress-cc-plugin.ogv">screencast</a>, approximately 6 minutes long, that demonstrates how the plugin is used.
</p>
<p>
For the remaining few days, I have three things to resolve: First, there is a bug preventing the embed markup to show up properly in Internet Explorer 6 and 7. Second, provided that I find the corresponding hook, I will add license icons to the media manager overview. Third, a proper README file needs to be written.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>869</wp:post_id>
		<wp:post_date>2010-08-10 22:19:34</wp:post_date>
		<wp:post_date_gmt>2010-08-10 22:19:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-11</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>enclosure</wp:meta_key>
			<wp:meta_value><![CDATA[http://mirrors.creativecommons.org/movingimages/wordpress-cc-plugin.ogv
10882286
video/ogg
]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Case study of a simple but highly effective use of Semantic MediaWiki on the CC Wiki</title>
		<link>http://labs.creativecommons.org/2010/09/08/smw-case-study/</link>
		<pubDate>Wed, 08 Sep 2010 17:01:49 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=887</guid>
		<description></description>
		<content:encoded><![CDATA[Whether it's setting up the columns of a spreadsheet or defining a data structure in python, any project that involves gathering structure-able data for some purpose requires technical support. Choosing the right technical tool for the job involves careful consideration of your requirements while acknowledging your constraints.

At Creative Commons, we're never running out of ideas for useful collections of information. We're always looking for ways to highlight interesting uses of our legal and technical tools, to approximate the impact that our tools are having, and to better engage our variety of user bases and communities. But while we have a lot of exciting ideas for new datasets, we don't always have the resources or infrastructure to build new data collection and management tools for each of those projects.

As a solution to this constraint, we rely heavily on <a href="http://semantic-mediawiki.org/wiki/Semantic_MediaWiki">Semantic MediaWiki</a> on the <a href="http://wiki.creativecommons.org/Main_Page">CC Wiki</a> to manage various data-sets related to Creative Commons. For the uninitiated, Semantic MediaWiki is an extension to MediaWiki, the popular open source wiki platform that powers Wikipedia (all of the extensions discussed here are also open source). Semantic MediaWiki adds powerful organizational tools to your MediaWiki installation, allowing data queries, data I/O, powerful methods for page organization and collection, and when combined with some useful helper extensions such as <a href="http://www.mediawiki.org/wiki/Extension:Semantic_Forms">Semantic Forms</a> and <a href="http://www.mediawiki.org/wiki/Extension:Semantic_Drilldown">Semantic Drilldown</a>, user-friendly template call creation and data browsing.

One example of an effective use of Semantic MediaWiki, which recently underwent some maintenance, is the <a href="http://wiki.creativecommons.org/Case_Studies">Case Studies</a> database on the CC wiki. The Case Studies database uses Semantic MediaWiki and Semantic Forms to collect, annotate, and aggregate data contained on wiki pages about uses of Creative Commons license from around the world. For an example page, see the Case Study on <a href="http://wiki.creativecommons.org/Case_Studies/Cory_Doctorow">Cory Doctorow</a>.

Each Case Study page contains two basic elements: A template call and free text. The free text is unstructured and typically contains no semantic annotations (unless provided by the user). When you create a new wiki page in MediaWiki, you're just editing the page text. In the form to create a page, we've set it up to pre-populate the free text with some suggested structure for the Case Study, but otherwise the free text is a blank slate for whatever content the contributor wants to provide.

The template call is where all of the semantic annotations and interesting data queries are enabled. In each Case Study, the <a href="http://wiki.creativecommons.org/index.php?title=Template:Case_Study&amp;action=edit">"Case Study" template</a> is called with parameters defined in that template. The strings in each template call parameter gets assigned to semantic properties and processed for rendering (e.g. to turn a string into a link to a wiki-page if it exists). There can be many arbitrarily-named parameters for any MediaWiki template, and it wouldn't be easy for anyone to add a Case Study if they had to know the proper parameters for the template. Thanks to Semantic Forms, we're able to <a href="http://wiki.creativecommons.org/index.php?title=Case_Studies/Cory_Doctorow&amp;action=formedit">construct forms</a> for users to fill out that then construct a template call and free text on a page.

But you might ask: What are the qualities of Semantic MediaWiki that make it useful for my projects?

<strong>Semantic MediaWiki enables "view source" for databases.</strong> This means that all of the template, property pages, forms, drilldown filters, and pages are viewable and editable with a complete page history for each. That is, the markup defining the database is editable by anyone. Of course, the pages could be protected from edits, but in general the markup is at least accessible. This gets you the possibility for user-driven development and rapid feedback. You might define a data structure for a community of users and come back to find that it's been modified to be more useful for its application without you having been involved at all.

Any registered user on the CC Wiki can create a wiki page, and thus, any user can contribute an item to the Case Studies database. Because Semantic Forms just creates or modifies template calls on pages, each page constructed or edited with Semantic Forms shows up on Recent Changes, and the complete page history will be available for review. In this respect, the data collection process in a Semantic MediaWiki database is transparent. This is important for most kinds of data, since usually the two types of data you might collect will be data requiring some subjective assessment or data that is meant to represent facts. For projects which you expect a large contributor base, you can expect with near-certainty that someone will eventually make a subjective assessment that diverges from common sense, or will add data that misrepresents some important fact. In either case, having a transparent data collection process mitigates the risk of bad data. This holds true for non-page namespace pages as well (template pages, property pages, forms, etc).

Lastly, the database structure is highly mutable. In many data collection efforts, particularly those with some idea how the data will be analyzed or applied, the process of gathering data informs the data you collect. For example, in collecting case studies of Creative Commons licenses, you might find that almost all of them fit into a few media types. With Semantic MediaWiki, it becomes trivial to create a new field in a form and associated property in the template, or if you have an existing structure for that type of data, to modify the kinds of data that property accepts. You could even change the allowed values for a property or change the data type and easily fix any incompatibilities that arise.

For example, we recently decided to add a method for <a href="http://wiki.creativecommons.org/Case_Studies/Evaluation">Case Studies evaluation</a> to the database. All it required was to create a <a href="http://wiki.creativecommons.org/Special:FormEdit/Evaluation/Case_Studies/Cory_Doctorow">partial form</a> using Semantic Forms that populate two new property mappings in the template (<a href="http://wiki.creativecommons.org/Property:Has_quality">Quality</a> and <a href="http://wiki.creativecommons.org/Property:Has_importance">Importance</a>). This new form just contains two drop-down menus that let users select Quality or Importance values for the page and save that data back into the template call on the page. SMW allowed us to extend the data we collected on each page. But additionally, halfway through the development process we decided to use a different metric for quality. It was trivial to change the list of allowed values on the property page for that property and then query the existing data for pages needing updating to the new metric.

In short, Semantic MediaWiki is a powerful tool allowing rapid, decentralized development of complex databases that requires minimal investment into technical infrastructure. It's also a method to create a truly collaborative database that is an asset to you and to your community.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>887</wp:post_id>
		<wp:post_date>2010-09-08 17:01:49</wp:post_date>
		<wp:post_date_gmt>2010-09-08 17:01:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>smw-case-study</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="case-studies"><![CDATA[case studies]]></category>
		<category domain="post_tag" nicename="cc-wiki"><![CDATA[cc wiki]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>172</wp:comment_id>
			<wp:comment_author><![CDATA[Steren]]></wp:comment_author>
			<wp:comment_author_email>steren.giannini@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.steren.fr</wp:comment_author_url>
			<wp:comment_author_IP>91.103.40.50</wp:comment_author_IP>
			<wp:comment_date>2010-09-09 13:03:43</wp:comment_date>
			<wp:comment_date_gmt>2010-09-09 13:03:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I completely share your view.

We may wonder why use SMW instead of the many other web frameworks, the answer is simple: The structure of your data is flexible and can be edited by anyone.

This is unique. This is brilliant.

I hope it will make it into Wikipedia one day.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Draft metadata for Public Domain Mark</title>
		<link>http://labs.creativecommons.org/2010/08/19/draft-metadata-for-public-domain-mark/</link>
		<pubDate>Thu, 19 Aug 2010 23:04:54 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=892</guid>
		<description></description>
		<content:encoded><![CDATA[As <a href="http://creativecommons.org/weblog/entry/22940">announced on the CC blog</a> earlier this month, we're working on a new tool to complement <a href="http://creativecommons.org/choose/zero/">CC0</a>, the Public Domain Mark (PDM).  We have a set of open issues for PDM (and related improvements) that we're working through, including developing the marking metadata that will be generated (<a href="http://code.creativecommons.org/issues/issue640.">Issue 640</a>).  I've put together <a href="http://wiki.creativecommons.org/Public_Domain_Mark#Metadata_.28XHTML_.2B_RDFa.29">a set of examples</a> in the wiki that we're looking for feedback on.

There are a couple of minor variations from past practice to note:
<ul>
	<li>We support labeling both the creator of the work (<code>dct:creator</code>), as well as the person who identified it as being in the public domain and made it available.  We chose <code>dct:publisher</code> for the latter, as it's <a href="http://dublincore.org/documents/dcmi-terms/#terms-publisher">defined</a> as "An entity responsible for making the resource available."</li>
	<li>We will support the scenario where there are two license statements: PD Mark and CC0.  This is generated in the case that the labeler chooses to waive rights they may have incurred in the work, as part of restoration, digitization, etc.  After some discussion, we're simply using two license assertions for this.  There are arguably two subjects at work here -- the actual work and the digital representation of it -- but in the interest of simplicity and consistency with our past recommendations, we're treating them as one.</li>
	<li>We're planning to support non-binding usage guidelines on the deed at launch time, but not through the chooser.  The <a href="http://wiki.creativecommons.org/Public_Domain_Mark#Guidelines_specified">example metadata</a> is what the deeds would consume to display that link.  I didn't find a good existing predicate for this, so I propose we use <code>cc:usageGuidelines</code> and define it as a refinement of <code><a href="http://dublincore.org/documents/dcmi-terms/#terms-relation">dct:relation</a></code>.<sup>&dagger;</sup></li>
</ul>

If you have comments or suggestions, you can leave them as comments on this post, or <a href="http://wiki.creativecommons.org/index.php?title=Talk:Public_Domain_Mark&action=edit&section=new">leave a comment</a> on the <a href="http://wiki.creativecommons.org/Talk:Public_Domain_Mark">Public Domain Mark discussion page</a>.

<hr noshade />
<sup>&dagger;</sup> In the interest of completeness, I'm also planning to define <code>cc:morePermissions</code>, used for <a href="http://wiki.creativecommons.org/CCPlus">CC+</a>, as a refinement of <code>dc:relation</code>. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>892</wp:post_id>
		<wp:post_date>2010-08-19 23:04:54</wp:post_date>
		<wp:post_date_gmt>2010-08-19 23:04:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>draft-metadata-for-public-domain-mark</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc0"><![CDATA[cc0]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="public-domain"><![CDATA[public domain]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Welcome Hudson to Creative Commons</title>
		<link>http://labs.creativecommons.org/2010/08/12/welcome-hudson-to-creative-commons/</link>
		<pubDate>Thu, 12 Aug 2010 21:30:40 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=893</guid>
		<description></description>
		<content:encoded><![CDATA[We've been working over the past year on improving our tooling and processes for the CC website software, and we're starting to see the results.  We've moved our translations to <a href="http://www.transifex.net/projects/p/CC/">Transifex</a>, where updates are committed directly to <a href="http://code.creativecommons.org/viewgit/i18n.git/">our git repository</a>.  We've rolled out a new version of the <a href="http://code.creativecommons.org/viewgit/cc.engine.git">license engine</a> with different (better!) <a href="http://pypi.python.org/pypi/wsigcache">caching</a>.  And our <a href="http://api.creativecommons.org/">API</a> now uses the same <a href="http://code.creativecommons.org/viewgit/license.rdf.git/">license definition</a> as the <a href="http://creativecommons.org/choose">license chooser</a> and the <a href="http://wiki.creativecommons.org/Partner_Interface">partner interface</a>.  While this has been great in terms of agility and deployment speed, it also means that if a single piece breaks, other things are more likely to depend on that piece.  

Earlier this week I spent a little time installing <a href="http://hudson-ci.org/">Hudson</a> on our <a href="http://code.creativecommons.org">development server</a>.  By looking at the <a href="http://code.creativecommons.org/hudson">dashboard</a>, you can easily see the build status of CC projects, including the aforementioned license components, and <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a>, our linked data search prototype.  

<a href="http://labs.creativecommons.org/files/2010/08/trend.png"><img src="http://labs.creativecommons.org/files/2010/08/trend.png" alt="" title="discovered-next test trend" width="500" height="200" class="aligncenter size-full wp-image-896" /></a>

Hudson is already proving itself worth the time to deploy and configure.  After installation, I saw that a test for the API was failing.  I pinged John, and was happy to see the build go green a few minutes later when he checked in a fix and Hudson rebuilt the package.  Graphs like the testing trend for <a href="http://code.creativecommons.org/hudson/job/discovered/">discovered</a> also help quantify the progress being made. Overall, it already feels like we have better visibility into the state of our infrastructure. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>893</wp:post_id>
		<wp:post_date>2010-08-12 21:30:40</wp:post_date>
		<wp:post_date_gmt>2010-08-12 21:30:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>welcome-hudson-to-creative-commons</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ci"><![CDATA[ci]]></category>
		<category domain="post_tag" nicename="code-creativecommons-org"><![CDATA[code.creativecommons.org]]></category>
		<category domain="post_tag" nicename="hudson"><![CDATA[hudson]]></category>
		<category domain="post_tag" nicename="infrastructure"><![CDATA[infrastructure]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[October 2010 Tech Update - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/10/01/october-2010-tech-update/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-10-01 19:17:26</wp:comment_date>
			<wp:comment_date_gmt>2010-10-01 19:17:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Integration: We technically rolled this out at the end of August, but CC is now using Hudson as a continuous integration tool for all our [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>175</wp:comment_id>
			<wp:comment_author><![CDATA[Well Covered - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/10/05/well-covered/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-10-05 00:12:05</wp:comment_date>
			<wp:comment_date_gmt>2010-10-05 00:12:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] we rolled out Hudson for CC code last month, I already knew that I wanted to have test coverage reporting. [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>GSoC CC Wordpress Plugin: Weekly Report #12</title>
		<link>http://labs.creativecommons.org/2010/08/19/gsoc-cc-wordpress-plugin-weekly-report-12/</link>
		<pubDate>Thu, 19 Aug 2010 20:02:37 +0000</pubDate>
		<dc:creator><![CDATA[erlehmann]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=905</guid>
		<description></description>
		<content:encoded><![CDATA[<p>
<em>This</em> may be my last report for the <a href="http://labs.creativecommons.org/2010/05/24/gsoc-project-introduction-cc-wordpress-plugin/">plugin</a>. After 150 commits and a bit over 30KB of written PHP code, the <i>Google Summer of Code</i> proposal <a href="http://socghop.appspot.com/gsoc/student_proposal/show/google/gsoc2010/erlehmann/t126992832487"><i>Support for CC licenses in Wordpress</i></a> is finally finished, though the final product is remarkably different from the original suggestion. As time went by fast in the last few days before the deadline, I successfully managed to fix the three remaining issues mentioned before; namely an <abbr title="Internet Explorer">IE</abbr> bug, adding license information to the media manager overview table (<a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/wordpress-cc-plugin/media-manager-table.png">screenshot</a>) and having a proper README (written in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>).
</p>
<p>
However, one thing still did not work quite right: Embedding. A security restriction called the <a href="http://en.wikipedia.org/wiki/Same_origin_policy"><i>same origin policy</i></a> prevents audio and video (but not images, as they came before the <abbr title="Same Origin Policy">SOP</abbr>) from one site to be included on another, unless a special HTTP header is sent. As Jonas Sicking puts it in an <a href="http://lists.xiph.org/pipermail/theora/2008-November/001958.html">explanatory email</a> (<a href="http://ajaxian.com/archives/video-audio-cross-origin">via</a>):
</p>
<blockquote>
<p>Requiring that sites add 'Access-Control-Allow-Origin:*' simply is 
a way for us to know that "this is a public resource that other sites 
can embed".</p>
</blockquote>
<p>
In addition to the above issue, <a href="https://developer.mozilla.org/en/Configuring_servers_for_Ogg_media">other things</a> should be taken care of server-side to ensure media playback works as intended:
</p>
<ul>
    <li><b>The X-Content-Duration header</b> should tell the browser how long a media file is, in seconds. If it is not given, Browsers will have to <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=502894#c1">figure out the duration by themselves</a>, by seeking to the end of the file.</li>
    <li><b>gzip/deflate compression</b> <em>must not</em> be used — if it is employed, Firefox will be unable to fast-forward, and Chrome will not play the given file at all.</li>
    <li><b>HTTP 1.1 byte range requests</b> must be served correctly; otherwise there can be no seeking unless the relevant part of the file is already downloaded.</li>
</ul>
<p>
For many of these cases, if a server does not already handle them, only a few lines in the <a href="http://httpd.apache.org/docs/1.3/howto/htaccess.html"><i>.htaccess</i></a> file would need to be changed. But, as the plugin should also accommodate users who may not have the option, technical skill or time to edit their web server configuration, everything mentioned above needs to happen automagically. This has led me to writing a small <em>web server</em> and bundling it with the plugin.
</p>
<p>
Technical issues aside, participating in the Google Summer of Code was an interesting and unique experience that certainly made me grow in confidence regarding my abilities. I also learned to value how much work can go into a relatively small piece of code to create a sufficiently polished product. Finally, the plugin in its current incarnation was made possible only through assistance of the following people, whom I wish to thank:
</p>
<ul>
<li><b>Matthias <i>wetterfrosch</i> Mehldau</b> for a <a href="http://einmachglas.wordpress.com/2009/03/10/creative-commons-html-code/">blog post</a> regarding markup for creative-commons-licensed content</li>
	<li><b>Julia <i>zeitrafferin</i> Seeliger</b> for a <a href="http://julia-seeliger.de/wunschzettel-creative-commons-plugin-fur-wordpress/">related article</a>, the inspiring moment for me</li>
	<li><b>Johnny Häusler</b> for a <a href="http://daten.dieweltistgarnichtso.net/pics/screenshots/web/spreeblick-plugin.png">screenshot</a> of the Spreeblick plugin interfaces</li>
	<li><b>Michelle Thorne</b> for connecting me with a metadata expert</li>
	<li><b>Nathan Yergler</b> for advising me on RDFa</li>
	<li><b>Nathan Kinkade</b> for mentoring me over the course of the Google Summer of Code, continually suggesting code improvements and standing by to patiently explain issues until I got the point</li>
	<li><b>Moritz Metz</b> for advising me to take non-standard Wordpress directory names and post thumbnails into account</li>
	<li><b>Markus Beckedahl</b> for suggesting the <i>embed</i> functionality</li>
	<li><b>Bernd Holzmüller</b> for testing performance and explaining how to avoid memory leaks</li>
</ul>
<p>

What will follow now is user testing, hopefully yielding some real world experience and small improvements so a more polished version of the plugin can be packaged and released through the <a href="http://wordpress.org/extend/plugins/">Wordpress.org plugin directory</a>. If, in the future, the plugin's functionality is extended notably, I may write another blog post — for now, however, I'm done.

</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>905</wp:post_id>
		<wp:post_date>2010-08-19 20:02:37</wp:post_date>
		<wp:post_date_gmt>2010-08-19 20:02:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gsoc-cc-wordpress-plugin-weekly-report-12</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-license-manager"><![CDATA[CC License Manager]]></category>
		<category domain="category" nicename="summer-of-code"><![CDATA[summer of code]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>176</wp:comment_id>
			<wp:comment_author><![CDATA[cyri]]></wp:comment_author>
			<wp:comment_author_email>cyrijones2@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.86.20.201</wp:comment_author_IP>
			<wp:comment_date>2010-08-24 01:16:14</wp:comment_date>
			<wp:comment_date_gmt>2010-08-24 01:16:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The Creative Commons WordPress plug-in looks great.  Do you have an ETA on when it will be released to the WordPress.org plugin directory?  Thanks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Creative Commons OpenOffice Plug-in Version 0.7.0 Released</title>
		<link>http://labs.creativecommons.org/2010/08/20/creative-commons-openoffice-plug-in-version-0-7-0-released/</link>
		<pubDate>Fri, 20 Aug 2010 17:58:41 +0000</pubDate>
		<dc:creator><![CDATA[akila87]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=939</guid>
		<description></description>
		<content:encoded><![CDATA[<span>Coding period of <span>GSoC</span> 2010 officially ended 16<span>th. </span>I was able to release the new stable version of the <span>OpenOffice</span> Plug-in on that day. So it’s time to have a look back on what I did for the past 4+ months and discuss about the issues I met.
</span>

<strong>Look back</strong>

The proposal for the development had following tasks.
<ul>
	<li><span> Supporting <span>OpenOffice</span>.org 3.0 – 3.1.</span></li>
	<li> Adding support for CC0.</li>
	<li> Adding support for Draw.</li>
	<li> User Interface Improvements.
<ul>
	<li> Adding references to important pages like FAQ and About.</li>
	<li> Provide help around what each option means ("what is Share Alike").</li>
	<li> Display license information when opening CC licensed documents.</li>
	<li> Other improvements for the UI.</li>
</ul>
</li>
	<li> Speed up the first time license insertion process.</li>
	<li> Support for Internationalization.</li>
</ul>
<span>I started working on the project since mid April. Moving the co<span>de</span> base to <span>OpenOffice</span>.org 3.1 SDK was easy. I also updated the other libraries to their newest version. Then I tried to implement the Draw support. I found that implementation for Draw should be same as the implementation for Impress. So adding Draw support was fairly easy, but I had some problem wi<span>th</span> the page sizes. The available co<span>de</span> did not <span>conceder</span> about the page sizes and the margins. The next problem was; the visible license notice was added to the master page of the Draw/Impress document like a background of an Impress document. Therefore the user can not arrange the notice as he wants.</span>

<span>While I fixing those issues, Nathan asked me to have a look at the <span>Flickr</span> Image Re-Use plug-in. Then I started look at it and integrating its functionality to the CC plug-in. I had to update the API wrappers for the <span>Flickr</span> plug-in to make it working. Then I started using that co<span>de</span> to add image reuse support for Open Clip Art. I also improved the loading time of the <span>Flickr</span> dialog.</span>

<span>Then I started RDF adding RDF <span>Metadata</span> in the document. Currently this works only in Writer documents, because <span>OpenOffice</span>.org currently supports adding RDF only for writer documents. Then I get back to improve the image insertion I added <span>Wikimedia</span> Commons and Picasa for that. So the users can now add images using four well known image sharing sites; <span>Flickr</span>, Picasa, <span>Wikimedia</span> Commons and Open Clip Art.</span>

The next thing I did is the UI improvement and adding public domain tools. Those two things were carried in parallel. After discussing with my mentors Nathan and Christopher we decided to use a tabbed window. This will make the licensing less confusing and easy to use.

<span>Next was the internationalization phase. I used the existing i18n repository to add some translations to the licensing dialog, but still there are new strings available in the dialog that should be added to <span>Transifex</span>. Hope those new strings will added in the future. These translations files (.<span>po</span> files) need to be converted to Java resource bundles (internationalization method used in Java). The source folder includes a script for this, and the instructions can be found in the README.</span>

<strong>Issues</strong>

For the last few weeks I was testing and trying to find out the issues related to the plug-in.

<span>Though the new version released as a stable release, there are some problems which actually out of our control. This plug-in will not work in Mac OS Leopard where Java 64bit is the default; this is a known issue in <span>OpenOffice</span>.org. In additions to that, Mac OS X also have a problem in displaying AWT windows (issue </span><a href="http://www.openoffice.org/issues/show_bug.cgi?id=92926">92926</a>). I am still trying to see whether there is anything I can do.

<span>The next issue is wi<span>th</span> Linux. We tested the plug-in in Debian and <span>Ubuntu,</span> in bo<span>th</span> cases if the plug-in is installed through the extension manager, the menus either become gray or they will not be available at all. This issue is most probably a problem in 9.10 and 10.04 because the plug-in worked well in <span>Ubuntu</span> 9.04 and Windows. I am glad to say that I have found a workaround for this. If the plug-in installed using the terminal there will not be any problem. Users can use bo<span>th</span> CLI and GUI versions of the <span>unopkg</span> (Extension manager).</span>

To use the CLI version run
<pre><span>/<span>usr</span>/lib/<span>openoffice</span>/program/<span>unopkg</span> -f <span>ccooo</span>.<span>oxt</span></span></pre>
and for the GUI version use
<pre><span>/<span>usr</span>/lib/<span>openoffice</span>/program/<span>unopkg</span> <span>gui</span> -f <span>ccooo</span>.<span>oxt</span></span></pre>
<span>Actually this is not an issue of the plug-in itself it should be a problem wi<span>th</span> <span>Ubuntu</span>. Similar plug-ins likeOoo2<span>GDand</span> Open Cards are also affected by this problem.</span>
I tested this plug-in in Windows and Linux in both x86 and x86-64 versions and it work without any problem (in Linux with the workaround).

<strong>Installation</strong>

The plug-in can be found in the <a href="http://extensions.services.openoffice.org/en/project/ccooo">extension repository</a>. Alternatively you can direct download from <a href="http://labs.creativecommons.org/gsoc/2010/ccooo.oxt">here</a>.

<span>Windows users can simply install it by double clicking the <span>plug-in</span>. <span>Ubuntu</span> (may be other Linux users also) need to install it trough the terminal using</span>
<pre><span>/<span>usr</span>/lib/<span>openoffice</span>/program/<span>unopkg</span> <span>gui</span> -f <span>ccooo</span>.<span>oxt</span></span></pre>
or
<pre><span>/<span>usr</span>/lib/<span>openoffice</span>/program/<span>unopkg</span> -f <span>ccooo</span>.<span>oxt</span></span></pre>
<strong>Source</strong>

The source code of the plug-in can be found at <a href="http://code.creativecommons.org/viewsvn/ccooo/branches/akila-gsoc-2010/"><span>http://co<span>de</span>.<span>creativecommons</span>.org/<span>viewsvn</span>/<span>ccooo</span>/branches/<span>akila</span>-<span>gsoc</span>-2010/</span></a>

<span>Comments and <span>Feedbacks</span></span>

<span>While I was searching the Internet to find more issues related to the <span>plug-in</span>, I found some blog posts and comments about the <span>plug-in</span>. I have listed them below.</span>

<a href="http://www.golem.de/1007/76211.html"><span>http://www.<span>golem</span>.<span>de</span>/1007/76211.html</span></a>
<a href="http://openoffice.magenta-aps.dk/cliparts-lokalt-eller-online"><span>http://<span>openoffice</span>.magenta-<span>aps</span>.<span>dk</span>/<span>cliparts</span>-<span>lokalt</span>-<span>eller</span>-online</span></a>
<a href="http://www.ubervu.com/conversations/extensions.services.openoffice.org/en/project/ccoootest"><span>http://www.<span>ubervu</span>.com/conversations/extensions.services.<span>openoffice</span>.org/en/project/<span>ccoootest</span></span></a>
<a href="http://www.skolekonsulenterne.dk/Infoweb/Indhold/Links/Clipart.htm"><span>http://www.<span>skolekonsulenterne</span>.<span>dk</span>/<span>Infoweb</span>/<span>Indhold</span>/Links/<span>Clipart</span>.<span>htm</span></span></a>

<span>All of these <span>feedbacks</span> were good, except the Mac OS X issue. I am trying to fix it as soon as possible.</span>

<span>To add new <span>feedbacks</span>, users can use the extension page at extension repository. Still there can be issues related to the plug-in. Those issues and feature requests can be added to the CC issues list.</span>
<strong>
Future Features</strong>

<span>Nathan suggested a feature for <span>Flickr</span>; to extract add images from a given URL. So users can copy and paste the URL to <span>OpenOffice</span>.org and the plug-in will automatically download the image and add licensing data also. This can be used for others services also.</span>

In addition to that localization should be completed.

This is time time to thank all the people who helped me in achieving this. I should thank the following people specially for helping me;
<ul>
	<li><span> <strong>Nathan <span>Yergler</span></strong>: for helping me wi<span>th</span> good suggestions in the <span>pre</span> <span>GSoC</span> period and in the community bonding period.</span></li>
	<li><span> <strong>Christopher Allan <span>Webber</span></strong>: for mentoring me in this process and for all the good suggestions he gave.</span></li>
	<li><span> <strong>Nathan <span>Kinkade</span></strong>: for helping wi<span>th</span> the SVN issues (yes I had some :)).</span></li>
	<li><span> <strong>Alex Roberts and Greg <span>Grossmeier</span></strong>: for their valuable suggestions in making the GUI.</span></li>
</ul>
Now it is the time to rip off the “test” part from the plug-in name “Creative Commons Licensing (test)” :). The plug-in was released for beta testing since May 2010 and it was downloaded more than 400 times. But making a perfect program is impossible thing. So I appreciate if the users can report any issues and suggestions as I mentioned in the Feedback section. I will always try to fix/implement them.

More information about the plug-in and the screen shots are available in the <a href="http://wiki.creativecommons.org/OpenOfficeOrg_Addin">wiki</a> page.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date>2010-08-20 17:58:41</wp:post_date>
		<wp:post_date_gmt>2010-08-20 17:58:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creative-commons-openoffice-plug-in-version-0-7-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="post_tag" nicename="google-summer-of-code"><![CDATA[Google Summer of Code]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="internationalization"><![CDATA[internationalization]]></category>
		<category domain="category" nicename="license"><![CDATA[license]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="category" nicename="mac-os-x"><![CDATA[Mac OS X]]></category>
		<category domain="post_tag" nicename="mac-os-x-2"><![CDATA[mac os x]]></category>
		<category domain="post_tag" nicename="open-clip-art"><![CDATA[open clip art]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="post_tag" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="post_tag" nicename="opensource"><![CDATA[opensource]]></category>
		<category domain="post_tag" nicename="picasa"><![CDATA[picasa]]></category>
		<category domain="post_tag" nicename="wikimedia"><![CDATA[wikimedia]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[creative-commons-openoffice-plugin-version-0-7-0-released]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>177</wp:comment_id>
			<wp:comment_author><![CDATA[martin]]></wp:comment_author>
			<wp:comment_author_email>m.e.7@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.last.fm/user/beadmaze</wp:comment_author_url>
			<wp:comment_author_IP>141.48.182.251</wp:comment_author_IP>
			<wp:comment_date>2010-11-18 14:27:13</wp:comment_date>
			<wp:comment_date_gmt>2010-11-18 14:27:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[is there any chance to get this add-in working in LibreOffice 3.3 for linux/debian [amd64]?
will there be support in that direction in the future?
any plans for ccloo.oxt?

could one give me a hint how to adjust this command:
/usr/lib/openoffice/program/unopkg gui -f ccooo.oxt
to get ccooo.oxt to work?

thanks in advance!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>178</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.134.252.98</wp:comment_author_IP>
			<wp:comment_date>2010-12-02 23:33:01</wp:comment_date>
			<wp:comment_date_gmt>2010-12-02 23:33:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[We're not actively working on the project right now, but I'm not aware of any reason it shouldn't work with LibreOffice. The unopkg command comes with the SDK, so I'm assuming that's available with LibreOffice, as well. 

If we make additional releases, we'll be sure to test with LibreOffice, too.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>179</wp:comment_id>
			<wp:comment_author><![CDATA[LibreOffice and CC OpenOffice Plugin: Good to go - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/12/08/libreoffice-and-cc-openoffice-plugin/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-12-08 22:33:05</wp:comment_date>
			<wp:comment_date_gmt>2010-12-08 22:33:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] the summer, our GSOC student Akila Wajirasena gave a wonderful overhaul to our OpenOffice plugin with many improvements, including a slick new user interface, support for public domain tools, and [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>180</wp:comment_id>
			<wp:comment_author><![CDATA[Leiden]]></wp:comment_author>
			<wp:comment_author_email>samosata@terra.es</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>85.53.240.60</wp:comment_author_IP>
			<wp:comment_date>2011-03-15 05:20:32</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 05:20:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have downloaded and installed the plug-in Mac OS X (10.6.5), but I'm not able to get it working in OpenOffice (3.3.0): it is apparently installed but I have no chance to insert anything concerning Creative Commons.

Are Mac OS users near to be able to use this great plug-in?

Thanks for your effort!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>181</wp:comment_id>
			<wp:comment_author><![CDATA[Akila Wajirasena]]></wp:comment_author>
			<wp:comment_author_email>akila.wajirasena@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://akila87.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>111.223.144.96</wp:comment_author_IP>
			<wp:comment_date>2011-03-22 14:48:13</wp:comment_date>
			<wp:comment_date_gmt>2011-03-22 14:48:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Leiden the main problem in Mac OS is the version of java used in there is 64bit and the OpenOffice version used is 32 bit. I tried but wasn't successful on getting it work on Mac OS. By the way, I don't know about the current status of the problem. 

I think this time GSoC will help on this issue. If not I will look at this again. I'm getting some free time in the next two months so I'll try that again.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>28</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>182</wp:comment_id>
			<wp:comment_author><![CDATA[Creative Commons i undervisningen - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.creativecommons.dk/?p=300</wp:comment_author_url>
			<wp:comment_author_IP>193.84.27.237</wp:comment_author_IP>
			<wp:comment_date>2011-09-01 11:08:30</wp:comment_date>
			<wp:comment_date_gmt>2011-09-01 11:08:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] på siden har vi desuden også en videovejledning om det nye Creative Commons Licensing-plugin til OpenOffice, som gør det nemt at indsætte andres cc-licenserede værker i sit arbejde, og nemt [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Named Graph support lands in DiscoverEd</title>
		<link>http://labs.creativecommons.org/2010/09/01/named-graph-support-lands-in-discovered/</link>
		<pubDate>Wed, 01 Sep 2010 23:02:59 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=963</guid>
		<description></description>
		<content:encoded><![CDATA[Earlier this week we updated the <a href="http://gitorious.org/discovered/repo">master branch</a> on the <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a> <a href="http://gitorious.org/discovered">project</a>.  While this "release" contains many improvements, the biggest one by far is the use of named graphs for <a href="http://wiki.creativecommons.org/Metadata_Provenance">tracking provenance</a>.  The initial DiscoverEd prototype supported multiple curators making statements about the same resource.  For example, the same photograph of the US moon landing might be useful for both a history and a physics course.  Unfortunately the initial prototype didn't retain information about who made each individual statement, which limited the ways in which you could refine your search.

With this week's release we're storing that information, and opening up more ways to explore the metadata stored about resources.  We use <a href="http://openjena.org">Jena</a> as our RDF store, and <a href="http://www4.wiwiss.fu-berlin.de/bizer/ng4j/">Named Graphs for Jena</a> (NG4J) provide an elegant way to integrate this source information with DiscoverEd.

Also notable in this release is database independence.  Any <a href="http://www4.wiwiss.fu-berlin.de/bizer/ng4j/#Persistence">database backend supported by NG4J</a> can be used with DiscoverEd, and the default configuration uses Derby for ease of experimentation and development.

Because we did not store metadata previously, we're recrawling our sources now.  Our instance of DiscoverEd will be updated with this code over the next week or two.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>963</wp:post_id>
		<wp:post_date>2010-09-01 23:02:59</wp:post_date>
		<wp:post_date_gmt>2010-09-01 23:02:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>named-graph-support-lands-in-discovered</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>183</wp:comment_id>
			<wp:comment_author><![CDATA[Ron Murray]]></wp:comment_author>
			<wp:comment_author_email>rmur@loc.gov</wp:comment_author_email>
			<wp:comment_author_url>http://www.loc.gov</wp:comment_author_url>
			<wp:comment_author_IP>166.137.11.210</wp:comment_author_IP>
			<wp:comment_date>2010-09-02 00:59:09</wp:comment_date>
			<wp:comment_date_gmt>2010-09-02 00:59:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My Library of Congress colleague and I are developing a diagrammatic technique for depicting resource descriptions that translates to Named Graphs.

We are trying it out on non-trivial resource description tasks. Have a look at our comprehensive slideshow at:

http://www.slideshare.net/RonMurray/from-mobydick-to-mashups

Go to the last slides first, especially the one that contains the OAI-ORE Named Graph diagram and our very detailed "Rosetta Stone" articulation in terms of library &amp; archive resource descriptions.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CCSearch Testing Progress</title>
		<link>http://labs.creativecommons.org/2010/09/02/ccsearch-testing-progress/</link>
		<pubDate>Thu, 02 Sep 2010 23:52:20 +0000</pubDate>
		<dc:creator><![CDATA[alex]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=969</guid>
		<description></description>
		<content:encoded><![CDATA[Two months ago we set out to develop a brand new interface for <a href="http://search.creativecommons.org">search.creativecommons.org</a>. During that time, two UIs have been in testing alongside the current search. All visitors have had the option to switch their experience over to one of the beta versions.

<ol>
	<li><a href="/demos/search/search1">A drop-down list</a> of supported search engines</li>
	<li><a href="/demos/search/search2">A radio button group</a> of search engines</li>
</ol>

During the test we collected various analytical data based on visitor rate, beta deactivations, and interface clicks. We wanted to see which of the UIs had more return visitors, and more interactions per visit.

<table border="0" cellspacing="0" cellpadding="0">
<thead style="font-weight:bold">
<tr><td></td><td>Drop-down UI</td><td>Radio button UI</td></tr>
</thead>
<tbody>
<tr class="alt"><td style="font-weight:bold">Page Loads</td><td>2,221</td><td>6,840</td></tr>
<tr><td style="font-weight:bold">% changed search engine</td><td>22%</td><td>41%</td></tr>
<tr class="alt"><td style="font-weight:bold">% changed the query</td><td>16%</td><td>22%</td></tr>
<tr><td style="font-weight:bold">% clicked submit</td><td>30%</td><td>37%</td></tr>
<tr class="alt"><td style="font-weight:bold">Beta deactivations</td><td>142</td><td>132</td></tr>
</tbody>
</table>

As the numbers indicate, overall user interaction with the radio button interface was more successful, as well as having higher visitor retention and return rates. Over the next month we plan to tweak, test, and perfect our <a href="/demos/search/search2/">new search interface</a>, before rolling out to the millions of people who visit every month.

We invite you to leave your feedback, critiques, and comments about our planned new search interface. Over the coming weeks, bugs will be fixed, and some new functionality added &mdash; The highest priority of which will be full&nbsp;internationalization.

<style>td { padding: 10px; } tr.alt td { background-color: #fafafa; } td:first-child{text-align:right;} tr:last-child td { border-bottom:2px solid #f0f0f0;} table{margin: 1em auto; background-color: #f0f0f0; -moz-border-radius: 10px; -webkit-border-radius:10px;}</style>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>969</wp:post_id>
		<wp:post_date>2010-09-02 23:52:20</wp:post_date>
		<wp:post_date_gmt>2010-09-02 23:52:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccsearch-testing-progress</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>«Semantic Copyright» and CC REL</title>
		<link>http://labs.creativecommons.org/2010/09/02/semantic-copyright-and-cc-rel/</link>
		<pubDate>Thu, 02 Sep 2010 22:53:33 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1002</guid>
		<description></description>
		<content:encoded><![CDATA[On Monday <a href="http://www.safecreative.org/">Safe Creative</a> announced a new project, <a href="http://www.semanticcopyright.org/">Semantic Copyright</a>. The project includes an <a href="http://semanticcopyright.org/index.php/ontology">ontology</a> for describing the <a href="http://semanticcopyright.org/index.php/ontology/basic">rights associated with a work</a>, as well as for <a href="http://semanticcopyright.org/index.php/ontology/copyright-registry">modeling copyright registration</a>.  Safe Creative and Creative Commons are both part of <a href="http://oscri.org/">OSCRI</a>, an ad hoc group of <a href="http://oscri.org/members-page">organizations</a> developing copyright registry technology. Enabling tools which reduce the cost of using copyrighted material is an important part of Creative Commons' mission, and making the rights information machine readable is critical to fulfilling that.  Unfortunately there are a couple of issues with the project in its current form.

Safe Creative's proposed ontology includes a model for Creative Commons licenses (for example, <a href="http://www.semanticcopyright.org/files/basic-owl/html-doc/instances/basic-CC-BY_1.html">CC BY</a>), including the rights and permissions associated with each license. While we're very happy to have support for CC licenses in the platform, our goal over the past three years has been to move the authoritative information about the licenses to the appropriate location: with the license.  

This is an easy principle to overlook, one we ourselves didn't consider initially. When Creative Commons first begin generating HTML for marking works, we included a copy of the license metadata with every work.  We later realized that this had several issues, not the least of which is that users have no reason to trust the description of the license published with the work -- the work's publisher is not the authoritative source of information regarding the license.  The idea that authority matters is reflected in the fact that we now encourage people to link to the license; tools can follow the link to discover information about the license.  This is the sort of basic principle that becomes obvious with lots of experience stewarding the technical infrastructure for licensing online.

This principle is also reflected in our more recent work with the <a href="http://fsf.org">Free Software Foundation</a>. When we worked with the FSF to build a <a href="http://wiki.creativecommons.org/CC_REL">CC REL</a> model of their licenses that they would host (ie, <a href="http://www.gnu.org/licenses/gpl-3.0.rdf">GPL 3.0</a>), we were also pushing the authoritative version to the license publisher (the <a href="http://creativecommons.org/licenses/GPL/2.0/">CC GPL</a> is a silly wrapper, and people have no reason to trust our assessment of the GPL).

In addition to issues of authority, Safe Creative's project does not (as far as I have seen) provide instructions for processing CC REL and their ontology side by side.  One of the use cases for machine readable rights information is the ability to ask, "can I make derivatives of this work?" and "are these works under the same license?"  Because Safe Creative provides its own model for CC licenses and the rights and restrictions associated with them, software that wants to work with both will need two different paths -- one for works described with Semantic Copyright, and one for the 350 million (and growing) works described with CC REL.  One way to deal with this would be through the development of axioms that convert one to another, but this is unfortunately absent from <a href="http://semanticcopyright.org/index.php/ontology/download-files">the documentation</a>.

Safe Creative's project (and OSCRI) has the potential to improve our ability to model licenses and rights in a compatible and interoperable way. At this point, without deployed code or examples, it's impossible to predict how this project will be adopted.  Hopefully the 0.10 version number indicates that further improvements are coming.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1002</wp:post_id>
		<wp:post_date>2010-09-02 22:53:33</wp:post_date>
		<wp:post_date_gmt>2010-09-02 22:53:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>semantic-copyright-and-cc-rel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-rel"><![CDATA[cc rel]]></category>
		<category domain="post_tag" nicename="ontology"><![CDATA[ontology]]></category>
		<category domain="post_tag" nicename="specifications"><![CDATA[specifications]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<category domain="post_tag" nicename="standards"><![CDATA[standards]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>184</wp:comment_id>
			<wp:comment_author><![CDATA[Javier Prenafeta]]></wp:comment_author>
			<wp:comment_author_email>jprenafeta@safecreative.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.safecreative.org</wp:comment_author_url>
			<wp:comment_author_IP>81.33.141.119</wp:comment_author_IP>
			<wp:comment_date>2010-09-23 15:52:31</wp:comment_date>
			<wp:comment_date_gmt>2010-09-23 15:52:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the mention, we really appreciate the feedback. 

The ontology of Safe Creative's project, in alpha phase, considered some of the most commonly licensing systems, despite we are aware that there may be inconsistencies with CCRel, and undoubtely this model should be taken into account. In this sense, far from developing axioms to convert one to another, our goal is to make the ontology available to everyone, as its an open proposal, to incorporate CCRel as other models in the same line, but this can not be carried out properly and effectively without the support and collaboration of Creative Commons.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>185</wp:comment_id>
			<wp:comment_author><![CDATA[License Discovery in Feeds - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/01/04/license-discovery-in-feeds/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-01-04 09:44:19</wp:comment_date>
			<wp:comment_date_gmt>2011-01-04 09:44:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] suggested the inclusion of RDF describing the license in an HTML comment. As mentioned previously, we also realized this is redundant and of minimal value. It&#8217;s not clear under what [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>186</wp:comment_id>
			<wp:comment_author><![CDATA[Merging old and new CC REL schemas - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/02/04/merging-old-and-new-cc-rel-schemas/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-02-04 23:13:01</wp:comment_date>
			<wp:comment_date_gmt>2011-02-04 23:13:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] features of CC REL (specifically how to specify attribution information), we had one of our first of several realizations about authority: Creative Commons &#8212; creativecommons.org &#8212; is the canonical [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Curation and Structured Data for educational resources</title>
		<link>http://labs.creativecommons.org/2010/09/02/curation-and-structured-data-for-educational-resources/</link>
		<pubDate>Thu, 02 Sep 2010 16:30:59 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1008</guid>
		<description></description>
		<content:encoded><![CDATA[I spent most of last week in Alexandria, Virginia, talking about DiscoverEd (and hearing others talk about their work, including Duraspace and Handles) with the <a href="http://www.learningregistry.org/">Learning Registry</a> project.  Learning Registry is a project of the US government that's focusing on how to make federal learning resources more accessible to educators.  We were invited to discuss DiscoverEd face to face after it became clear that some of the issues we've been addressing -- searching metadata about OER, multiple parties making different assertions about the same resource -- were going to be key for Learning Registry.

Learning Registry has been collecting ideas about the project using <a href="http://learningregistry.ideascale.com/">Idea Scale</a>, and on Tuesday <a href="http://twitter.com/mrch0mp3rs">Aaron</a> <a href="http://groups.google.com/group/learningregistry/browse_thread/thread/bb63b91cfc5c7bd8?hl=en">published a list</a> of the most popular ideas to date.  Reading the list, it's clear that there are a few themes.  First, people are interested in using structured data to help them search.  Whether it's a microformat to <a href="http://learningregistry.ideascale.com/a/dtd/Microformats/73660-9751">identify a resource as educational</a>, <a href="http://learningregistry.ideascale.com/a/dtd/intelligent-metadata-extraction-and-tagging/74031-9751">extraction of metadata</a>, adding <a href="http://learningregistry.ideascale.com/a/dtd/CORDRA-style-tagging/75717-9751">information about specific properties</a> (seat time, cost, etc), several ideas centered around making use of structured data to improve the search experience.

While that's not too surprising, it was also interesting to note that the idea of distributed curation came up, whether people called it that or not.  The <a href="http://learningregistry.ideascale.com/a/dtd/Microformats/73660-9751">microformat suggestion</a> involves, at its most basic level, the ability to say "I think this is educational".  It's not a far step from that to "I think this other resource (created by someone else) is educational."  People also suggested using <a href="http://learningregistry.ideascale.com/a/dtd/XML-Site-Maps/73659-9751">sitemaps as the basis</a> for listing educational resources.  All of this makes me think that the idea of curating and collating resources is going to be an important part of how people find information in the future (whether they're explicitly curating, or implicitly by posting a link to Twitter, it's all about filtering information to the set you're interested in).

It's always nice to hear that you're on the right track with a project; seeing the ideas suggested for Learning Registry reinforces my belief that we're looking at the right areas for improving the OER search experience.  (It's also awesome that people <a href="http://learningregistry.ideascale.com/a/dtd/Make-finding-open-content-easier/73859-9751">want license information incorporated into search results</a> -- what a great idea!)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1008</wp:post_id>
		<wp:post_date>2010-09-02 16:30:59</wp:post_date>
		<wp:post_date_gmt>2010-09-02 16:30:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curation-and-structured-data-for-educational-resources</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="describing-oer"><![CDATA[Describing OER]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="learning-registry"><![CDATA[learning registry]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Gandi.net supports CC</title>
		<link>http://labs.creativecommons.org/2010/09/13/gandi-net-supports-cc/</link>
		<pubDate>Mon, 13 Sep 2010 20:16:57 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1104</guid>
		<description></description>
		<content:encoded><![CDATA[Some time ago, prompted by truly horrifying customer service and useless web interfaces of certain domain registrars, I decided to move all of CC's domains to <a href='http://www.gandi.net'>Gandi.net</a>.  I had had my personal domains with Gandi for quite some time, and had been very happy with the customer service and web management interface.  Also, other people on the tech team at CC commented on the good experiences they had always had with Gandi.

A couple months ago I wrote in to Gandi customer service about trying to transfer a .fr domain.  The customer service I received was excellent, in fact even better than I had anticipated.  Shortly thereafter, I received an unexpected email from Gandi informing us of <a href='http://www.gandi.net/supports/'>a program</a> that Gandi runs in which they offer special support or services to certain organizations.  Per their site:

<blockquote>
“Gandi is, and wants to remain, a credible alternative for those that want to have a presence on the web. Our customers support us in this mission and in turn we support companies that, whether internet-based or not, have embarked on this adventure despite the presence of well-established monopolies.”</blockquote>

The long and the short of it is that Gandi is now supporting CC with free domain registrations and renewals.  Additionally, Gandi is going to provide CC with free <a href='http://en.wikipedia.org/wiki/Virtual_private_server'>VPS</a> instances, and we plan to move various web services in the coming months.

We were happy to transfer our domains to Gandi simply because they are the best registrar out there, and Gandi supporting CC and it's mission by providing a crucial part of CC's core infrastructure is icing on the cake.  CC would like to thank Gandi for its generous support!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1104</wp:post_id>
		<wp:post_date>2010-09-13 20:16:57</wp:post_date>
		<wp:post_date_gmt>2010-09-13 20:16:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gandi-net-supports-cc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="domains"><![CDATA[domains]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>190</wp:comment_id>
			<wp:comment_author><![CDATA[Voiture neuve]]></wp:comment_author>
			<wp:comment_author_email>ddpetit@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.comparemandataire.fr</wp:comment_author_url>
			<wp:comment_author_IP>86.76.7.174</wp:comment_author_IP>
			<wp:comment_date>2010-09-15 06:17:32</wp:comment_date>
			<wp:comment_date_gmt>2010-09-15 06:17:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello,

Congratulations for your choice. Gandi is one of the best registrar for customer service. They help their customers as long as they can.

I'm using Gandi for 2 years and I'm really happy to work with their team.

Damien P. CEO of CompareMandataire.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Find and Reuse Images: Painless Attribution</title>
		<link>http://labs.creativecommons.org/2010/10/04/find-and-reuse-with-attribution-cc-licensed-images/</link>
		<pubDate>Mon, 04 Oct 2010 23:28:50 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1106</guid>
		<description></description>
		<content:encoded><![CDATA[Finding CC licensed images and using them properly is something many people seem to struggle with: finding them can be straight-forward, but many sites don't provide copy and paste reuse code that complies with the license. <a href="http://www.nottingham.ac.uk/xpert/">Xpert</a>, a project of University of Nottingham, has launched an <a href="http://www.nottingham.ac.uk/xpert/attribution/">image search tool</a> that helps with this. Xpert Attribution tool searches Wikimedia Commons and Flickr and provides an easy way to get the image with the attribution information overlaid, or (even better, in my opinion) with RDFa suitable for embedding. I've combined the two below (downloading the image with attribution, and adding the structured-data enriched embed code below it).

<div style="border:1px solid #444; padding: 0.5em; width:450px;">
<img src="http://labs.creativecommons.org/files/2010/10/flower.jpg" alt="" title="flower" width="420" height="325" class="aligncenter size-full wp-image-1130" /><p xmlns:cc="http://creativecommons.org/ns#" about="http://commons.wikimedia.org/wiki/File:-_Schlumbergera_trunctata_-.jpg"> Taken from http://upload.wikimedia.org/wikipedia/commons/e/eb/-_Schlumbergera_trunctata_-.jpg on 2010-10-05<br> Original URL - <a target="new" href="http://commons.wikimedia.org/wiki/File:-_Schlumbergera_trunctata_-.jpg" rel="cc:attributionURL">http://commons.wikimedia.org/wiki/File:-_Schlumbergera_trunctata_-.jpg</a> created on February 2007<br><span property="cc:attributionName">Nino Barbieri</span> <a href="http://creativecommons.org/licenses/by-sa/2.5/" rel="license">CC BY-SA 2.5</a></p>
</div>


The inclusion of structured data with the HTML means you can click the license link above and the license deed will display the attribution information, as well as our generated attribution HTML.

<a href="http://labs.creativecommons.org/files/2010/10/Screenshot-Creative-Commons-—-Attribution-ShareAlike-2.5-Generic-Google-Chrome.png"><img src="http://labs.creativecommons.org/files/2010/10/Screenshot-Creative-Commons-—-Attribution-ShareAlike-2.5-Generic-Google-Chrome.png" alt="" title="Attribution information on the deed" width="781" height="164" class="aligncenter size-full wp-image-1137" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1106</wp:post_id>
		<wp:post_date>2010-10-04 23:28:50</wp:post_date>
		<wp:post_date_gmt>2010-10-04 23:28:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>find-and-reuse-with-attribution-cc-licensed-images</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attribution"><![CDATA[attribution]]></category>
		<category domain="post_tag" nicename="cc-rel"><![CDATA[cc rel]]></category>
		<category domain="post_tag" nicename="flickr"><![CDATA[flickr]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<category domain="post_tag" nicename="wikimedia-commons"><![CDATA[wikimedia commons]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>191</wp:comment_id>
			<wp:comment_author><![CDATA[rpcutts]]></wp:comment_author>
			<wp:comment_author_email>rpcutts@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.183.140.99</wp:comment_author_IP>
			<wp:comment_date>2010-10-05 07:27:04</wp:comment_date>
			<wp:comment_date_gmt>2010-10-05 07:27:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'll often use cc-by images for blog articles. 
The way I attribute is to put a line at the end of the article saying "photography by Mr Smith CC-BY"  linking to where I got the image. 

Is this acceptable?  
The issue Is have with the methods above is that they would compromise the design of the page/article.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.134.252.98</wp:comment_author_IP>
			<wp:comment_date>2010-12-02 23:30:53</wp:comment_date>
			<wp:comment_date_gmt>2010-12-02 23:30:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The license doesn't require specific formatting for attribution, but does require that you link to the original source (or alternative URL provided by the creator), and specify the creator (or alternate name specified), and the license you used it under. Sounds like you're doing that.

Note that the structured data included with the HTML above does help people further re-using the work. You could consider using Xpert as a way to generate the HTML, then separate the image from the attribution text.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Upcoming changes to CC Network</title>
		<link>http://labs.creativecommons.org/2010/09/24/upcoming-changes-to-cc-network/</link>
		<pubDate>Fri, 24 Sep 2010 18:18:25 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1109</guid>
		<description></description>
		<content:encoded><![CDATA[In about a week (Monday, October 4, 2010) we'll be rolling out an update to CC Network. This update will integrate CC Network with <a href="http://civicrm.org">CiviCRM</a>, our constituent management system. The primary improvement for users will be improved subscription handling: instead of receiving an authorization code you have to redeem, your donation will automatically be reflected on your account.

We do not anticipate any interruptions in service during the transition, although you may encounter some issues if you're in the middle of an OpenID authorization as we cut over. We expect the transition to be complete by close of business October 4 (1700 UTC-7). If you have questions about the transition, you can email development@creativecommons.org.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1109</wp:post_id>
		<wp:post_date>2010-09-24 18:18:25</wp:post_date>
		<wp:post_date_gmt>2010-09-24 18:18:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upcoming-changes-to-cc-network</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-network"><![CDATA[CC Network]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>October 2010 Tech Update</title>
		<link>http://labs.creativecommons.org/2010/10/01/october-2010-tech-update/</link>
		<pubDate>Fri, 01 Oct 2010 19:17:24 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1117</guid>
		<description></description>
		<content:encoded><![CDATA[Inspired by the <a href="http://techblog.wikimedia.org/2010/09/wmf-engineering/">Wikimedia Foundation</a>, I wanted to give a brief update on the past month's technology work at Creative Commons. 

Notable highlights from September:
<ul>
	<li><a href="http://code.creativecommons.org/hudson/">Continuous Integration</a>: We technically <a href="http://labs.creativecommons.org/2010/08/12/welcome-hudson-to-creative-commons/">rolled this out</a> at the end of August, but CC is now using <a href="http://hudson-ci.org">Hudson</a> as a continuous integration tool for all our software projects (and as I write this, things are green!). You can also get an at-a-glance view of our "core" tools on the <a href="http://code.creativecommons.org/hudson/monitor/">build monitor</a>.</li>
	<li><a href="http://labs.creativecommons.org/2010/09/01/named-graph-support-lands-in-discovered/">Named graphs (provenance) landed</a> in <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a><br/>As we've continued to work on this, we've also had the opportunity to push <a href="http://sourceforge.net/tracker/index.php?func=detail&aid=3065437&group_id=118754&atid=682762">some patches</a> upstream to NG4J which addressed SQL quoting issues.</li>
	<li><a href="http://wiki.creativecommons.org/Search_and_Discovery:_OER's_Open_Loop">OER search and discovery paper</a> (describing our DiscoverEd work) submitted for OpenEd<br/>I'll be presenting at <a href="http://openedconference.org/2010/">OpenEd</a> in November, and will update the wiki page with slides when they're available.</li>
	<li>i.creativecommons.org is now racked at ISC: we're continuing to make improvements to our infrastructure for both performance and redundancy. i.creativecommons.org (which serves the license badges) has the highest sustained traffic of CC properties, so this is a nice improvement for us.</li>
	<li>Annual Campaign: Our annual fund-raising campaign begins Monday. As usual, we're rolling out some backend improvements for that. On Monday <a href="http://labs.creativecommons.org/2010/09/24/upcoming-changes-to-cc-network/">we'll move</a> to a new version of <a href="http://creativecommons.net/">CC Network</a> that's integrated with <a href="http://civicrm.org/">CiviCRM</a>.</li>
	<li>Public Domain Mark: Our new public domain tool, Public Domain Mark, launches in October. We've been working this month on adding support to our technical backend for that. At launch we'll have a chooser (similar to CC0's), the deeds and RDF (of course). We'll also have API support, thanks to the work completed earlier this year to normalize the way our tools work (aka, "sanity").</li>
</ul>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1117</wp:post_id>
		<wp:post_date>2010-10-01 19:17:24</wp:post_date>
		<wp:post_date_gmt>2010-10-01 19:17:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>october-2010-tech-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="status-update"><![CDATA[status update]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Well Covered</title>
		<link>http://labs.creativecommons.org/2010/10/05/well-covered/</link>
		<pubDate>Tue, 05 Oct 2010 00:12:03 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1127</guid>
		<description></description>
		<content:encoded><![CDATA[When we <a href="http://labs.creativecommons.org/2010/08/12/welcome-hudson-to-creative-commons/">rolled out</a> <a href="http://code.creativecommons.org/hudson">Hudson for CC code</a> last month, I already knew that I wanted to have test coverage reporting. There's simply no reason not to: it provides a way to understand how complete your tests are, and when combined with branch testing, gives you an easy way to figure out what tests need to be written (or where to target your test writing efforts).

Last week I updated <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a> to use <a href="http://cobertura.sourceforge.net/">Cobertura</a> for <a href="http://code.creativecommons.org/hudson/job/discovered/cobertura/">coverage</a>. It was pretty easy to crib the example ant build file to <a href="http://gitorious.org/discovered/repo/commit/ea1a28b823fdee9657b7f63f347c72cf5e9b82bd">add support</a> for instrumenting and testing our code.

When I first tried to add <a href="http://pypi.python.org/pypi/coverage/">coverage</a> support to our Python code, I <a href="http://yergler.net/blog/2010/08/20/ci-at-cc/">encountered</a> <a href="http://bitbucket.org/ned/coveragepy/issue/82/tokenerror-when-generating-html-report">an issue</a> between coverage and Jinja2. Ned quickly committed a fix, and today I finished instrumenting our core Python projects for coverage reporting. This includes the license engine (<a href="http://code.creativecommons.org/hudson/job/cc.engine/cobertura/">cc.engine</a>), the API (<a href="http://code.creativecommons.org/hudson/job/cc.api/cobertura/">cc.api</a>), the underlying license library (<a href="http://code.creativecommons.org/hudson/job/cc.license/cobertura/">cc.license</a>), and the structured data scraper used by the deeds (<a href="http://code.creativecommons.org/hudson/job/deedscraper/cobertura/">deedscraper</a>). 

A pleasant surprise after instrumenting is the current state of coverage. With the exception of cc.engine, we're at greater than 90% coverage for our core code (it appears that there are lots of branches/conditionals we don't test adequately in cc.engine right now). Looking forward to seeing 100's across the board.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1127</wp:post_id>
		<wp:post_date>2010-10-05 00:12:03</wp:post_date>
		<wp:post_date_gmt>2010-10-05 00:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>well-covered</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cobertura"><![CDATA[cobertura]]></category>
		<category domain="post_tag" nicename="coverage"><![CDATA[coverage]]></category>
		<category domain="post_tag" nicename="hudson"><![CDATA[hudson]]></category>
		<category domain="category" nicename="infrastructure"><![CDATA[infrastructure]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Orgmode and Roundup: Bridging public bugtrackers and local tasklists</title>
		<link>http://labs.creativecommons.org/2010/11/10/bridging-public-bugtrackers-and-local-tasklists/</link>
		<pubDate>Wed, 10 Nov 2010 19:39:36 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1146</guid>
		<description></description>
		<content:encoded><![CDATA[<p>So maybe you're already familiar with the problem.  You're collaborating with other people, and especially if you're in a free software environment (but maybe even some install at your work) you have some bugtracker, and that's where everyone collaborates.  But on the other hand, you have a life, your own todo systems, your own notes, etc.  Even for the tasks that are on the bugtracker, you might keep your own local copy of that task and notes on that task.  Eventually things start to get out of sync.  Chaos!</p>

<p>Wouldn't it be great if you could sync both worlds?  Keep the notes that are relevant to being public on the public bugtracker, but keep private notes that would just clutter up the ticket/issue/bugreport private.  Mesh the public task system with your private task system.  Well, why not?</p>

<p>So this was the very problem I'd run into.  I have my work bugtracker for here at CC, our <a href="http://code.creativecommons.org/issues/">install of roundup</a>, and then I have my own TODO setup, a collection of <a href="http://orgmode.org">Org-mode</a> files.</p>

<p>There are a lot of things I like about org-mode.  It's in emacs (though there's apparently a <a href="http://article.gmane.org/gmane.emacs.orgmode/33226">lean vim port in the works</a>), it's plaintext (which means I can sync across all my machines with git... which I do!), tasks are nested trees / outlines (I really tend to break down tasks in very granular fashions as I go so I don't get lost), notes are integrated directly with tasks (I take a <b>lot</b> of notes), and it's as simple as you need it or as complex as you want to get (I started out very simple, now my usage of org-mode is fairly intricate).  It also does a good job of spanning across multiple files while still retraining the ability to pull everything together with its agenda, which is useful since I like to keep things semi-organized.</p>

<p>And of course, the relevant file here is all my Creative Commons stuff, which I keep in a file called ccommons.org.  There's a lot of private data in here, but I've uploaded a <a href="http://labs.creativecommons.org/~cwebber/misc/ccommons.org">minimalist version of my ccommons.org file</a>.</p>

<p>So!  Syncing things.  If you open the file in an emacs version with org-mode installed, you'll notice 4 sections.  Two of these are crucial to my setup, but we won't be using them today: "Events" holds say, meeting at X time, traveling on certain days; "Various Tasks" contains not roundup-related tasks.  Then there's the other two: "Roundup" will collect all the tasks we need to work on, and "Supporting funcs" has a couple of org-babel blocks in Python and emacs-lisp.</p>

<p>Anyway, enough talk, let's give it a spin.  You'll need a recent version org-mode and a copy of emacs.  Make sure that newer org-mode is on your load-path and then evaluate:</p>

<p><pre>(require 'org)
(require 'org-install)
(require 'ob-python)
(setq org-confirm-babel-evaluate nil)
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
</pre></p>

<p>Next open up the relevant org-mode file.  Move to the "Roundup" line, hit Tab to cycle its visibility, and move to the line that starts with "#+call:"</p>

<p>
<a href="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot1.png"><img src="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot1.png" alt="" width="614" height="558" class="alignnone size-full wp-image-1148" /></a>
</p>

<p>Now press "Ctrl+c Ctrl+c".  You'll see it populate with issues from <a href="http://code.creativecommons.org/issues/issue?status=-1,1,2,3,4,5,6,7&amp;@sort=-activity&amp;@search_text=&amp;@dispname=Your%20Issues&amp;@filter=status,assignedto&amp;@group=priority&amp;@columns=id,activity,title,creator,status&amp;assignedto=40&amp;@pagesize=50&amp;@startwith=0">my issues list</a>:</p>

<p>
<a href="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot2.png"><img src="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot2.png" alt="" width="614" height="558" class="alignnone size-full wp-image-1149" /></a>
</p>

<p>What's happening here?  So we're executing an org-babel block at point.  <a href="http://orgmode.org/worg/org-contrib/babel/intro.php">Org-babel</a> is an org-mode extension that allows you to make blocks of code executable, and even chain from one language to another (it also has some stuff relevant to Donald Knuth's "literate programming" which is cool but I'm not using here).  If we look at the code blocks:</p>

<p>
<a href="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot3.png"><img src="http://labs.creativecommons.org/files/2010/11/cc_blog_ccommons_screenshot3.png" alt="" width="614" height="558" class="alignnone size-full wp-image-1150" /></a>
</p>

<p>Anyway, there are three code blocks here.</p>

<ul>
  <li><b>ccommons-roundup-parse:</b> uses python to read the <a href="http://code.creativecommons.org/issues/issue?@action=export_csv&amp;@columns=id,activity,title,creator,status&amp;@sort=-activity&amp;@group=priority&amp;@filter=status,assignedto&amp;@pagesize=50&amp;@startwith=0&amp;status=-1,1,2,3,4,5,6,7&amp;assignedto=40">CSV file</a> generated by roundup which is relevant to my task list, converts it into a list of two-item lists (task id, task title)</li>

 <li><b>ccommons-roundup-insert-func:</b> the function that actually inserts items into our "* Roundup" heading.  It checks the ROUNDUPID property to see if that task is already inserted or not.  If not, it inserts the task with the appropriate title and ROUNDUPID.</li>

  <li><b>ccommons-roundup-insert</b> the actual block we end up invoking.  It binds together the data from ccommons-roundup-parse with a function call to the function defined in ccommons-roundup-insert-func.</li>
</ul>

<p>You can evaluate it multiple times.  It'll only insert new tasks that aren't on your list currently.  Now you can take notes on your tasks, schedule them for various dates, make subtasks, etc.  When you're ready to close out a task close it out both on the ticket and in org-mode.  If you want to use a similar setup for org-mode, I think it's easy enough to borrow these methods and just change the CSV URL to whatever URL is appropriate for your user's tasks.</p>

<p>Now admittedly this still isn't even the best setup.  It would be good if it told you when some tasks are marked as closed in your org-mode and open in roundup and vice versa.  Org-babel still feels a bit hacky... I probably wouldn't use it on anything other than scripts-I-want-to-embed-in-my-orgmode-files (for now at least).  I even had to strip out quotes from the titles because org-babel python <a href="http://article.gmane.org/gmane.emacs.orgmode/33349">doesn't escape quotations from strings correctly</a> currently (but that's a bug, one that will hopefully be fixed).  Even so, I've been trying to close out a lot of roundup tasks lately, and it's really helped me to bridge both worlds.</p>

<p><b>Edit:</b> And in case you're wondering why I didn't use url.el instead of piping to python, the reason is because of CSV support... there's none builtin to emacs as far as I know, and splitting on commas doesn't handle all of the escaping intricacies... and org-babel makes it pretty easy to be lazy and simply use python for what python already handles well.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1146</wp:post_id>
		<wp:post_date>2010-11-10 19:39:36</wp:post_date>
		<wp:post_date_gmt>2010-11-10 19:39:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bridging-public-bugtrackers-and-local-tasklists</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bugtrackers"><![CDATA[bugtrackers]]></category>
		<category domain="post_tag" nicename="emacs"><![CDATA[emacs]]></category>
		<category domain="post_tag" nicename="org-babel"><![CDATA[org-babel]]></category>
		<category domain="post_tag" nicename="org-mode"><![CDATA[org-mode]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="roundup"><![CDATA[roundup]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>194</wp:comment_id>
			<wp:comment_author><![CDATA[Christian Egli]]></wp:comment_author>
			<wp:comment_author_email>christian.egli@sbs.ch</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>217.162.216.49</wp:comment_author_IP>
			<wp:comment_date>2010-11-10 20:56:09</wp:comment_date>
			<wp:comment_date_gmt>2010-11-10 20:56:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why didn't you just use org-feed.el (see http://orgmode.org/worg/org-contrib/org-feed.php)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>195</wp:comment_id>
			<wp:comment_author><![CDATA[cwebber]]></wp:comment_author>
			<wp:comment_author_email>cwebber@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://dustycloud.org</wp:comment_author_url>
			<wp:comment_author_IP>67.175.218.235</wp:comment_author_IP>
			<wp:comment_date>2010-11-17 22:58:46</wp:comment_date>
			<wp:comment_date_gmt>2010-11-17 22:58:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Christian,

Org-feed looks cool, I haven't tried it.  But I don't believe roundup (or at least the version of roundup we have installed) has feed support though, so I couldn't subscribe to an RSS or an Atom feed, hence parsing a CSV here.  For other bugtrackers which do provide feeds though, that's probably good enough.  Anyway, I will look into using org-feed for some other things! :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>14</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>196</wp:comment_id>
			<wp:comment_author><![CDATA[Paul Mantz]]></wp:comment_author>
			<wp:comment_author_email>pcmantz@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>208.54.7.163</wp:comment_author_IP>
			<wp:comment_date>2010-12-13 17:00:45</wp:comment_date>
			<wp:comment_date_gmt>2010-12-13 17:00:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is a csv.el that handles the reading of commented entries if you'd like to make your script pure elisp: http://ulf.epplejasper.de/downloads/csv.el]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>197</wp:comment_id>
			<wp:comment_author><![CDATA[Gergo]]></wp:comment_author>
			<wp:comment_author_email>gszpem@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>79.97.97.45</wp:comment_author_IP>
			<wp:comment_date>2010-12-19 00:38:00</wp:comment_date>
			<wp:comment_date_gmt>2010-12-19 00:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article, this looks promising, and is the closest match to what I'm looking for: importing data into Redmine from a plain text todo list (can easily convert my files and my self to orgmode). 
It seems the other way around than your solution, but I guess it's still doable? 

Later, I'd like two way synchorisation, with Redmine&amp;Bugzilla for bulk editing and "refactoring" of the tasks.. Fortunately I could use proper APIS to communicate with those services.

You mention "babel feels hacky" - but could it still be best (easiest,cheapest) way to start? Thanks for the tips anyway!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>198</wp:comment_id>
			<wp:comment_author><![CDATA[cwebber]]></wp:comment_author>
			<wp:comment_author_email>cwebber@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://dustycloud.org</wp:comment_author_url>
			<wp:comment_author_IP>67.175.218.235</wp:comment_author_IP>
			<wp:comment_date>2011-01-03 23:39:38</wp:comment_date>
			<wp:comment_date_gmt>2011-01-03 23:39:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Paul Mantz: Thanks for pointing me toward csv.el... if I ever do make it pure elisp, I'll certainly use that!

Gergo: Sure, I think org-babel is a pretty nice way to spec these things out and embed tools like this into and out of orgmode.  It's a good way to make a hacky first start anyway that you could work into something more refined later anyway.  If you did it in pure elisp, I guess there's no difference between using org-babel and just writing it in a separate file, except for the convenience of "bundling" it with that file.  However, if external languages like python/ruby make interfacing with your bugtracker of choice easier babel is kind of nice for piecing things together fast.

I think that even if you ended up making the bridge pure elisp, it's kind of nice to have an src block to call the main function from that you can just evaluate with C-c C-c on point.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>197</wp:comment_parent>
			<wp:comment_user_id>14</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Technical case studies now on the wiki</title>
		<link>http://labs.creativecommons.org/2010/11/18/technical-case-studies-now-on-the-wiki/</link>
		<pubDate>Thu, 18 Nov 2010 00:12:33 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1160</guid>
		<description></description>
		<content:encoded><![CDATA[Have you ever tried to implement CC licensing into a publishing platform? Would it have been helpful to know how other platforms have done it?

I've just added a <a href="http://wiki.creativecommons.org/Special:SearchByProperty?title=Special:SearchByProperty&amp;property=Tag&amp;value=technical+details">collection</a> of technical case studies on the CC wiki looking at how some major adopters have implemented CC. The studies look at how some major platforms have implemented CC license choosers, the license chooser partner interface, CC license marks, search by license, and license metadata.

Several of the case studies are missing some more general information about the platform, so feel free to add your own content to the pages. Also, everyone is welcome to <a href="http://wiki.creativecommons.org/Case_Studies">add their own case studies</a> to the CC wiki.

Here is a list of new technical case studies:
<ul>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Al_Jazeera#Technical_Details">Al Jazeera</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Archive.org#Technical_Details">Archive.org</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Blip.tv#Technical_Details">Blip.tv</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Flickr#Technical_Details">Flickr</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/IssueLab#Technical_Details">IssueLab</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Jamendo#Technical_Details">Jamendo</a></li>
	<li><a href="http://wiki.creativecommons.org/Case_Studies/Whitehouse.gov#Technical_Details">Whitehouse.gov</a></li>
</ul>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1160</wp:post_id>
		<wp:post_date>2010-11-18 00:12:33</wp:post_date>
		<wp:post_date_gmt>2010-11-18 00:12:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>technical-case-studies-now-on-the-wiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case-studies"><![CDATA[case studies]]></category>
		<category domain="post_tag" nicename="case-studies"><![CDATA[case studies]]></category>
		<category domain="post_tag" nicename="cc-rel"><![CDATA[cc rel]]></category>
		<category domain="post_tag" nicename="cc-wiki"><![CDATA[cc wiki]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="platform-integration"><![CDATA[platform integration]]></category>
		<category domain="category" nicename="semantic-mediawiki"><![CDATA[semantic mediawiki]]></category>
		<category domain="post_tag" nicename="technical-case-studies"><![CDATA[technical case studies]]></category>
		<category domain="category" nicename="wiki"><![CDATA[wiki]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>WebM encoding CC&#039;s videos</title>
		<link>http://labs.creativecommons.org/2010/12/03/webm-encoding-ccs-videos/</link>
		<pubDate>Fri, 03 Dec 2010 20:03:54 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1179</guid>
		<description></description>
		<content:encoded><![CDATA[I was recently tasked with encoding all of <a href="http://creativecommons.org/videos">CC's videos</a> into <a href="http://en.wikipedia.org/wiki/WebM">WebM</a>, a new open video container format.

I started out by <a href="http://wiki.creativecommons.org/WebM">creating a table</a> of all of the videos and target quality. Then, I started to track down the highest quality version of each video I could find.

At first I had high hopes of using ffmpeg (with libvpx support) wrapped in a bash script to batch process all of the videos into .webm. Although there are some <a href="http://ubuntuforums.org/showthread.php?t=786095">decent directions</a> to re-compiling ffmpeg to enable webm, I ran into trouble (some sort of version conflict) and wasn't able to complete the process.

So after searching around, I found a few promising leads on the <a href="http://www.webmproject.org/tools/">WebM tools page</a>.

Our friends at <a href="http://www.getmiro.com/">Miro</a> have come out with <a href="http://www.mirovideoconverter.com/">Miro Video Converter</a>, which is a useful-looking tool that promises a simple way to encode video for mobile devices and the web. It purports to support webm, but sadly I wasn't able to test it as they don't currently develop a version for Linux (only Windows and OSX).

Next I tried installed the <a href="http://firefogg.org/make/">Fireogg</a> extension into Firefox and tested the process by converting one small .mov file into .webm. I was surprised how well it worked, although as far as I could tell it lacked a method to batch-process or queue files (or at least that functionality isn't within scope for its purpose). It also took an unreasonably long time to transcode the video, so my search continued.

With <a href="http://www.transcoder.org/">Arista Transcoder</a>, I found a Linux application that seemed to work. In Ubuntu, setup was as simple as extracting the archive and running <tt>python setup.py install --install-layout=deb</tt> (provided you have python installed). The <a href="http://www.transcoder.org/presets/">Web Browser (Advanced)</a> preset gave me the ability to queue up and transcode the videos into 360p, 480p, and 720p .webm with reasonable transcoding times.

One minor hurdle was to encode the videos into 240p WebM, a resolution not included in the Web Browser (Advanced) preset package. To accomplish that, I modified the json preset file to include 240p into webm. You can download my modified version of the json file in the preset <a href="http://mirrors.creativecommons.org/~akozak/web-advanced.json">here</a>. My only modification comes at the end. You should be able to just copy my version into <tt>~/.arista/presets</tt> and replace the original if it exists.

When we start to embed the files on <a href="http://creativecommons.org/videos">creativecommons.org/videos</a>, I plan on following the instructions in the <a href="http://diveintohtml5.org/video.html">Dive Into HTML5 Video chapter</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1179</wp:post_id>
		<wp:post_date>2010-12-03 20:03:54</wp:post_date>
		<wp:post_date_gmt>2010-12-03 20:03:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webm-encoding-ccs-videos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arista"><![CDATA[arista]]></category>
		<category domain="post_tag" nicename="transcoding"><![CDATA[transcoding]]></category>
		<category domain="category" nicename="video"><![CDATA[video]]></category>
		<category domain="post_tag" nicename="video"><![CDATA[video]]></category>
		<category domain="post_tag" nicename="webm"><![CDATA[webm]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Type Of: Educational (an idea)</title>
		<link>http://labs.creativecommons.org/2010/12/03/type-of-educational-an-idea/</link>
		<pubDate>Fri, 03 Dec 2010 00:08:28 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1204</guid>
		<description></description>
		<content:encoded><![CDATA[I spent most of yesterday in a meeting discussing ways to make search better for open educational resources. Preparing my short presentation for the day, I thought again about one of the challenges of doing this at web scale: how do you determine what's an educational resource? In <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a> we rely on curators to tell us that a resource is educational, but that requires us to start with lists of resources from curators; it'd be nice to start following links and add things if they're educational, move on if they aren't. If you want to build OER search that operates at web scale, this is one of the important questions, because it influences what gets into the index, and what's excluded<sup>1</sup>. Note that the question is not "what is an <strong>open</strong> educational resource"; the "open" part is handled by marking the resource with a CC license. With reasonable search filters you can start with the pool of CC licensed educational resources, and further restrict it to Attribution or Attribution-ShareAlike licensed works if that's what you need.

Creative Commons licenses work in a decentralized manner by including a bit of <a href="http://rdfa.info/">RDFa</a> with the license badge generated by the chooser. But no similar badge exists for OER or educational resources, at least partly because it's hard to agree on what the one definition of OER is. But what if we just tried to say, "I'm publishing this, and I think it's educational." Maybe we can do that. After seeing the <a href="http://www.nottingham.ac.uk/xpert/">Xpert Project</a> <a href="https://twitter.com/#!/xpert_project/statuses/10387307366457344">tweet about</a> a microformat/RDFa/etc to improve discoverability, I decided to try my hand at a first draft.

<code><pre>
&lt;span about="" typeof="ed:LearningResource" xmlns:ed="http://example.org/#">Educational&lt;/span>
</pre></code>

This tag generates the triple:

<code>&lt;> &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type> &lt;http://example.org/#LearningResource> .</code>

Literally, "this web page is a Learning Resource". Of course this could be written as a link, image, or even made invisible to the user.

There is one big question here: what should <code>http://example.org/#</code> actually be? There are lots of efforts to create vocabularies out there, so we should clearly reuse a term from one of those efforts. If we reuse one that defines a hierarchy including things like Course, Lecture, etc, as refinements of Learning Resource, that may also provide interesting information for improving the search experience.

This markup won't be visible in Google, but it will allow crawlers and software to start determining what people think is educational. And that seems like progress to me. Reasonable first step? Fundamentally flawed? Inexcusably lame? Feedback welcome.

<hr noshade />

<sup>1</sup> I should note that the question is "How does someone online say that a resource is educational?" because you want a) to allow people to make the judgement about other resources online, and b) you care about who's saying the resource is educational. Please pardon my reductionism.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1204</wp:post_id>
		<wp:post_date>2010-12-03 00:08:28</wp:post_date>
		<wp:post_date_gmt>2010-12-03 00:08:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>type-of-educational-an-idea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brainstorm"><![CDATA[brainstorm]]></category>
		<category domain="category" nicename="describing-oer"><![CDATA[Describing OER]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<category domain="post_tag" nicename="oer"><![CDATA[OER]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[marking-oer]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>199</wp:comment_id>
			<wp:comment_author><![CDATA[Pat]]></wp:comment_author>
			<wp:comment_author_email>patrick.lockley@nottingham.ac.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.nottingham.ac.uk/xpert/</wp:comment_author_url>
			<wp:comment_author_IP>128.243.253.107</wp:comment_author_IP>
			<wp:comment_date>2010-12-03 10:59:27</wp:comment_date>
			<wp:comment_date_gmt>2010-12-03 10:59:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would agree that the vocabulary is part of the problem - and whether DC and DC Terms does enough is open to question.

You could also extend the example above to include related items in the data - then things would be interesting for a crawler and the triples.

I also think part of this is a cataloguing thing, as people need to know the system exists before they can use it, and some people may have resources that return to is going to take them ages to recatalogue.

Perhaps a web crawler and a crowdsource would work better / allow for scale?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>200</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.134.242.17</wp:comment_author_IP>
			<wp:comment_date>2010-12-04 00:07:45</wp:comment_date>
			<wp:comment_date_gmt>2010-12-04 00:07:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[One reason I like this sort of solution is that it allows third-parties to publish machine readable information about resources. So if I'm passionate about a subject area, I could publish a list of the best OER on it, and annotate them as "these resources over there are Learning Resources". Ideally you'd include additional information like language, education level, and subject, I think. Is that what you're referring to by related items, or do you mean "here are other, independent resources that are related to this one?"

Concur that there is an uptake, but as you say, people need to know it exists; before that it actually has to exist ;).

Can you say more about what you mean by crowdsourcing?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>201</wp:comment_id>
			<wp:comment_author><![CDATA[Mike Linksvayer]]></wp:comment_author>
			<wp:comment_author_email>ml@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>https://creativecommons.net/ml</wp:comment_author_url>
			<wp:comment_author_IP>76.200.173.242</wp:comment_author_IP>
			<wp:comment_date>2010-12-06 06:24:23</wp:comment_date>
			<wp:comment_date_gmt>2010-12-06 06:24:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I disliked the idea at first glance -- it would be more useful for people to provide more specific info (most of the things in section 5.x of IEEE LOM, excluding the generic ones that aren't education-specific) which a education-focused search engine or other tool could use to decide whether to include, but I suppose a super simple assertion that something is educational might make for quicker adoption, even of more specific assertions (because more adoption leads to more learning, tools, beneficient cycle) some via refining LearningResource, and would be useful for schema publication (eg typicalLearningTime could have domain LearningResource).

So, bravo!

You're right about the big question, too. Though assuming no dominant and good vocabulary exists, reuse could be worse than creating a new vocabulary with a few key properties that the right parties can quickly implement.

(Though commenting mostly from ignorace.)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>202</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.134.242.17</wp:comment_author_IP>
			<wp:comment_date>2010-12-06 23:15:28</wp:comment_date>
			<wp:comment_date_gmt>2010-12-06 23:15:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Providing more concrete properties like language, education level, etc is definitely preferable to just saying "educational". The idea of creating a constrained vocabulary that doesn't attempt to bite off too much (and which can later have equivalence assertions added) is a good one, which would probably mesh well with other community efforts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>203</wp:comment_id>
			<wp:comment_author><![CDATA[Piet Kleymeer]]></wp:comment_author>
			<wp:comment_author_email>pkleymee@umich.edu</wp:comment_author_email>
			<wp:comment_author_url>http://open.umich.edu</wp:comment_author_url>
			<wp:comment_author_IP>98.224.218.120</wp:comment_author_IP>
			<wp:comment_date>2010-12-11 17:04:34</wp:comment_date>
			<wp:comment_date_gmt>2010-12-11 17:04:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd like to back this discussion up a little. What exactly is the problem we're trying to solve in search? Is the problem that the content that folks are trying to find in search is not categorized properly? If so, your "TypeOf:" mechanism should serve quite well. But, I argue that the main problem is that the content exists in formatted silos that don't link to anything in the web. In essence, there is no way to determine relevancy or importance because this content stands alone. 

Google usually relies on some sort of relevancy ranking to bring the user to the most appropriate search results. Google's problem, when it comes to fine-grained educational resources, is that the resources are usually packaged objects (PDFs, PPTs, DOCs, etc.) and not websites. They are part of the deep web and don't live at the surface. Additionally, since Google uses PageRank (based on web links) to determine relevancy, it tends to miss these types of content because they aren't linking to other websites. What Google needs, then, is a new way to determine relevancy or importance for this type of content. Or does it?

Instead of forcing Google to change its behavior, let's think of another way to solve the problem. One way to fix this is for content publishers to build their educational resources into the web, not outside of the web. When a resource is built into the web and references other content in the web, it becomes a part of the network, part of the relevancy system that already exists. 

Connexions (cnx.org) is well-known for building its educational resources into the web using their own CNXML markup. I did a quick test (and this may not mean anything significant) where I found THE most popular learning module on Connexions: "independent variable". It's a very short module that essentially just points to the Wikipedia definition for independent variable. I then did a Google search for "independent variable" and guess what... it returned Wikipedia and Connexions as the #1 and #2 results. Funny.

However, it seems that most other Connexions modules don't link outside the cnx.org domain. What would happen if they did? Stand alone educational resources will continue to stand alone unless they are built into the existing infrastructure. Maybe my argument is for more and better tools to create educational resources as websites. We need to make it easier to publish content on the web, not upload objects to the web.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>204</wp:comment_id>
			<wp:comment_author><![CDATA[Thesis on metadata interoperability: RDF - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2010/12/15/thesis-on-metadata-interoperability-rdf/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2010-12-15 02:31:19</wp:comment_date>
			<wp:comment_date_gmt>2010-12-15 02:31:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] do at Creative Commons, whether modeling license attributes, work registration, or domain-specific descriptions that add value to licensed works. Nice to see in depth academic backing for this [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>192.5.93.147</wp:comment_author_IP>
			<wp:comment_date>2010-12-15 15:53:05</wp:comment_date>
			<wp:comment_date_gmt>2010-12-15 15:53:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Dark-web resources are obviously a very real issue for web search (both generally as well as for hypothetical OER search) completely out of scope for this proposal. And linking amongst OER -- both for saying "this is related/relevant", as well as "I built on this to make my OER" -- is behavior we want to encourage.

But there's a fundamental question that I think is at a lower level than either of these that I'm talking about: If I'm building an education search tool (whatever that may be), how do I decide to include resources from Connexions, and not include a MySpace page for a band called The Independent Variables, for example. 

If we look for parallels with Creative Commons licenses (which is perhaps dangerous), we find that the easy way to limit the set of resources under consideration for a CC license search is to look for the license mark (rel="license"); publishers are responsible for marking their work with this additional piece of information. This proposal is an attempt to answer the question of "what resources should be included in education search" using a similar principle: publishers annotate resources (theirs or others) with the assertion that they are educational.

It's *possible* that with more linking, etc, that you could develop an algorithm that was able to make this determination with equal (or "better") accuracy. But that requires creators to change the resources themselves (as opposed to the publishing template used by their CMS, for example), and still requires search engines to develop an algorithm to understand the relationship.

I'm not certain this is actually sufficient, or the best way to spell it, just wanted to write it as a starting point for discussion. I agree that developing educational resources that are "born digital" or "born on the web" (and perhaps developing the tools to support that development, if needed) is an essential requirement for realizing the potential of OER.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[Piet Kleymeer]]></wp:comment_author>
			<wp:comment_author_email>pkleymee@umich.edu</wp:comment_author_email>
			<wp:comment_author_url>http://open.umich.edu</wp:comment_author_url>
			<wp:comment_author_IP>98.224.218.120</wp:comment_author_IP>
			<wp:comment_date>2010-12-15 17:58:47</wp:comment_date>
			<wp:comment_date_gmt>2010-12-15 17:58:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with everything until I start thinking about the definition of a copyright license compared to the definition of an educational resource. I'm not sure those two things are really congruent. What are the descriptive characteristics of a license? 

1) certifier: who recognizes this as a copyright license (and where is this recognized)? 
2) authority: who is trusted to create and distribute this license (e.g., Creative Commons)? 

Are there other characteristics that are important here? Essentially, the way to make a congruent example here is to determine a body that will recognize content as being an educational resource and determine authorities that will create educational resources. Granted, CC became its own trusted authority in the copyright space and colleges and universities would be natural trusted authorities in the educational resource space. But we still need to identify a certifier or recognizing body. 

Perhaps this overcomplicates things, but if there aren't any criteria for what counts as an educational resource, then there is no point in labeling it as such -&gt; so I jump back up to my previous argument that we need to focus on changing content creation behavior.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>207</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Yergler]]></wp:comment_author>
			<wp:comment_author_email>nathan@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>71.134.234.81</wp:comment_author_IP>
			<wp:comment_date>2010-12-17 23:07:43</wp:comment_date>
			<wp:comment_date_gmt>2010-12-17 23:07:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm actually not sure that I agree that the license assertion relies upon the certifier and authority. No one certifies that a photo I post on Flickr is really mine to CC license, definitely not Creative Commons. It's up to the creator/publisher to mark their work. I think that knowing how to "spell" the assertion that "I think this work is educational" is the first step towards saying, "we [a school district, professional society, or even individual] have a rubric/tool for determining if a resource meets our educational standards, and this resource over here does." I think there's agreement that the latter is useful, and that this idea provides the basis for it, but that doesn't necessarily mean that this idea is useful on its own :).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>XMP FileInfo panel for Adobe Creative Suites 4 and 5 now available!</title>
		<link>http://labs.creativecommons.org/2010/12/06/xmp-fileinfo-panel-for-adobe-creative-suites-4-and-5-now-available/</link>
		<pubDate>Mon, 06 Dec 2010 17:17:32 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1235</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This is a special guest post by <strong>John Bishop</strong> of <a href="http://johnbishopimages.com/">John Bishop Images</a>.</em>

Prior to Adobe's Creative Suite 4, adding <a href="http://wiki.creativecommons.org/XMP">Creative Commons license metadata</a> via the <em>FileInfo</em>… dialog (found in Photoshop, Illustrator, InDesign and more) meant coding a relatively simple text based XML panel definition and has been available from the <a href="http://wiki.creativecommons.org/Adobe_Metadata_Panel">Creative Commons Wiki</a> since 2007.

Starting with Creative Suite 4 Adobe migrated the XMP FileInfo panel to a Flash based application, meaning that adding Creative Commons metadata became much more complex, requiring <a href="http://www.adobe.com/products/xmp/custompanel.html">Adobe's XMP SDK</a> and the ability to develop applications in Flash, C++ or Java.

After significant development and testing <a href="http://johnbishopimages.com/">john bishop images</a> is pleased to announce the availability of a custom <a href="http://johnbishopimages.com/creativecommons/?xmp">Creative Commons XMP FileInfo Panel</a> for Creative Suite 4 and Creative Suite 5 – free of charge.

This comprehensive package offers the ability to specify Creative Commons license metadata directly in first class, industry standard tools and places Creative Commons licensing metadata on the same footing as the standardized, commercial metadata sets like Dublin Core (DC), IPTC and usePLUS and tightly integrates all the metadata fields required for a Creative Commons license in one panel.

Also included is a metadata panel definition that exposes the Creative Commons license metadata in the mini metadata panels found in Bridge, Premiere Pro, etc. And finally a set of templates that can be customized for the various license types and more is also included; these templates can be accessed from Acrobat.

For more information and to download the Creative Commons XMP FileInfo panel visit john bishop images' <a href="http://johnbishopimages.com/creativecommons/?xmp">Creative Commons</a> page.

<strong>Note:</strong> The panels are localized and a English-US language file is supplied. To contribute localization files in other languages please contact <a href="http://johnbishopimages.com/contact?xmpx">john bishop images</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1235</wp:post_id>
		<wp:post_date>2010-12-06 17:17:32</wp:post_date>
		<wp:post_date_gmt>2010-12-06 17:17:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmp-fileinfo-panel-for-adobe-creative-suites-4-and-5-now-available</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="adobe"><![CDATA[adobe]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="tools"><![CDATA[tools]]></category>
		<category domain="category" nicename="xmp"><![CDATA[xmp]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[Caroline Arms]]></wp:comment_author>
			<wp:comment_author_email>caroline.arms@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.59.181.0</wp:comment_author_IP>
			<wp:comment_date>2013-01-26 13:02:30</wp:comment_date>
			<wp:comment_date_gmt>2013-01-26 13:02:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am unable to download the Creative Commons XMP FileInfo Panel from the John Bishop Images page because the boxes in the form are all black and so the "scrambled code" I am required to enter is invisible.  I have the same problem in both Firefox and Safari on a Mac.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359205350.437701;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1359483517.314585;s:7:"message";s:47:"nkinkade changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:8:"nkinkade";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
				<title>Google News and Source Citation</title>
		<link>http://labs.creativecommons.org/2010/12/10/google-news-and-source-citation/</link>
		<pubDate>Fri, 10 Dec 2010 22:15:16 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1242</guid>
		<description></description>
		<content:encoded><![CDATA[Last month the Google News team <a href="http://googlenewsblog.blogspot.com/2010/11/credit-where-credit-is-due.html">announced</a> two new meta tags publishers can use to mark up their content with source information. The first, <code>syndication-source</code>, is similar to <code>rel="canonical"</code>: it lets Google know which version is authoritative (at least as far as Google News is concerned). The other, <code>original-source</code>, mirrors questions we've been thinking about here at CC. Google's description in the announcement reads:

<blockquote>Indicates the URL of the first article to report on a story. We encourage publishers to use this metatag to give credit to the source that broke the story...the intent of this tag is to reward hard work and journalistic enterprise. </blockquote>

Most Creative Commons licenses allow derivative works, and the question of how you cite (attribute) your derivative is worth exporing. While it's enough to include the attribution information, explicitly labeling the link to the source as the basis of your work not only allows others to discover that content, but also allows tools to begin drawing the graph of content reuse and repurposing.

Google's suggestion for news articles is a good start: it lets publishers indicate the original source in a machine readable way. However it'd be even better if that information were also visible to readers of the article by default. Creative Commons licenses require that adaptations credit the use of the original in the adaptation (see &sect;4b, <a href="http://creativecommons.org/licenses/by/3.0/legalcode">CC BY 3.0</a>, for example). You can imagine using the <a href="http://dublincore.org/documents/dcmi-terms/">Dublin Core Terms</a> to annotate this credit information using RDFa. For example:

<code>This article originally appeared in &lt;a xmlns:dc="http://purl.org/dc/terms" rel="dc:source" href="http://example.org/original-article">example.org&lt;/a>.</code>

This also opens up the possibility of annotating the type of adaptation that occurred, such as translation, format change, etc. 

Publishing machine readable information about sources and re-use is exactly where we want to go. Until the tools are ubiquitous, however, making that information visible to readers will be very important.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date>2010-12-10 22:15:16</wp:post_date>
		<wp:post_date_gmt>2010-12-10 22:15:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-news-and-source-citation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="meta"><![CDATA[meta]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="source-marking"><![CDATA[source marking]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>LibreOffice and CC OpenOffice Plugin: Good to go</title>
		<link>http://labs.creativecommons.org/2010/12/08/libreoffice-and-cc-openoffice-plugin/</link>
		<pubDate>Wed, 08 Dec 2010 22:33:03 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1247</guid>
		<description></description>
		<content:encoded><![CDATA[Over the summer, our GSOC student Akila Wajirasena gave a <a href="http://labs.creativecommons.org/2010/08/20/creative-commons-openoffice-plug-in-version-0-7-0-released/">wonderful overhaul to our OpenOffice plugin</a> with many improvements, including a <a href="http://labs.creativecommons.org/2010/07/03/creative-commons-open-office-plugin-gets-a-new-ui-and-supports-for-public-domain-tools/">slick new user interface, support for public domain tools,</a> and <a href="http://labs.creativecommons.org/2010/05/20/creative-commons-open-office-plugin-here-it-is-with-some-new-features/">many other cool things</a>.  Recently he contacted us having looked into whether or not that plugin works with <a href="http://www.documentfoundation.org/download/">LibreOffice</a>, a fork of OpenOffice run by the Document Foundation, which has gathered significant interest from certain areas of the free and open source software world recently.

The good news?  It seems that it works just fine out of the box:

<a href="http://labs.creativecommons.org/files/2010/12/cc_libreoffice_plugin_test.png"><img class="alignnone size-full wp-image-1249" src="http://labs.creativecommons.org/files/2010/12/cc_libreoffice_plugin_test.png" alt="CC LibreOffice plugin test" width="712" height="572" /></a>

We've only tested it on some limited systems though, so if you do have some problems, <a href="http://code.creativecommons.org/issues/issue738">please report them here</a>.

We also included some instructions previously on how to fix an issue on GNU/Linux systems where the menu would become inaccessible, and you had to install via the command line to fix it.  That seems like it may be fixed in LibreOffice.

One concern though is that LibreOffice is trying to <a href="http://lists.freedesktop.org/archives/libreoffice/2010-November/001879.html">use less amounts of Java or completely abandon Java altogether</a>.  Probably Java extensions will be supported some way in the future regardless, but it may be something to keep our eye on.

Thanks to Akila again for his work not only on the plugin enhancements but also into looking into this with LibreOffice.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1247</wp:post_id>
		<wp:post_date>2010-12-08 22:33:03</wp:post_date>
		<wp:post_date_gmt>2010-12-08 22:33:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libreoffice-and-cc-openoffice-plugin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="add-in"><![CDATA[Add-In]]></category>
		<category domain="category" nicename="openoffice"><![CDATA[OpenOffice]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[January 2011 Tech Update - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/01/03/january-2011-tech-update/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-01-03 21:21:51</wp:comment_date>
			<wp:comment_date_gmt>2011-01-03 21:21:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] verified that our OpenOffice.org plugin is compatible with LibreOffice, so obviously it needs a better name than CCOOo. Suggestions? Leave a [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Tuning TCP on CC&#039;s servers</title>
		<link>http://labs.creativecommons.org/2010/12/08/tuning-tcp-on-ccs-servers/</link>
		<pubDate>Wed, 08 Dec 2010 19:51:09 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1253</guid>
		<description></description>
		<content:encoded><![CDATA[A couple weeks ago we launched a new rack-mount server, which is kindly hosted by the <a href="http://www.isc.org/">ISC</a> in their Redwood City, California data center.  The sole purpose of this new server is to host static content, mostly i.creativecommons.org, which is probably the busiest domain CC has due to the license icons and badges being served from there.

Upon moving i.creativecommons.org to this new machine I noticed that there were terrible problems with connection timeouts when requesting images.  After thrashing around for why this was happening, I used <code>tcpdump</code> to grab some network traffic on the server and discovered that SYN requests were arriving at the machine and dying right there, with no subsequent SYN-ACK.  At that point it was clear that this was not a <a href="http://www.varnish-cache.org/">Varnish</a> or Apache problem, but something at a much lower level.  After testing various TCP tweaks in the running kernel I discovered that setting <code>net.ipv4.tcp_max_syn_backlog=2048</code>, up from the default of 256, <em>and</em> turning on <code>net.ipv4.tcp_syncookies</code> seemed to resolve the connection timeout issues.

However, the kernel message log was <em>filled</em> with message like the following.  In fact, there was one such message written to the log every minute:

<em>possible SYN flooding on port 80. Sending cookies.</em>

I was confused by this because ostensibly the site was functioning just fine.  My understanding was that SYN cookies were only activated when the SYN queue filled up, but as far as I could tell I had increased the depth of the queue sufficiently to avoid that problem.  I even tried setting <code>net.ipv4.tcp_max_syn_backlog</code> arbitrarily high to see what would happen.  Same result: site operated fine, but with SYN cookie kernel messages.  In my testing I also discovered that disabling <code>net.ipv4.tcp_syncookies</code> would immediately bring back the connection timeout problems.  Additionally, <code>netstat</code> revealed that though the site appeared to be functioning correctly, there were still an abnormally large amount of 'failed connection attempts' listed in the TCP stats.

I went over and over all the TCP settings and just couldn't figure out what was happening, nor did Google shed any light on this.  I then decided to do this:

<code>$ netstat -n | grep SYN_RECV | wc -l</code>

I ran this command many times in a row over a period of time and was surprised to see that the result was nearly always 256, give or take a few.  It then occurred to me that that number looked a lot like the default value of <code>net.ipv4.tcp_max_syn_backlog</code>.  However, as far as I knew (and know), all of those kernel parameters are supposed to be dynamic, capable of being changed on-the-fly, with <code>sysctl</code> or writing directly to the /proc file system.  So I set all my TCP changes in <code>/etc/sysctl.conf</code> and rebooted the machine.  Sure enough, since coming back up about a day ago I haven't seen a single kernel message about SYN cookies.  I even decided to just disable SYN cookies altogether based on a <a href="http://lkml.org/lkml/2008/2/5/167">recommendation</a> to do so in the default <code>/etc/sysctl.conf</code> file found on <a href="http://www.debian.org/">Debian</a> systems.

The machine is now humming along nicely.  For reference here are the TCP parameters I changed.  The values were gleaned from various sites while doing extensive research on TCP tuning.  Some of the values seem improbable to me, but don't seem to be having any perceptible negative impact, and were also recommended in TCP tuning articles on more than one site.  I went ahead and implemented these settings on the rest of CC's servers as well:

<pre>
net.ipv4.tcp_fin_timeout = 3
net.core.netdev_max_backlog = 30000
net.ipv4.tcp_no_metrics_save = 1 
net.ipv4.tcp_synack_retries = 2
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_max_syn_backlog = 8192
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216
net.ipv4.tcp_rmem = 4096 87380 16777216 
net.ipv4.tcp_wmem = 4096 65536 16777216
net.core.somaxconn = 1024
vm.min_free_kbytes = 65536
</pre>


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1253</wp:post_id>
		<wp:post_date>2010-12-08 19:51:09</wp:post_date>
		<wp:post_date_gmt>2010-12-08 19:51:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tuning-tcp-on-ccs-servers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian-2"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[network]]></category>
		<category domain="post_tag" nicename="tcp"><![CDATA[tcp]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Nufire]]></wp:comment_author>
			<wp:comment_author_email>creativecommons_tim@ibink.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.backblaze.com</wp:comment_author_url>
			<wp:comment_author_IP>208.87.220.8</wp:comment_author_IP>
			<wp:comment_date>2011-10-12 00:22:18</wp:comment_date>
			<wp:comment_date_gmt>2011-10-12 00:22:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the great write-up! 

Did you ever figure out why tcp_max_syn_backlog was stuck at 256? I'm having the same problem.. net.ipv4.tcp_max_syn_backlog shows 2048 but in practice netstat shows a max of 256 connections in SYN_RECV. I'm also not sure where tcp_max_syn_backlog was set to 2048. I'm sure I could set these values in /etc/sysctl.conf as you did but I hate mysteries like this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Available, yet to be analyzed: some data from which something about CC adoption patterns in some languages and countries might be gleaned</title>
		<link>http://labs.creativecommons.org/2010/12/09/available-for-analysis/</link>
		<pubDate>Thu, 09 Dec 2010 03:17:33 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1266</guid>
		<description></description>
		<content:encoded><![CDATA[Recently asked about CC use for works in Arabic. There are no Arabic-language jurisdiction ports available at this time; measuring adoption of jurisdiction ports is the easiest way to characterize patterns of adoption, as has been done by Giorgos Cheliotis, with <a href="http://creativecommons.org/weblog/entry/7701">interesting results</a> -- also see <a href="http://monitor.creativecommons.org">http://monitor.creativecommons.org</a>.

Fortunately there is some other data available that could be used to characterize CC use, irrespective of porting, across some languages and countries. This data is described at <a href="http://wiki.creativecommons.org/Metrics/Data_Catalog#License_property_search_engine_API_queries" target="_blank">http://wiki.creativecommons.org/Metrics/Data_Catalog#License_property_search_engine_API_queries</a> and available from <a href="../metrics/sql-dumps/all.sql.gz" target="_blank">http://labs.creativecommons.org/metrics/sql-dumps/all.sql.gz</a>
(warning, approximately 200 megabytes).

Nobody has analyzed this part of the available data on CC adoption yet to my knowledge. Anyone is of course welcome and encouraged to!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1266</wp:post_id>
		<wp:post_date>2010-12-09 03:17:33</wp:post_date>
		<wp:post_date_gmt>2010-12-09 03:17:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>available-for-analysis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[Notes on CC adoption metrics from The Power of Open - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/06/27/powerofopen-metrics/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-06-27 14:27:43</wp:comment_date>
			<wp:comment_date_gmt>2011-06-27 14:27:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] noted previously, additional data is available for analysis. There&#8217;s also more that could be done with the license-link and site-specific data used [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[CC license use in Latin America brief analysis - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/08/12/cc-latam-analysis/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-08-12 15:41:29</wp:comment_date>
			<wp:comment_date_gmt>2011-08-12 15:41:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] explore other means of characterizing CC usage across regions and fields, and hope to provide more data that will enable researchers to do this. This will be increasingly important as we attempt to forge [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Toward expressive and interoperable Common Core metadata</title>
		<link>http://labs.creativecommons.org/2010/12/10/towards-expressive-and-interoperable-common-core-metadata/</link>
		<pubDate>Fri, 10 Dec 2010 22:20:12 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1270</guid>
		<description></description>
		<content:encoded><![CDATA[It's been suggested with increasing frequency that an educational resource complying (or not) with the new <a href="http://www.corestandards.org/">Common Core standards</a> would be the kind of thing that could be published as metadata on the web. This metadata could provide a platform upon which tools could be built. For example, an educational search tool could would allow anyone to search for learning objects that satisfy one or more Common Core standards.

The <a href="http://www.ccsso.org/">CCSSO</a>, who published and stewards the Common Core standards through adoption, have not yet proposed a format for this metadata. In that vacuum, others are proposing their own solutions.

Karen Fasimpaur (who is awesome and was <a href="http://creativecommons.org/weblog/entry/21786">interviewed</a> for a CC Talks With feature) <a href="http://www.k12opened.com/blog/archives/380"> recently published</a> a set of tags to identify the Common Core standards. These tags are strings of text that uniquely identify the standards. For example, the <a href="http://www.k12opened.com/ccstd/ela-k-5-ccr-reading.html">College and Career Readiness Anchor Standards for Reading, Key Ideas and Details, Standard 1</a> is identified as "cc-k-5e-r-ccr-1".

The goal, it seems, is to publish unique identifiers for the Common Core standards so that those unique identifiers could be attached to objects on the web as metadata, identifying which educational standards those objects meet.

We applaud efforts to identify when educational resources meet educational standards, and projects to catalog or tag resources with that data. This is one step forward in providing human-readable tags that encode that data, much like the string "by-sa" identifies the <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution ShareAlike</a> license.

The next step would be to provide stable URIs as identifiers for those tags such that machines, in addition to humans, can parse that metadata. These URIs could be maintained by authoritative organizations such as the CCSSO, but that isn't technically necessary.

In addition, the URIs to the Common Core standards ought to be <em>self-descriptive</em>. That is, there should be metadata about that URI discoverable within that URI. For example, the CC licenses are self-descriptive. They contain metadata about the licenses so that when someone marks up a work as CC licensed, a machine could discover facts about that license by visiting the URL. This metadata is encoded in RDFa, and can be seen by looking at the source to the <a href="http://creativecommons.org/licenses/by-sa/3.0/">deed</a> or <a href="http://www.w3.org/2007/08/pyRdfa/extract?uri=http%3A%2F%2Fcreativecommons.org%2Flicenses%2Fby-sa%2F3.0%2F&amp;format=pretty-xml&amp;warnings=false&amp;parser=lax&amp;space-preserve=true">viewing it through an RDFa distiller</a>.

A URI identifying each standard brings other benefits. When used in subject-predicate-object expressions in metadata standards like <a href="http://www.w3.org/TR/xhtml-rdfa-primer/#id84801">RDFa</a>, the expressive power of the identifier increases greatly. One could, for example, identify an arbitrary URI as being standards aligned and make complex statements about the standard, wheras with a human-readable tag interpretation is left to the reader. For example, you could place metadata referencing an educational resource on a "landing page" rather than the resource itself, or mark up specific blocks of text as meeting certain standards. Stable URIs to the Common Core standards, coupled with a metadata standard like RDFa, would allow for subject precision that is lacking in the K12 OpenEd metadata proposal.

Efforts like K12 OpenEd's to publish Common Core standards metadata for educational resources are good progress. It gives us all a starting point that can inform future work.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1270</wp:post_id>
		<wp:post_date>2010-12-10 22:20:12</wp:post_date>
		<wp:post_date_gmt>2010-12-10 22:20:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>towards-expressive-and-interoperable-common-core-metadata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="standards"><![CDATA[standards]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[Joseph]]></wp:comment_author>
			<wp:comment_author_email>josephc@jesandco.org</wp:comment_author_email>
			<wp:comment_author_url>http://asn.jesandco.org</wp:comment_author_url>
			<wp:comment_author_IP>69.84.251.130</wp:comment_author_IP>
			<wp:comment_date>2011-08-11 04:31:53</wp:comment_date>
			<wp:comment_date_gmt>2011-08-11 04:31:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The Achievement Standards Network (ASN) is an open specification representing learning outcomes on the web as RDF-linked data.  It has already assigned stable, web resolvable URI's that support content negotation for all US state standards including the Common Core (i.e. http://asn.jesandco.org/resources/ASNJurisdiction/CCSS)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Thesis on metadata interoperability: RDF</title>
		<link>http://labs.creativecommons.org/2010/12/15/thesis-on-metadata-interoperability-rdf/</link>
		<pubDate>Wed, 15 Dec 2010 02:31:13 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1323</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://kmr.nada.kth.se/papers/SemanticWeb/FromInteropToHarm-MikaelsThesis.pdf">From Interoperability to Harmonization in Metadata Standardization - Designing an Evolvable Framework for Metadata Harmonization</a> (pdf) by Mikael Nilsson:
<blockquote>The analytical  framework is used to analyze and compare seven metadata specifications, and a
concrete set of harmonization issues is presented. These issues are used as a basis for a metadata
harmonization framework where a multitude of metadata specifications with different character-
istics can coexist. <strong>The thesis concludes that the Resource Description Framework (RDF) is the
only existing specification that has the right characteristics to serve as a practical basis for such a
harmonization  framework,  and therefore must be taken into account when designing metadata
specifications.</strong> Based on the harmonization framework, a best practice for metadata standardiza-
tion development is developed, and a roadmap for harmonization improvements of the analyzed
standards is presented.</blockquote>
(emphasis added)

Nilsson will defend his thesis on 2010-12-15, and you can watch (<a href="https://www.jiscmail.ac.uk/cgi-bin/webadmin?A2=DC-GENERAL;ed4e0c0.1012">details</a>).

Thinking in RDF is the natural thing to do at Creative Commons, whether modeling <a href="http://wiki.creativecommons.org/CC_REL">license attributes</a>, work <a href="http://labs.creativecommons.org/~nathan/oscri/describing-registrations.html">registration</a>, or domain-specific <a href="http://labs.creativecommons.org/2010/12/03/type-of-educational-an-idea/">descriptions</a> that add value to licensed works. Nice to see in depth academic backing for this intuition.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1323</wp:post_id>
		<wp:post_date>2010-12-15 02:31:13</wp:post_date>
		<wp:post_date_gmt>2010-12-15 02:31:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thesis-on-metadata-interoperability-rdf</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>fail2ban</title>
		<link>http://labs.creativecommons.org/2010/12/15/fail2ban/</link>
		<pubDate>Wed, 15 Dec 2010 18:39:59 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1326</guid>
		<description></description>
		<content:encoded><![CDATA[When I started at CC a number of years ago and began having to review <a href="http://sourceforge.net/projects/logwatch/">Logwatch</a> output on a daily basis, I tired quickly of the massive list of failed SSH login attempts in the log output.  I care much less about who failed to login than who actually did log in.  So the first thing I did was to reduce the verbosity of the SSH filters for Logwatch by creating the file <code>/etc/logwatch/conf/services/sshd.conf</code>, and added only "<code>Detail = 0</code>" to it.  However, I still found it annoying to have thousands of failed login attempts on virtually all servers.  Granted, I wasn't really worried that anyone would get in by trying to brute-force a login.  It was a more a matter of principle, and also a small bit that every failed login attempt uses some tiny amount of resources that could better be used for legitimate traffic.   So I implemented connection rate limiting via Netfilter.  However, that didn't work for our then software engineer <a href="http://asheesh.org">Asheesh</a>, who generally has around 30 open terminals and as many SSH connections to remote hosts, and who was hitting the rate connection limit.  So he started using the <a href="http://www.linuxjournal.com/content/speed-multiple-ssh-connections-same-server">ControlMaster</a> feature of SSH to get around this limitation.  Some time later I removed the rules altogether with the idea that they weren't doing anything useful, and were probably detrimental because the kernel was having to inspect a bunch of incoming packets and track connections.  Also, at that same time Asheesh recommend that I use a program called <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">fail2ban</a> instead of tackling the issue with Netfilter.  I didn't like the idea.  Something seemed hackish about inserting Netfilter rules via some daemon process that scrapes log files of various services.  I also am an advocate of running as few services as possible on any given server; the less that runs, the less chance that something will fail in a service-impacting way.   Then, the whole thing fell into the forgotten, until a few days ago.

A few days ago I was looking over the Logwatch output of our servers, as I do ever day, and was offended to find that on one server in particular there were nearly 30,000 failed SSH login attempts in a single day.   Sure, in terms of network traffic and machine resources, it's just a drop in the bucket, but it aggravated me.  I revisited the idea of fail2ban and did a bit more research.  I came to the conclusion that it was pretty stable and worked really well for most people.  So I decided to install it on one server.  I was really happy to find that it was as easy as <code>apt-get install fail2ban</code>.  Done!  On Debian, fail2ban works for SSH out-of-the-box, and I didn't have to do a thing; just another testament to the awesomeness of package management in Debian.  I was so impressed that I went ahead and installed it on all CC servers.  It has been running nicely for about a week, and failed SSH login attempts are now reduced to a few dozen a day on each machine.  Are the machines more secure?  Probably not.  But it's just one of those things that makes a sysadmin happy. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1326</wp:post_id>
		<wp:post_date>2010-12-15 18:39:59</wp:post_date>
		<wp:post_date_gmt>2010-12-15 18:39:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fail2ban</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[piggy]]></wp:comment_author>
			<wp:comment_author_email>cclabs@sexybiggetje.nl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.161.251.103</wp:comment_author_IP>
			<wp:comment_date>2010-12-15 19:28:07</wp:comment_date>
			<wp:comment_date_gmt>2010-12-15 19:28:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Take a look at ossec for monitoring. Especially the ActiveResponse tool.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>January 2011 Tech Update</title>
		<link>http://labs.creativecommons.org/2011/01/03/january-2011-tech-update/</link>
		<pubDate>Mon, 03 Jan 2011 21:21:46 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1333</guid>
		<description></description>
		<content:encoded><![CDATA[Highlights from December, 2010:

<ul>
	<li>We <a href="http://creativecommons.org/weblog/entry/25829">concluded our annual campaign</a>. Thanks to everyone who helped us raise over $500,000; your support is greatly appreciated. (And it's not too late to <a href="http://creativecommons.net/donate">contribute</a>!)</li>
	<li>We verified that our OpenOffice.org plugin is <a href="http://labs.creativecommons.org/2010/12/08/libreoffice-and-cc-openoffice-plugin/">compatible with LibreOffice</a>, so obviously it needs a better name than CCOOo. Suggestions? Leave a comment.</li>
	<li>John Bishop shipped <a href="http://labs.creativecommons.org/2010/12/06/xmp-fileinfo-panel-for-adobe-creative-suites-4-and-5-now-available/">updated CC + XMP support</a> for Adobe CS 4 and CS 5</li>
	<li>We began transcoding our <a href="http://labs.creativecommons.org/2010/12/03/webm-encoding-ccs-videos/">videos into WebM</a>, a free codec for HTML5 video</li>
	<li>Metadata <a href="http://labs.creativecommons.org/2010/12/10/towards-expressive-and-interoperable-common-core-metadata/">interoperability</a> and <a href="http://labs.creativecommons.org/2010/12/15/thesis-on-metadata-interoperability-rdf/">harmonization</a> continues to be an area we're paying attention to, particularly with respect to OER, where there's no clear winner [yet].</li>
	<li>And while technically from November, it bears highlighting that <a href="http://labs.creativecommons.org/2010/11/18/technical-case-studies-now-on-the-wiki/">Technical Case Studies</a> are now in the CC wiki.</li>
</ul>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1333</wp:post_id>
		<wp:post_date>2011-01-03 21:21:46</wp:post_date>
		<wp:post_date_gmt>2011-01-03 21:21:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>january-2011-tech-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="status-update"><![CDATA[status update]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>License Discovery in Feeds</title>
		<link>http://labs.creativecommons.org/2011/01/04/license-discovery-in-feeds/</link>
		<pubDate>Tue, 04 Jan 2011 09:42:19 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1339</guid>
		<description></description>
		<content:encoded><![CDATA[Right before the winter break I came across <a href="http://zope.cetis.ac.uk/members/scott/blogview?entry=20101214120842">Scott Wilson's blog post</a> on a <a href="http://jisc.cetis.ac.uk/">CETIS</a> blog about <a href="http://wiki.creativecommons.org/Syndication">license discovery in RSS and Atom feeds</a>. Scott provides an pseudo-algorithm for how they've approached license discovery. It's a good approach, and I'm very happy to see people publishing about how they've approached this sort of issue. Reading it reminded me of a few points that are often glossed over or forgotten.

Scott points out that there are two CC namespaces -- <code>http://creativecommons.org/ns</code> and <code>http://web.resource.org/cc/</code>. Due to hysteric^W historical reasons, web.resource.org was the first host of the <a href="http://wiki.creativecommons.org/CC_REL">CC REL</a> schema, which we later moved to creativecommons.org (as the appropriate home). This came up on another thread late last year, and we've taken the first step to making this a little easier to deal with, redirecting the old home, web.resource.org, to creativecommons.org/ns. We'll be <a href="http://code.creativecommons.org/issues/issue757">publishing equivalency assertions</a> soon to further clarify the situation for processors.

Scott also points out that the RDF included with licensed works is sometimes redundant. Yes, absolutely. Our previous recommendation suggested the inclusion of RDF describing the license in an HTML comment. As mentioned <a href="http://labs.creativecommons.org/2010/09/02/semantic-copyright-and-cc-rel/">previously</a>, we also realized this is redundant and of minimal value. It's not clear under what circumstances a processor would be inclined to trust RDF about a license, at creativecommons.org, published with the work, elsewhere. Hindsight, 20/20, etc.

Finally, when discussing how to handle the license URIs extracted, Scott's approach states that if the license URI is not known, they mark it as "unknown". This is a situation where self-describing documents can be useful to processors. An alternative approach would be to dereference the URI and attempt to extract details about the license. We use this approach ourselves in several situations, most recently with <a href="http://yergler.net/blog/2010/12/31/minor-update-for-openattribute/">OpenAttribute</a>, a prototype Firefox add-on for displaying license and attribution information.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1339</wp:post_id>
		<wp:post_date>2011-01-04 09:42:19</wp:post_date>
		<wp:post_date_gmt>2011-01-04 09:42:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-discovery-in-feeds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case-studies"><![CDATA[case studies]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>New Guide on Publishing CC License Metadata</title>
		<link>http://labs.creativecommons.org/2011/01/07/ccrel-by-example/</link>
		<pubDate>Fri, 07 Jan 2011 19:05:10 +0000</pubDate>
		<dc:creator><![CDATA[akozak]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1348</guid>
		<description></description>
		<content:encoded><![CDATA[You may have noticed that the copy-and-paste HTML you get from the <a href="http://creativecommons.org/choose/">CC license chooser</a> includes some strange attributes you're probably not familiar with. That is <a href="http://en.wikipedia.org/wiki/RDFa">RDFa</a> metadata, and it allows for the CC license deeds, search engines, <a href="https://wiki.mozilla.org/Drumbeat/Attribution_generator">Open Attribute</a>, and other tools to discover metadata about your work and generate attribution HTML. Many platforms have implemented CC REL metadata in their CC license marks, such as <a href="http://cnx.org/">Connexions</a> and <a href="http://www.flickr.com/">Flickr</a>, and it's our recommended way to mark works with a CC license.

In an effort to make CC license metadata (or <a href="http://wiki.creativecommons.org/CC_REL">CC REL metadata</a>) much easier to implement, we've created <a href="http://labs.creativecommons.org/2011/ccrel-guide">CC REL by Example</a>. It includes many example HTML pages, as well as explanations and links to more information.

We're hoping this guide will serve as a useful set of examples for developers and publishers who want to publish metadata for CC licensed works. Even if you just use CC licenses for your own content, now is a great time to take a first step into structured data and include information about how you'd <a href="http://labs.creativecommons.org/2011/ccrel-guide/#Attribution">like to be attributed</a>.

You can find the <a href="http://code.creativecommons.org/viewgit/ccrel-guide.git/">source to the guide</a> in git. Feedback and suggestions can be sent to <a href="mailto:webmaster@creativecommons.org">webmaster@creativecommons.org</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1348</wp:post_id>
		<wp:post_date>2011-01-07 19:05:10</wp:post_date>
		<wp:post_date_gmt>2011-01-07 19:05:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ccrel-by-example</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[new-guide-on-publishing-cc-license-metadata]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>216</wp:comment_id>
			<wp:comment_author><![CDATA[February 2011 Tech Update - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/02/04/february-2011-tech-update/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-02-04 23:42:49</wp:comment_date>
			<wp:comment_date_gmt>2011-02-04 23:42:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] published CC REL by Example, a guide to using CC REL and marking your work [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>License identifier on the Deeds</title>
		<link>http://labs.creativecommons.org/2011/01/07/license-identifier-on-the-deeds/</link>
		<pubDate>Fri, 07 Jan 2011 23:32:54 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1368</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday we <a href="http://creativecommons.org/weblog/entry/25965">launched a refresh of the site design</a> for <a href="http://creativecommons.org/">creativecommons.org</a>. Included in the changes pushed was one small one originally suggested by our international <a href="http://creativecommons.org/affiliates">Affiliate Network</a>: the inclusion of the license identifier on the deeds. 

<a href="http://labs.creativecommons.org/files/2011/01/CC-BY-with-dc-identifier.png"><img src="http://labs.creativecommons.org/files/2011/01/CC-BY-with-dc-identifier.png" alt="" title="CC-BY with Short Name" width="794" height="442" class="aligncenter size-full wp-image-1370" /></a>

Anyone who's been in the CC community for any length of time has seen people refer to the licenses by their short-hand names: CC BY for <a href="http://creativecommons.org/licenses/by/3.0/">Attribution</a>, BY-SA for <a href="http://creativecommons.org/licenses/by-sa/3.0/">Attribution-ShareAlike</a>, etc. But that short hand, while useful, has been a bit of <a href="http://en.wikipedia.org/wiki/Inside_baseball_(metaphor)">inside baseball</a>: it's part of the URL, but never appeared on the deeds, which we want to be the human readable summary of the license. As of yesterday the short-hand name is now on the deed. We've also annotated it with RDFa, so the licenses self-describe their short name (software can dereference the license URI and look for information describing it there). Thanks again to Alek and the affiliate network for suggesting this change.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1368</wp:post_id>
		<wp:post_date>2011-01-07 23:32:54</wp:post_date>
		<wp:post_date_gmt>2011-01-07 23:32:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>license-identifier-on-the-deeds</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="deeds"><![CDATA[deeds]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="post_tag" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>217</wp:comment_id>
			<wp:comment_author><![CDATA[Follow your nose for translations - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/02/07/follow-your-nose-for-translations/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-02-07 08:43:49</wp:comment_date>
			<wp:comment_date_gmt>2011-02-07 08:43:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] so software could dereference the license and show the human readable name to users. Last month we added support for the identifiers (short names), as well. While working with OpenAttribute, I realized that one thing we [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Three Layers of a CC License</title>
		<link>http://labs.creativecommons.org/2011/01/10/three-layers-of-a-cc-license/</link>
		<pubDate>Mon, 10 Jan 2011 08:42:05 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1373</guid>
		<description></description>
		<content:encoded><![CDATA[Included in <a href="http://creativecommons.org/weblog/entry/25965">last week's redesign</a> is an updated Licenses page, describing the CC licenses and what makes them unique. The combination of machine-readable metadata, human readable deeds, and the legal code are unique (to my knowledge) in the public licensing world, and this approach enables interesting applications of the licenses and broadens their accessibility. That said, the approach is not always easy to describe.

<a href="http://labs.creativecommons.org/files/2011/01/3layers.png"><img src="http://labs.creativecommons.org/files/2011/01/3layers-300x164.png" alt="" title="Visualization" width="300" height="164" class="aligncenter size-medium wp-image-1374" /></a>

After seeing Alex's updated graphics for the page, I roped him into helping me create an interactive version, based on CSS3 Transitions and Transformations. You can find the visualization <a href="http://labs.creativecommons.org/2011/demos/license-layers/">here on CC Labs</a>. More information about why and how I built it is on <a href="http://yergler.net/blog/2011/01/07/css3-license-layers/">my personal blog</a>. Note that this demonstration requires Chrome, Safari, or Firefox 4. Opera 11 sort of works. IE, well, doesn't. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1373</wp:post_id>
		<wp:post_date>2011-01-10 08:42:05</wp:post_date>
		<wp:post_date_gmt>2011-01-10 08:42:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-layers-of-a-cc-license</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="css3"><![CDATA[css3]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="prototype"><![CDATA[prototype]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[Augustinas Košys]]></wp:comment_author>
			<wp:comment_author_email>augustinas@creativecommons.lt</wp:comment_author_email>
			<wp:comment_author_url>http://www.creativecommons.lt</wp:comment_author_url>
			<wp:comment_author_IP>78.56.240.3</wp:comment_author_IP>
			<wp:comment_date>2011-01-28 11:47:17</wp:comment_date>
			<wp:comment_date_gmt>2011-01-28 11:47:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[There is an bug with SVG and PNG graphics, the "guy" standing on "Human Readable" and "Legal Code" is too thick compared to original CC license logo.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CC REST API Updated for Public Domain Mark</title>
		<link>http://labs.creativecommons.org/2011/01/13/cc-rest-api-updated-for-public-domain-mark/</link>
		<pubDate>Thu, 13 Jan 2011 18:42:10 +0000</pubDate>
		<dc:creator><![CDATA[john]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1378</guid>
		<description></description>
		<content:encoded><![CDATA[This morning,  the <a href="http://api.creativecommons.org/docs/">Creative Commons REST API</a> was updated to include support for the <a href="http://creativecommons.org/weblog/entry/23830">Public Domain Mark</a> and to deprecate the issuing of the retired <a href="http://creativecommons.org/licenses/publicdomain/1.0/">Public Domain Certification and Dedication</a>. We have also added a new element in license responses, that denotes whether or not the issued license has been deprecated by Creative Commons. These changes affect all versions of the REST API, excluding 1.0.

Over the past year, there has been a collaborative effort by the CC Tech team to perform a "<a href="http://labs.creativecommons.org/2009/12/18/understanding-the-state-of-sanity-via-whiteboards-and-ascii-art/">sanity overhaul</a>" on the tools and libraries that much of the CC Tech infrastructure relies on. Among the projects to be overhauled, there was the CC REST API, and it was trailing all of our other services in terms of currentness and ease of release iteration. The CC REST API was in need of a complete re-engineering effort so that it could be maintained and supported at the same level as our other newly-overhauled projects. We're glad to announce that the reworking of the REST API has been a success and our focus on refactoring over new features can now come to a close.

To get started using the CC REST API in your own projects, consult the <a href="http://api.creativecommons.org/docs/readme_dev.html">development version documentation</a> or the <a href="http://api.creativecommons.org/docs/readme_15.html">1.5 version documentation</a> if your software is ready for production. If you have any issues, feature requests, or questions about the REST API, then feel free to send a message to the <a href="http://lists.ibiblio.org/mailman/listinfo/cc-devel">cc-devel mailing list</a> with your questions. To file a bug report with the REST API, please submit your issue to the API project in our <a href="http://code.creativecommons.org/issues/">roundup bug tracker</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1378</wp:post_id>
		<wp:post_date>2011-01-13 18:42:10</wp:post_date>
		<wp:post_date_gmt>2011-01-13 18:42:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-rest-api-updated-for-public-domain-mark</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="api"><![CDATA[api]]></category>
		<category domain="category" nicename="sanity"><![CDATA[sanity]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>More helpful 404 pages</title>
		<link>http://labs.creativecommons.org/2011/01/28/more-helpful-404-pages/</link>
		<pubDate>Fri, 28 Jan 2011 23:36:44 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1388</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This is one of those little features that tends to go into the license engine that runs on the creativecommons.org website which are helpful and small, but not too noticeable if not pointed out.  I usually do a pretty bad job of making note of these when they go out, but this time, I'm doing better!</p>

<p>Even most people who don't know anything about HTTP know that a 404 status code on the web somehow means that the thing you were looking for isn't actually there.  How frustrating!  But if it's not there, maybe we have enough information to help you find what you actually wanted.</p>

<p>That's the idea between the work that went into <a href="http://code.creativecommons.org/issues/issue255">Issue 255: "Smart" 404 pages</a>.  Maybe we didn't find a license (or public domain tool) under the URL you put in, but we might be able to help you find a license that <i>does</i> exist.  For example, licenses listed under /licenses/ on creativecommons.org are parsed out like <b>/licenses/{code}/{version}/</b> or <b>/licenses/{code}/{version}/{jurisdiction}/</b>.  Knowing that, we can give a list of licenses for what licenses someone might have meant when they:</p>

<ul>
  <li><a href="http://creativecommons.org/licenses/by/">left out the version</a></li>
  <li><a href="http://creativecommons.org/licenses/by/8888.88/">put in a bogus version</a></li>
  <li><a href="http://creativecommons.org/licenses/by/8888.88/es/">put in a bogus version, but with a real jurisdiction</a></li>
  <li><a href="http://creativecommons.org/licenses/by/3.0/lolcats/">put in a real version, but a bogus jurisdiction</a></li>
</ul>

<p>The pages mostly look like a <a href="http://creativecommons.org/not-a-real-url/">normal creativecommons.org 404 page</a>, but with just a bit more contextually helpful information (the "were you looking for" section).  And, of course, they still return a 404 status code!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1388</wp:post_id>
		<wp:post_date>2011-01-28 23:36:44</wp:post_date>
		<wp:post_date_gmt>2011-01-28 23:36:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>more-helpful-404-pages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-engine"><![CDATA[cc.engine]]></category>
		<category domain="category" nicename="development"><![CDATA[development]]></category>
		<category domain="category" nicename="license-engine"><![CDATA[license engine]]></category>
		<category domain="post_tag" nicename="licenses"><![CDATA[licenses]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Merging old and new CC REL schemas</title>
		<link>http://labs.creativecommons.org/2011/02/04/merging-old-and-new-cc-rel-schemas/</link>
		<pubDate>Fri, 04 Feb 2011 23:12:58 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1398</guid>
		<description></description>
		<content:encoded><![CDATA[When the RDF schema that would become CC REL was first developed, it was published at <code>http://web.resource.org/cc</code>. A few years ago, as we were codifying some new features of CC REL (specifically how to specify attribution information), we had one of our first <a href="http://labs.creativecommons.org/2010/09/02/semantic-copyright-and-cc-rel/">of several</a> realizations about authority: Creative Commons -- creativecommons.org -- is the canonical source of information about CC licenses, and as such is the place we should be publishing information about how to use them. We started publishing the schema at <a href="http://creativecommons.org/ns">http://creativecommons.org/ns</a>, and using that as the namespace for RDFa we generated.

Late last year the question of "which namespace is authoritative" arose, and I realized we'd missed an important step: no one using the web.resource.org address would be aware of the new namespace if they weren't looking for it. As of late last week, that's been corrected. Aaron graciously started redirecting <code>http://web.resource.org/cc</code> to <code>http://creativecommons.org/ns</code>, which was the first step. We've also added equivalence assertions between the two, so that an agent looking at the schema will see that the old and new properties have the same semantic meaning (for example, a License in the old schema, <code>http://web.resource.org/cc/License</code>, is declared to be the equivalent class of License in the new schema, <code>http://creativecommons.org/ns#License</code>).

These updates are now live in the <a href="http://creativecommons.org/ns">CC REL schema</a> (which is incidentally primarily described as RDFa, with an RDF-XML version extracted using an automated tool).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1398</wp:post_id>
		<wp:post_date>2011-02-04 23:12:58</wp:post_date>
		<wp:post_date_gmt>2011-02-04 23:12:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>merging-old-and-new-cc-rel-schemas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="cc-rel-2"><![CDATA[CC REL]]></category>
		<category domain="post_tag" nicename="cc-rel"><![CDATA[cc rel]]></category>
		<category domain="post_tag" nicename="namespace"><![CDATA[namespace]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>HTTPS now available on creativecommons.org</title>
		<link>http://labs.creativecommons.org/2011/02/04/https-now-available-on-creativecommons-org/</link>
		<pubDate>Fri, 04 Feb 2011 23:21:05 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1400</guid>
		<description></description>
		<content:encoded><![CDATA[A week or two ago we received a request from someone to add HTTPS support to creativecommons.org.  A reasonable request at all events, but the specific impetus for the email was someone who develops an application that uses CC's <a href="http://wiki.creativecommons.org/Partner_Interface">Partner Interface</a> to integrate CC licensing.  Their interface is SSL-enabled, and so accessing the Partner Interface over a normal, non-encrypted channel was giving his users browser warnings about accessing non-encrypted data.  I'm happy to announce that creativecommons.org is now available <a href="https://creativecommons.org">over an encrypted connection</a>.  Thanks to Peter Dietz for prodding us to implement this. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1400</wp:post_id>
		<wp:post_date>2011-02-04 23:21:05</wp:post_date>
		<wp:post_date_gmt>2011-02-04 23:21:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>https-now-available-on-creativecommons-org</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>February 2011 Tech Update</title>
		<link>http://labs.creativecommons.org/2011/02/04/february-2011-tech-update/</link>
		<pubDate>Fri, 04 Feb 2011 23:42:46 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1404</guid>
		<description></description>
		<content:encoded><![CDATA[Highlights from January, 2011:

<ul>
<li>We published <a href="http://labs.creativecommons.org/2011/01/07/ccrel-by-example/">CC REL by Example</a>, a guide to using CC REL and marking your work online.</li>
<li>Support for <a href="http://creativecommons.org/publicdomain/mark/">Public Domain Mark</a> was <a href="http://labs.creativecommons.org/2011/01/13/cc-rest-api-updated-for-public-domain-mark/">added</a> to the <a href="http://api.creativecommons.org">CC API</a>.</a>
<li>We rolled out improvements to the <a href="http://labs.creativecommons.org/2011/01/10/three-layers-of-a-cc-license/">"machine readable" layer</a> of CC licenses: <a href="http://labs.creativecommons.org/2011/01/07/license-identifier-on-the-deeds/">identifiers on the deeds</a> and <a href="http://labs.creativecommons.org/2011/02/04/merging-old-and-new-cc-rel-schemas/">equivalence between our old and new namespace</a>.</li>
<li>404 pages for the <a href="http://code.creativecommons.org/viewgit/cc.engine">license engine</a> are <a href="http://labs.creativecommons.org/2011/01/28/more-helpful-404-pages/">now more helpful</a></li>
<li>We <a href="http://code.creativecommons.org/issues/issue?%40search_text=&title=&%40columns=title&keyword=&id=&%40columns=id&creation=&creator=&activity=2010-12-31%3B2011-02-01&%40columns=activity&%40sort=activity&actor=&priority=&%40group=priority&status=8&%40columns=status&project=&milestone=&assignedto=&%40columns=assignedto&%40pagesize=50&%40startwith=0&%40queryname=&%40old-queryname=&%40action=search">closed 22 bugs</a>, including respecting the "retired" flag in <a href="http://code.creativecommons.org/issues/issue762">more</a> <a href="http://code.creativecommons.org/issues/issue761">places</a>, a bug with <a href="http://code.creativecommons.org/issues/issue725">license selection in 1.0 jurisdictions</a>, <a href="http://code.creativecommons.org/issues/issue726">refusing to issue 1.0 SA</a> licenses (they do not contain the upward compatibility clause, making them an incompatible silo with the rest of the world), using our license RDF to drive <a href="http://code.creativecommons.org/issues/issue115">one more part of the publication process</a> (sanity, sanity!), and <a href="http://code.creativecommons.org/issues/issue739">improvements to CC Network</a>.
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1404</wp:post_id>
		<wp:post_date>2011-02-04 23:42:46</wp:post_date>
		<wp:post_date_gmt>2011-02-04 23:42:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>february-2011-tech-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="status-update"><![CDATA[status update]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Follow your nose for translations</title>
		<link>http://labs.creativecommons.org/2011/02/07/follow-your-nose-for-translations/</link>
		<pubDate>Mon, 07 Feb 2011 08:42:13 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1414</guid>
		<description></description>
		<content:encoded><![CDATA[One of our goals is to continue to make the licenses more useful as self-describing resources. They've described the licenses themselves (using <a href="http://www.w3.org/Submission/ccREL/">CC REL</a>) for quite a while. Last year we started marking up the license name, so software could dereference the license and show the human readable name to users. Last month we <a href="http://labs.creativecommons.org/2011/01/07/license-identifier-on-the-deeds/">added support for the identifiers</a> (short names), as well. While working with <a href="http://yergler.net/blog/2010/12/31/minor-update-for-openattribute/">OpenAttribute</a>, I realized that one thing we weren't doing well was scoping our assertions. In RDFa, the default scope of an assertion is the URI of the current page. That means if you follow a link to a specific translation of a license (such as the <a href="http://creativecommons.org/licenses/by/3.0/deed.fr">French translation of CC BY 3.0 Unported</a>), the RDFa was actually describing that license. 

It's a subtle but important point: the canonical license URI is the "bare" URI, without any translation component; for example, <code>http://creativecommons.org/licenses/by/3.0/</code>, and not <code>http://creativecommons.org/licenses/by/3.0/deed.fr</code>. At the same time I realized that there while the license translations link to one another, that relationship is not described. To improve this situation, we've made three changes to the license deeds (all in the RDFa, not visible to humans browsing the pages):

<ul>
<li>We've started asserting that the information published with the license summary is <a href="http://code.creativecommons.org/issues/issue763">about the canonical URL</a>.</li>
<li>We're declaring that the license <a href="http://code.creativecommons.org/issues/issue765">is actually a License</a> (the fact that it was used as part of a <code>rel="license"</code> assertion implied as much, but explicit is better than implicit in my book).</li>
<li>We're <a href="http://code.creativecommons.org/issues/issue764">describing the relationship between translations</a>, using the <a href="http://purl.org/vocab/frbr/core">FRBR Core</a> vocabulary.</li>
</ul>

The choice of vocabulary to describe the translation wasn't obvious; an <a href="http://lists.w3.org/Archives/Public/semantic-web/2011Jan/0087.html">inquiry on the semantic-web mailing list</a> revealed no clear winners, so we wound up choosing one that seemed to best fit the semantics of the license summaries (to be clear, these assertions only apply to the summary of the license -- the "deed" -- and not the actual text of the license). It's possible we'll revise this in the future, but one of the great things about RDFa is that we don't have to choose one; if we find one that works better, we can easily publish assertions using both vocabularies, easing the transition for any tools using the RDFa.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1414</wp:post_id>
		<wp:post_date>2011-02-07 08:42:13</wp:post_date>
		<wp:post_date_gmt>2011-02-07 08:42:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>follow-your-nose-for-translations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="deeds"><![CDATA[deeds]]></category>
		<category domain="category" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="post_tag" nicename="licenses"><![CDATA[licenses]]></category>
		<category domain="post_tag" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="post_tag" nicename="structured-data"><![CDATA[structured data]]></category>
		<category domain="post_tag" nicename="translation"><![CDATA[translation]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Upgrade to Debian Squeeze and Mediawiki woes</title>
		<link>http://labs.creativecommons.org/2011/02/10/upgrade-to-debian-squeeze-and-mediawiki-woes/</link>
		<pubDate>Thu, 10 Feb 2011 18:23:29 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1420</guid>
		<description></description>
		<content:encoded><![CDATA[Just a number of days ago <a href="http://www.debian.org">Debian</a> <a href="http://www.debian.org/News/2011/20110205a">released Squeeze</a> as the new stable version.  I decided to test the upgrade one or two of CC's servers to see how it would go.  The upgrade process was standard and went without problems, as one comes to expect with Debian.  Any problems with the upgrade didn't manifest until I noticed that one of our sites running on Mediawiki had apparently broken.

I narrowed the problem down to several extensions.  Upgrading to Squeeze brought in a new version of PHP, taking it from 5.2.6 (in Lenny) to 5.3.3.  PHP was emitting warnings in the Apache logs like:

<em>Warning: Parameter 1 to somefunction() expected to be a reference, value given in /path/to/some/file.php on line ##</em>

Looking at the PHP code in question didn't immediately reveal the problem to me.  I finally stumbled across PHP bug <a href="http://bugs.php.net/50394">50394</a>.  A <a href="http://bugs.php.net/50394#1284510214">specific comment</a> on that bug revealed that the issues I was seeing were not a bug, necessarily, but the result of the way PHP 5.3.x handles a specific form of incorrect coding.

In summary, it turns out the problem is related to Mediawiki hooks and its use of the call_user_func_array() PHP built-in function.  The function takes two arguments: a user function name, and an array of arguments.  If the called function expects some of the arguments to be passed in <a href="http://php.net/manual/en/language.references.php">by reference</a>, then each element of the passed array must be explicitly marked as a reference.  For example, this is correct:
<code>
function lol ( &$var1, $var2 ) { //do something };
$a = 'foo';
$b = 'bar';
$args = array( &$a, $b )
call_user_func_array('lol', $args);
</code>

However, you will get a PHP warning, and a subsequent failure of call_user_func_array(), if <code>$args</code> is defined like (missing the &amp; before <code>$a</code>):
<code>
$args = array( $a, $b );
</code>

Interestingly, the "correct" way of  handling this case, where the callback function expects referenced variables, also happens to be deprecated, as a form of call-time referencing, and the <a href="http://php.net/manual/en/function.call-user-func-array.php">call_user_func_array() documentation</a> states this:

<blockquote>
Referenced variables in param_arr are passed to the function by reference, regardless of whether the function expects the respective parameter to be passed by reference. This form of call-time pass by reference does not emit a deprecation notice, but it is nonetheless deprecated, and will most likely be removed in the next version of PHP.
</blockquote>

As far as I can tell, this deprecated method is the only way to handle this, yet PHP may drop this functionality.  Presumably another method will replace it before that happens, but the ambiguity at the moment leaves one wondering how to properly code for this without risking that the code will break in a future release of PHP.  I suppose the only sure way is to make sure that your call-back doesn't require or need any referenced variables.  I'd be happy for someone to point me to the right way to handle this, if for some reason my research just failed to produce the correct method.

I found this breakage in the following modules, but presumably it exists in many more:

<a href="http://www.mediawiki.org/wiki/Extension:ReCAPTCHA">ReCAPTCHA</a>
<a href="http://www.mediawiki.org/wiki/Extension:Recent_Activity_Notify">RecentActivityNotify</a>
<a href="http://www.mediawiki.org/wiki/Extension:SpamBlacklist">SpamBlacklist</a>

<a href="http://www.mediawiki.org/wiki/Extension:ReCAPTCHA#Parameter_1_to_ReCaptcha::confirmEdit.28.29_expected_to_be_a_reference">The fix</a> for the ReCAPTCHA extension was easy, since it's published on the extension's page.  For the other extensions, I investigated the places where this problem was occurring and removed the references from the function definitions, but not before poking around a bit to make reasonably sure that the references weren't fully necessary.

Lesson: use caution when doing any upgrade that moves you from PHP &lt;5.2.x to &gt;5.3.x.  Google searches reveal that this issue is rife in not only Mediawiki, but also Joomla!, and presumably any other CMS or framework that makes use of call_user_func_array(). ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1420</wp:post_id>
		<wp:post_date>2011-02-10 18:23:29</wp:post_date>
		<wp:post_date_gmt>2011-02-10 18:23:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrade-to-debian-squeeze-and-mediawiki-woes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="debian"><![CDATA[Debian]]></category>
		<category domain="category" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>219</wp:comment_id>
			<wp:comment_author><![CDATA[Saj]]></wp:comment_author>
			<wp:comment_author_email>sajid1975@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>184.74.217.180</wp:comment_author_IP>
			<wp:comment_date>2011-03-15 15:46:17</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 15:46:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you decsribe the fix in detail?
TY]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Nathan Kinkade]]></wp:comment_author>
			<wp:comment_author_email>nkinkade@creativecommons.org</wp:comment_author_email>
			<wp:comment_author_url>http://creativecommons.org</wp:comment_author_url>
			<wp:comment_author_IP>207.244.182.103</wp:comment_author_IP>
			<wp:comment_date>2011-03-15 21:59:09</wp:comment_date>
			<wp:comment_date_gmt>2011-03-15 21:59:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What needs to change will depend on the extension.  For an example, take the fix listed on the ReCAPTCHA page, which I link to above:

http://www.mediawiki.org/wiki/Extension:ReCAPTCHA#Parameter_1_to_ReCaptcha::confirmEdit.28.29_expected_to_be_a_reference

Nathan]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>11</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Your own python egg baskets / package repositories</title>
		<link>http://labs.creativecommons.org/2011/02/14/your-own-python-egg-baskets-package-repositories/</link>
		<pubDate>Mon, 14 Feb 2011 22:34:43 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1431</guid>
		<description></description>
		<content:encoded><![CDATA[<p>At Creative Commons sometimes we have python packages that we use a lot but which aren't generally useful enough to put on <a href="http://pypi.python.org/pypi">PyPi</a> (such as <a href="http://code.creativecommons.org/viewgit/cc.license.git/">cc.license</a> and <a href="http://code.creativecommons.org/viewgit/license.rdf.git/">cc.licenserdf</a>).  Luckily, as long as you and your organization don't have a problem with having your packages available publicly, it's fairly easy to put up a public egg basket (that is, a simple repository to put your python eggs/packages).  And doing so has several advantages:</p>

<ul>
<li>You can avoid cluttering up PyPi with packages that have a very marginal or internal audience.  cc.licenserdf matters a lot for our site, but probably is worthless to anyone searching for "RDF" tools on pypi.</li>
<li>Putting a package up on PyPi suggests a certain amount of responsibility to keep that updated and keep its API stable.  If it's for internal use, maybe that responsibility is unwanted or unneeded.</li>
<li>Using proper python packaging means you can take full advantage of python's ecosystem of installation tools, including useful dependency resolution.</li>
<li>Making packaged releases encourages a certain amount of responsibility toward your internal dependencies, reducing the "cowboy coding" factor (fun, but often not good in an environment that requires stability).</li>
</ul>

<p>So, how to do it?  The first step is to make a directory that's statically served by Apache.  Ours is at <a href="http://code.creativecommons.org/basket/">http://code.creativecommons.org/basket/</a>.  The directory has the <a href="https://secure.wikimedia.org/wikipedia/en/wiki/Sticky_bit">sticky bit</a> set so that everyone on the server can write to it without clobbering each other, kind of like in <code>/tmp/</code> on most GNU/Linux installs.  Everyone puts their tarballs up here.  As for you or your organization's "your own" packages, I think it's fine to put all your eggs in just one basket like this. :)</p>

<p>But what should those packages look like?</p>

<p>Generally at the toplevel of your package you have something that looks like:</p>

<pre style="border: 1pt solid #AEBDCC;background-color: #fbfcfc;padding: 5pt;font-family: courier, monospace;font-size: 90%;overflow:auto"><span style="color: #cd0000;background-color: #ececec">from</span> setuptools <span style="color: #cd0000;background-color: #ececec">import</span> setup, find_packages
<span style="color: #cd0000;background-color: #ececec">import</span> sys, os

setup(
    name=<span style="color: #00cd66;background-color: #ececec">'licenseclarity'</span>,
    version=<span style="color: #00cd66;background-color: #ececec">'0.1'</span>,
    packages=[<span style="color: #00cd66;background-color: #ececec">'licenseclarity'</span>],
    description=<span style="color: #00cd66;background-color: #ececec">"Tools to clarify any licensing issue you have ever had"</span>,

    author=<span style="color: #00cd66;background-color: #ececec">'John Doe(ig)'</span>,
    author_email=<span style="color: #00cd66;background-color: #ececec">'johndoe-ig@example.org'</span>,
    <span style="color: #ba55d3;background-color: #ececec">license</span>=<span style="color: #00cd66;background-color: #ececec">'MIT'</span>,

    <span style="color: #4f94cd;background-color: #ececec"># ... etc ...
</span>
    <b><span style="color: #4f94cd;background-color: #ececec"># Put your dependencies here...
</span>    install_requires=[
        <span style="color: #00cd66;background-color: #ececec">'setuptools'</span>,
        <span style="color: #00cd66;background-color: #ececec">'dependency1'</span>,
        <span style="color: #00cd66;background-color: #ececec">'dependency2'</span>,
        ],

    <span style="color: #4f94cd;background-color: #ececec"># And a link to your basket here
</span>    dependency_links=[
        <span style="color: #00cd66;background-color: #ececec">'http://code.creativecommons.org/basket/'</span>,
        ],</b>
    )
</pre>

<p>Obviously, replace values with ones that make sense for your package.  The main things we're talking about here are <a href="http://peak.telecommunity.com/DevCenter/setuptools#declaring-dependencies">install_requires</a> and <a href="http://peak.telecommunity.com/DevCenter/setuptools#dependencies-that-aren-t-in-pypi">dependency_links</a>.  Replace install_requires with whatever list of dependencies your package requires, and put your your own egg basket in the dependency_links list.  After that, I guess set up whatever other large number of attributes you can apply to the setup function that make sense to your package (entry_points maybe?  zip_safe=False is a nice one).</p>

<p>Lastly, maybe now that you have an egg basket, you'd like to know how to make some eggs to put in that basket.  Pretty easy once you have setup.py!  All you really need to do is this:</p>

<pre style="border: 1pt solid #AEBDCC;background-color: #fbfcfc;padding: 5pt;font-family: courier, monospace;font-size: 90%;overflow:auto">python setup.py sdist</pre>

<p>Assuming things run well, do an `ls` into your dist/ directory.  Hey, what do you know!  There's a tarball there.  cp or scp or (heaven forbid) ftp it to your egg basket, and there you go.  You just made a release!  Maybe the next time you do it you'll want to increment the version number.</p>

<p><b>Appendix: Why you should always list your dependencies in your package</b></p>

<p>Lastly I'd like to make a comment on only using <a href="http://www.buildout.org/">buildout's</a> <a href="http://www.buildout.org/docs/tutorial.html#installing-eggs">config file</a> or <a href="http://pip.openplans.org/">pip's</a> <a href="http://pip.openplans.org/requirement-format.html">requirements file</a> to declare requirements: it's completely crazy, don't do it!  Well okay, it's not <i>completely</i> crazy, but you really should fill out the install_requires section in setup.py regardless of whether you are also using those tools.  There are a couple of reasons for this:</p>

<ul>
<li>Recursive dependencies: maybe someone will use your module as a library, and then they'll have to declare your dependencies all over again if you don't put them in install_requires.  Let python's package management tools handle the dependency graph logic, that's where it belongs.</li>
<li>What happens if you build your tool in buildout and someone wants to use virtualenv/pip or vice versa?  Both of these tools will check the install_requires section anyway, so be nice and fill it out!</li>
</ul>

<p>Of course there are some awesome things that buildout and the pip requirements file can do to; for example they can install dependencies from VCS and etc which is useful in particular cases, particularly for certain in-development packages.  By all means, use these tools to do that (and lots of other cool things, because both buildout and virtualenv/pip are pretty awesome).  Just be a good packager and also fill out install_requires.</p>

<p>Now you have your own egg basket (which is completely vegan), you know how to make packages to put in it, and everyone is happy.  Horray! Today we learned things (maybe).</p>

<p><i>Thanks to <a href="http://asheesh.org/">Asheesh Laroia</a> for his detailed feedback on this post.</i></p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1431</wp:post_id>
		<wp:post_date>2011-02-14 22:34:43</wp:post_date>
		<wp:post_date_gmt>2011-02-14 22:34:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>your-own-python-egg-baskets-package-repositories</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="basket"><![CDATA[basket]]></category>
		<category domain="post_tag" nicename="deployment"><![CDATA[deployment]]></category>
		<category domain="post_tag" nicename="eggs"><![CDATA[eggs]]></category>
		<category domain="post_tag" nicename="packaging"><![CDATA[packaging]]></category>
		<category domain="category" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>221</wp:comment_id>
			<wp:comment_author><![CDATA[Asheesh Laroia]]></wp:comment_author>
			<wp:comment_author_email>creativecommons@asheesh.org</wp:comment_author_email>
			<wp:comment_author_url>http://openhatch.org/people/paulproteus/</wp:comment_author_url>
			<wp:comment_author_IP>209.6.50.37</wp:comment_author_IP>
			<wp:comment_date>2011-02-14 22:42:11</wp:comment_date>
			<wp:comment_date_gmt>2011-02-14 22:42:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know that I, for one, learned things today.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Caching Mediawiki with Varnish</title>
		<link>http://labs.creativecommons.org/2011/03/18/caching-mediawiki-with-varnish/</link>
		<pubDate>Fri, 18 Mar 2011 20:06:54 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1440</guid>
		<description></description>
		<content:encoded><![CDATA[We run a few instances of Mediawiki, most notably the <a href="http://wiki.creativecommons.org/">CC wiki</a>.  The machine that runs the CC wiki is not a powerhouse, but should certainly have enough to handle the amount of traffic the CC wiki receives.  However, for quite some time I've noted that the CPU usage on the machine is fairly high, and from time to time the system will bog down and become nearly (sometimes totally) unresponsive.  It has been somewhat hard to pinpoint the exact cause of the intermittent issues, first, because they are so intermittent, and secondly because there has never been a trace of evidence in the logs as to what might have happened.

Since the CC wiki is the main service that runs on that machine, I decided to start there.  We run <a href="http://www.varnish-cache.org/">Varnish</a> on all our servers, so I took a look at some Varnish stats using-- <em>ta-da</em> --<a href="http://www.varnish-cache.org/docs/2.1/reference/varnishstat.html">varnishstat</a>.  It turned out that Varnish was mostly useless on that machine, with a hit-rate ratio of maybe 1 or 2 percent, sometimes approaching 0.  This makes sense, since by default Varnish doesn't cache requests that arrive with cookies, and at the very least Google Analytics cookies will arrive with virtually every request to a CC site.  Varnish shouldn't have to care about Analytics cookies, but it definitely needs to care about any login or session-related cookies from Mediawiki.

Doing a bit of searching I found that even Mediawiki.org has <a href="http://www.mediawiki.org/wiki/Manual:Varnish_caching">a page</a> about using Varnish to cache.  However, their configuration doesn't take into account extraneous cookies like those from Google Analytics.  I also eventually stumbled across a <a href="https://svn.wikia-code.com/utils/varnishhtcpd/mediawiki.vcl">VCL file</a> that apparently <a href="http://www.wikia.com/About_Wikia">Wikia.com</a> used to use, which takes into account the possibility of other cookies being present other than Mediawiki cookies.  Between the examples I found online, and some thorough testing of cookies in Mediawiki, I found a configuration that I feel will allow many CC wiki requests to be cached, that otherwise wouldn't have been without risking caching any per-user, session or logged in pages.  Relevant snippets:

<pre style="border: thin dashed black; padding: 1em;">
sub vcl_recv {
[...]
        if ( req.http.host ~ "wiki(-staging)?.creativecommons.org" ) {
                # If this is just an anonymous request with no session-related
                # cookies, then cache the page. Unsetting the cookie will allow
                # us to do this.
                if ( ! req.http.Cookie ~ "(session|UserID|UserName|LoggedOut)" ) {
                        remove req.http.Cookie;
                        return(lookup);
                }
        }
}

sub vcl_fetch {

        if ( req.http.host ~ "wiki(-staging)?.creativecommons.org" ) {
                if ( ! beresp.http.Set-Cookie ) {
                        set beresp.ttl = 120s;
                        return (deliver);
                }
        }

}
</pre>

<p style="margin-top: 1em;">
Our hitrage ratio is still not exceedingly high, hovering between perhaps 30% and 50%.  However, what has really gone down significantly is the CPU usage and load average of this machine.  For the two weeks prior to making these changes the overall average CPU usage was 68.09%.  For the two weeks after the change it went down to 41.92%, nearly a 40% drop.  Load average went down as well, but not as dramatically, because it was never consistently high to begin with.  However, you can see a marked decline if you look at the <a href="http://nagios.creativecommons.org/cacti/graph_view.php?action=tree&tree_id=1&leaf_id=10">Cacti stats</a> for that machine, setting the dates appropriately, the change having happened on March 3, 2011.
</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1440</wp:post_id>
		<wp:post_date>2011-03-18 20:06:54</wp:post_date>
		<wp:post_date_gmt>2011-03-18 20:06:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caching-mediawiki-with-varnish</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="varnish"><![CDATA[varnish]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Supporting tools for decentralized metadata</title>
		<link>http://labs.creativecommons.org/2011/03/16/supporting-tools-for-decentralized-metadata/</link>
		<pubDate>Wed, 16 Mar 2011 23:54:48 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1445</guid>
		<description></description>
		<content:encoded><![CDATA[Over the past couple years Creative Commons has built <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a>, a prototype search and discovery tool. We built DiscoverEd to explore how search for open educational resources (OER) could be improved through the use of decentralized metadata. But DiscoverEd was never an end point. DiscoverEd is one of what we hope will be many applications developed to leverage decentralized, structured data about resources on the web. (Our license deeds are another application that <a href="http://wiki.creativecommons.org/License_Deeds_(Metadata)">use metadata published with works</a>, in that case to provide attribution for re-users.) Recently we've been thinking about tools that could be developed to complement DiscoverEd to create a rich and compelling ecosystem for decentralized metadata for educational resources. 

The use of decentralized metadata to drive discovery allows creators and curators to publish information about works without relying on a central authority, and allows developers to utilize that data with seeking permission from a gate keeper. However, self publishing requires a certain degree of technical expertise from creators and curators. Two tools can help ease this burden and aid deployment of the necessary metadata. A <strong>Validator</strong> would help publishers and curators understand how their resources are ingested and processed by DiscoverEd (and other tools). A <strong>Curation Tool</strong> would allow users to identify resources -- individually, as an ad hoc group, or as part of an institutional team -- and label them with quality, review, or other metadata.

The <strong>Validator</strong> tool would allow users to enter a URL to be checked, and return details of what information DiscoverEd or other software could extract. The results would also provide links to examples and common problems when publishing metadata. For example, how to publish information about the education level and subject matter of a resource, or about what resources were remixed in order to create the new one. A self service tool would allow users to repeatedly check the state of their resources, so they can understand how changes made to their site impact the way others interact with it. A self service tool is essential to scale adoption beyond the level possible when each publisher requires hands on assistance.

The Validation tool would also be integrated with DiscoverEd. DiscoverEd utilizes decentralized metadata to improve its search index, and allow users to search by particular facets, such as subject, education level, or language. When it does not have metadata for one of the “core” fields (education level, subject, license, language in the default configuration), it displays a help icon to indicate that some piece of information is missing. After initial development is complete, the help icons will be linked to the validation tool so that users and publishers alike can get immediate feedback about what’s missing and what’s there.
 
The <strong>Curation Tool</strong> would be a general purpose piece of software which would allow users to identify works, and annotate additional information about them. We imagine that common annotations might be that they meet some quality review, align to a particular standard, or simply “like”. Just as social bookmarking tools like Delicious allow users to make a list of resources, the Curation Tool would allow users to create lists, identifying why a particular resource is in the list, and possibly adding additional metadata not provided by the publisher. For example, a user might make a list of resources which they have reviewed for quality, and identify which Common Core standard each conforms to. The tool would allow users to collaborate on lists, as well. All lists would be public, and published in a way that allows DiscoverEd to ingest the information collected. The Curation tool would be open source software, so users can download a copy and run it for their own school or professional society, if they so desire.

We think that the development of supporting tools can help advance the adoption of decentralized, structured data for educational resources. Are there simple ideas we've missed? Twists on these we should take into account? Leave your comments below.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1445</wp:post_id>
		<wp:post_date>2011-03-16 23:54:48</wp:post_date>
		<wp:post_date_gmt>2011-03-16 23:54:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>supporting-tools-for-decentralized-metadata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC + GSoC: Integration is the Word</title>
		<link>http://labs.creativecommons.org/2011/03/21/cc-gsoc-integration-is-the-word/</link>
		<pubDate>Mon, 21 Mar 2011 23:17:25 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1469</guid>
		<description></description>
		<content:encoded><![CDATA[Creative Commons is once again participating in the <a href="http://www.google-melange.com/">Google Summer of Code</a>, an opportunity for students to spend the summer writing open source software. Students have the benefit of being mentored by established open source developers (we think <a href="http://creativecommons.org/about/people">ours</a> are pretty good), and organizations develop their network of contributors. We've participated since 2006, with mixed success. Some projects go nowhere, while others, like last summer's <a href="http://labs.creativecommons.org/category/openoffice/">work on the OpenOffice.org plugin</a>, have far exceeded our expectations.

We have a <a href="http://wiki.creativecommons.org/Developer_Challenges">lot of ideas</a>, and this year we're looking for students interested in working on <a href="http://wiki.creativecommons.org/Integrate">integrating</a> Creative Commons into the larger ecosystem. Creative Commons licenses have revolutionized sharing on the web by reducing the friction between creators and users of work. We want to further reduce that friction by <a href="http://wiki.creativecommons.org/Integrate">integrating</a> CC license selection, display, and content discovery into other applications and tools. In the past we've had students develop extensions and add-ons for <a href="http://wiki.creativecommons.org/OpenOffice.org">OpenOffice.org/LibreOffice</a>, <a href="http://wiki.creativecommons.org/Drupal">Drupal</a>, <a href="http://wiki.creativecommons.org/WpLicense">WordPress</a>, and Banshee. There's some <a href="http://code.creativecommons.org">good code there</a>, and we love the work that's been done. We want this year's prospective students to think about what applications they use that could <a href="http://wiki.creativecommons.org/Integrate">integrate</a> CC license selection or -- at least as importantly -- content discovery. Use our existing code as a starting point for ideas, and craft your proposal to tell us how your project will integrate CC licensed content into users' daily life.

Not a student? We've started a <a href="http://wiki.creativecommons.org/Build_Creative_Commons_licensing_into_more_content_creation_applications">hit list</a> of applications on the wiki, and if we're missing your favorite, add it along with some thoughts about how you'd like to use CC.

I'm looking forward to a great GSoC this year, and can't wait to see the great ideas that come from students and the community!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1469</wp:post_id>
		<wp:post_date>2011-03-21 23:17:25</wp:post_date>
		<wp:post_date_gmt>2011-03-21 23:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-gsoc-integration-is-the-word</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="community"><![CDATA[community]]></category>
		<category domain="category" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[A post with good advice for GSOC students - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2011/03/25/good-advice-for-gsoc-students/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2011-03-25 22:08:15</wp:comment_date>
			<wp:comment_date_gmt>2011-03-25 22:08:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Nathan already mentioned, we will be once again participating in Google Summer of Code this year. GSOC can be a lot of fun, [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>A post with good advice for GSOC students</title>
		<link>http://labs.creativecommons.org/2011/03/25/good-advice-for-gsoc-students/</link>
		<pubDate>Fri, 25 Mar 2011 22:08:13 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1482</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As Nathan <a href="http://labs.creativecommons.org/2011/03/21/cc-gsoc-integration-is-the-word/">already mentioned</a>, we will be once again participating in Google Summer of Code this year.  GSOC can be a lot of fun, but can also be very intimidating or frustrating for both students and mentors.</p>

<p>Luckily for everyone, some kind folks have written up a nice post called <a href="http://google-opensource.blogspot.com/2011/03/dos-and-donts-of-google-summer-of-code.html">The DOs and DON’Ts of Google Summer of Code: Student Edition</a> (and I hear there may be more such posts on the way?).  We thought it was a good read, and maybe if you're considering in participating in Google Summer of Code, reading (and following) that advice will help make Google Summer of Code both smoother and even more fun than it already is!</p>

<p><b>Addendum:</b> Also, I think a lot of difficulty in projects GSOC, and in a lot of free software development, is caused by <a href="http://www.asheesh.org/note/debian/post-shy.html">natural human shyness</a>.  Which makes sense.  But in general, if you're afraid or embarrassed to ask questions or participate, remember that your mentor is here to help you.  So keep that in mind!  (... and also the aforementioned do's and don'ts post's advice.)</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1482</wp:post_id>
		<wp:post_date>2011-03-25 22:08:13</wp:post_date>
		<wp:post_date_gmt>2011-03-25 22:08:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>good-advice-for-gsoc-students</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="gsoc"><![CDATA[GSoC]]></category>
		<category domain="post_tag" nicename="gsoc"><![CDATA[GSoC]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[Donnie Berkholz]]></wp:comment_author>
			<wp:comment_author_email>dberkholz@gentoo.org</wp:comment_author_email>
			<wp:comment_author_url>http://dberkholz.com/</wp:comment_author_url>
			<wp:comment_author_IP>129.176.151.28</wp:comment_author_IP>
			<wp:comment_date>2011-03-29 17:51:35</wp:comment_date>
			<wp:comment_date_gmt>2011-03-29 17:51:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, we've already got the versions for admins and mentors halfway written. We'll probably post one roughly every 2 weeks.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>The Future of DiscoverEd</title>
		<link>http://labs.creativecommons.org/2011/04/11/the-future-of-discovered/</link>
		<pubDate>Mon, 11 Apr 2011 20:42:06 +0000</pubDate>
		<dc:creator><![CDATA[nathan]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1493</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://wiki.creativecommons.org/DiscoverEd">DiscoverEd</a> project was started in 2008 to explore how structured data could be applied to improving search for open educational resources (OER). Since then we have seen the ability of a working prototype to engage people’s imaginations, and have been fortunate to have our work supported by the Hewlett Foundation, Open Society Foundation, and the Bill &amp; Melinda Gates Foundation, through their support of AgShare. Today, in an effort to focus our resources and expertise on areas that will have maximum impact, we’re discontinuing development of the project.

DiscoverEd was initially conceived as a Google Custom Search Engine (CSE), which would utilize labels provided by curators. When we ran into issues with applying labels at the resource level, instead of to broad URL patterns, we began to look for alternate implementations. Creative Commons chose to build on <a href="http://nutch.apache.org/">Apache Nutch</a>, an open source search engine. We previously built on Nutch when developing the prototype CC Search in 2003-2004, which was later retired when Yahoo! and later Google added CC support to their search products.

Building on Apache Nutch, we added the ability to index and search on structured data encountered in web pages. This structured data, usually in the form of RDFa, could describe the license, subject area, education level, or language of a resource. In developing DiscoverEd, we recognized that structured data could be useful more broadly than just for OER, so while these are the fields we focused on as a starting point, DiscoverEd indexes all structured data it encounters, making it very flexible for emergent and exploratory vocabularies.

DiscoverEd succeeded in demonstrating how structured data and full text indexing can work together to provide a richer, more flexible search interface. By allowing users to perform an initial search using a familiar keyword search, and then refine by additional fields, users are able to iteratively refine their search. (See <a href="http://openaccess.uoc.edu/webapps/o2/bitstream/10609/4852/6/Yergler.pdf">our paper from OpenEd 2010</a> for a fuller discussion of the search interface implemented, and how it addressees user needs.) The code for DiscoverEd is freely available under the Apache Software License, and can be found in its <a href="http://gitorious.org/discovered">repository hosted by Gitorious</a>. While Creative Commons is not currently developing the code, we may return to it in the future if an opportunity presents itself, or if there is a need to test additional ideas related to search and discovery.

Creative Commons is discontinuing development to focus our resources and expertise where we can have maximum impact. We do not have the resources needed to run DiscoverEd at web scale, but would love to see someone take that on. Through the development of DiscoverEd, Creative Commons has observed that there have been many attempts to describe educational resources and how they relate together in a complete, rigorous manner. These attempts have failed to gain the traction necessary for widespread adoption on the scale of Dublin Core, or <a href="http://wiki.creativecommons.org/CC_REL">CC REL</a>. There is an opportunity for the community to build consensus around a set of properties for describing resources, attempting to balance utility (enough information to be useful) with succinctness (only describing that which is necessary, to avoid unnecessary impediments to adoption).

With the generous support of the Hewlett Foundation, Creative Commons will be working over the next year to identify key factors to success. You can follow the work in the <a href="http://labs.creativecommons.org/category/describing-oer/">“Describing OER” category</a> on this blog, or on the <a href="http://wiki.creativecommons.org/Describing_OER">Describing OER</a> wiki page.

<strong>Update/Clarification (13 April 2011):</strong> Search for CC licensed ("open") content is largely solved: Google has implemented a version at web scale, and CC REL provides a clear mechanism for marking and labeling. However, search and discovery for open educational resources is not a solved problem: many projects, including DiscoverEd, have tried different approaches to the issue, but none has successfully deployed a web scale OER search engine. Creative Commons has identified the lack of a vocabulary with widespread adoption as one issue impeding progress. While we plan to focus our efforts on that particular problem, we encourage others to continue working on the larger challenge of OER discovery.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1493</wp:post_id>
		<wp:post_date>2011-04-11 20:42:06</wp:post_date>
		<wp:post_date_gmt>2011-04-11 20:42:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-future-of-discovered</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="describing-oer"><![CDATA[Describing OER]]></category>
		<category domain="category" nicename="discovered"><![CDATA[DiscoverEd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Using wget to login to Mediawiki</title>
		<link>http://labs.creativecommons.org/2011/04/30/using-wget-to-login-to-mediawiki/</link>
		<pubDate>Sat, 30 Apr 2011 00:03:35 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1501</guid>
		<description></description>
		<content:encoded><![CDATA[For a couple years CC has been using the <a href="http://meta.wikimedia.org/wiki/Pywikipediabot">Pywikipediabot</a> to do a few small operations on a password-protected, private installation of <a href="http://www.mediawiki.org/wiki/MediaWiki">Mediawiki</a>.  It used to create a basic page, then ask people to add information to that page, and then a few days later it would email the contents of that page to a group of people.

As of a today we are no longer using Pywikipediabot to create a page, but only to mail the contents of a page.  It occurred to me that Pywikipediabot was really overkill for such a small task.  I decided to write a simple shell script using wget to accomplish this task.  My initial thought was to use the <a href="http://www.mediawiki.org/wiki/API:Main_page">Mediawiki API</a>, but all the documents I found indicated that if one merely wanted the content of a page, to use the <em>action</em> query parameter to index.php, such as <em>/SomeArticle?action=raw</em>.  It wasn't even clear to me that there would be a way to accomplish what I wanted via the API without having to parse an XML response (there may be, I just didn't readily find it).

So I decided to use wget to work with the normal user interface of Mediawiki, but I didn't quickly find any good information on how to go about this, or what I found was outdated and no longer worked.  I'm posting this here in case it could be useful to anyone else.  Here is the basic idea:

<pre style="border: thin dashed blue; padding: 1em;">
#!/bin/bash

PAGE_TITLE="Some_page_title"

RCPT_TO=group@somesite.com
MAIL_FROM="'John Q. Public' &lt;management@somesite.com&gt;"
MAIL_SUBJECT="Contents of ${PAGE_TITLE}"

MW_LOGIN="Some Login"
MW_PASSWD="somepassword"

# Mediawiki uses a login token, and we must have it for this to work.
WP_LOGIN_TOKEN=$(wget -q -O - --save-cookies cookies.txt --keep-session-cookies 
                                     http://www.somesite.com/Special:UserLogin 
                                     | grep wpLoginToken | grep -o '[a-z0-9]{32}')

wget -q --load-cookies cookies.txt --save-cookies cookies.txt --keep-session-cookies 
        --post-data "wpName=${MW_LOGIN}&wpPassword=${MW_PASSWD}
&wpRemember=1&wpLoginattempt=Log%20in&wpLoginToken=${WP_LOGIN_TOKEN}" 
        "http://www.somesite.com/index.php?title=Special:UserLogin&action=submitlogin&type=login"

wget -q -O email_body.txt --load-cookies cookies.txt 
        "http://www.somesite.com/${PAGE_TITLE}?action=raw"

cat email_body.txt | mail -s "${MAIL_SUBJECT}" -a "From: ${MAIL_FROM}" ${RCPT_TO}
</pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1501</wp:post_id>
		<wp:post_date>2011-04-30 00:03:35</wp:post_date>
		<wp:post_date_gmt>2011-04-30 00:03:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-wget-to-login-to-mediawiki</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mediawiki"><![CDATA[mediawiki]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_70ed185f6ebc273653236d0b13879d44</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4fe1ebcbfba5d26720d0c8be835b3812</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[D]]></wp:comment_author>
			<wp:comment_author_email>darren@dazdaz.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.73.203.162</wp:comment_author_IP>
			<wp:comment_date>2011-05-14 23:35:55</wp:comment_date>
			<wp:comment_date_gmt>2011-05-14 23:35:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice script, i've been searching for the updated process to do this.

Strangely WP_LOGIN_TOKEN has no value.  What is this for.  Is'nt this value stored in cookies.txt ?

The cookie part now works again with the latest mediawiki 1.16 however feeding the cookie back into wget to download a wiki entry does not work.

Are you sure about the ?action=raw]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>228</wp:comment_id>
			<wp:comment_author><![CDATA[D]]></wp:comment_author>
			<wp:comment_author_email>darren@dazdaz.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>84.73.203.162</wp:comment_author_IP>
			<wp:comment_date>2011-05-15 10:05:30</wp:comment_date>
			<wp:comment_date_gmt>2011-05-15 10:05:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I had missed a / in the wrong place.  It works perfectly.

It may be easier to include a URL instead of hard coding the website address.

Thanks a lot man !]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[carchaias]]></wp:comment_author>
			<wp:comment_author_email>carchaias@arcor.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.79.145.130</wp:comment_author_IP>
			<wp:comment_date>2012-09-14 09:42:16</wp:comment_date>
			<wp:comment_date_gmt>2012-09-14 09:42:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very helpful script I modified it to download semantic data from a File:-Page.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>FSF recommends CC0 for code snippets in documentation</title>
		<link>http://labs.creativecommons.org/2011/05/27/fsf-recommends-cc0-for-code-snippets-in-documentation/</link>
		<pubDate>Fri, 27 May 2011 21:13:02 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1525</guid>
		<description></description>
		<content:encoded><![CDATA[<p>This week Brett Smith of the <a href="http://fsf.org">Free Software Foundation</a> has <a href="http://www.fsf.org/blogs/licensing/new-license-recommendations-guide">announced</a> a new publication, <a href="http://www.gnu.org/licenses/license-recommendations.html">How to choose a license for your own work</a>.  It is good to see the FSF making such a document; hopefully it can help reduce confusion and time spent for developers working on new projects and give guidance to help reduce <a href="http://en.wikipedia.org/wiki/License_proliferation">license proliferation</a>.</p>

<p>There are several interesting things in this document, amongst which is the recommendation of the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a> license for non-copyleft works (the <a href="http://www.fsf.org/blogs/licensing/new-license-recommendations-guide">announcement</a> gives some insight into the thinking that lead to this).  But from Creative Commons' perspective the most interesting part of the article is certainly <a href="http://www.gnu.org/licenses/license-recommendations.html#documentation">the recommendation of CC0 for code snippets in documentation</a>.  From the document:</p>

<blockquote>Some documentation includes software source code. For instance, a manual for a programming language might include examples for readers to follow. You should both include these in the manual under the FDL's terms, and release them under another license that's appropriate for software. Doing so helps make it easy to use the code in other projects. We recommend that you dedicate small pieces of code to the public domain using CC0, and distribute larger pieces under the same license that the associated software project uses.</blockquote>

<p>This announcement comes on the heels of our other recent announcement that <a href="https://creativecommons.org/weblog/entry/27081">CC0 is now recognized as acceptable for software and is compatible with the GPL</a>, something we worked on carefully with the Free Software Foundation to clarify.  It is good to see results coming out of this collaboration and we hope to see more collaboration with the FSF and more practical uses of CC0 for software in the future.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1525</wp:post_id>
		<wp:post_date>2011-05-27 21:13:02</wp:post_date>
		<wp:post_date_gmt>2011-05-27 21:13:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fsf-recommends-cc0-for-code-snippets-in-documentation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc0"><![CDATA[cc0]]></category>
		<category domain="post_tag" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="post_tag" nicename="free-software"><![CDATA[free software]]></category>
		<category domain="post_tag" nicename="free-software-foundation"><![CDATA[Free Software Foundation]]></category>
		<category domain="post_tag" nicename="gpl"><![CDATA[GPL]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Notes on CC adoption metrics from The Power of Open</title>
		<link>http://labs.creativecommons.org/2011/06/27/powerofopen-metrics/</link>
		<pubDate>Mon, 27 Jun 2011 14:27:30 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1532</guid>
		<description></description>
		<content:encoded><![CDATA[Last week Creative Commons <a href="http://creativecommons.org/weblog/entry/27742">released</a> a book titled <a href="http://thepowerofopen.org/"><em>The Power of Open</em></a> featuring dozens of case studies of successful uses of CC tools, beautifully laid out magazine-style. The book also has a couple pages (45&46) on metrics and a pretty graph of CC adoption over the years.

See the main CC blog for <a href="http://creativecommons.org/weblog/entry/28041">non-technical detail on the data behind this graph</a>. This post serves as a technical companion -- read below for how to reproduce.

Every day (modulo bugs and outages) we request license link and licensed work counts from Yahoo! Site Explorer and Flickr respectively (and sometimes elsewhere, but those two are currently pertinent to our conservative estimation). You can find the data and software (if you want to start independently gathering data) <a href="http://wiki.creativecommons.org/Metrics/License_statistics">here</a>.

After loading the data into MySQL, we delete some rows representing links that aren't of interest or from non-Yahoo link: queries to avoid having to filter. In the future at least the former ought be moved to a separate table.

<blockquote>
<span style="font-size:xx-small">
delete from simple where license_uri = 'http://creativecommons.org/licenses/GPL/2.0/';
delete from simple where license_uri = 'http://creativecommons.org/licenses/LGPL/2.1/';
delete from simple where license_uri = 'http://creativecommons.org';
delete from simple where license_uri = 'http://www.creativecommons.org';
delete from simple where license_uri = 'http://creativecommons.org/licenses/publicdomain/1.0/';
delete from simple where license_uri = 'http://creativecommons.org/licenses/by-nc-nd/2.0/deed-music';
delete from simple where license_uri = 'http://creativecommons.org/licenses/by-nc-nd/2.0/br/creativecommons.org/licenses/sampling/1.0/br/';
delete from simple where license_uri = 'http://creativecommons.org/licenses/zero/1.0/';
delete from simple where license_uri = 'http://creativecommons.org/licenses/publicdomain';
delete from simple where search_engine != 'Yahoo';
</span>
</blockquote>

The following relatively simple query obtains average counts for each distinct license across December (approximating year-end). For the six main version 2.0 licenses, Flickr knows about more licensed works than Yahoo! Site Explorer does, so Flickr numbers are used: we know at least that many works for each of those licenses exist. <code>greatest(yahoo.ct, coalesce(flickr.ct,0))</code> accomplishes this. <code>coalesce</code> is necessary for Flickr as we don't have data most of the time, and don't want to compare with NULL.

<blockquote>
<span style="font-size:xx-small">
select * from ( select ym, sum(atleast) totalcount from (select yahoo.ym, yahoo.license_uri, greatest(yahoo.ct, coalesce(flickr.ct,0)) atleast from (select extract(year_month from timestamp) ym, license_uri,round(avg(count)) ct from simple group by license_uri,extract(year_month from timestamp)) yahoo left join (select extract(year_month from utc_time_stamp) ym, license_uri,round(avg(count)) ct from site_specific group by license_uri,extract(year_month from utc_time_stamp)) flickr on flickr.ym = yahoo.ym and flickr.license_uri = yahoo.license_uri) x group by ym ) x where ym regexp '12$';
</span>
</blockquote>

Results of above query:

<table border="1">
<tr><th>Year End</th><th>Total License Count</th></tr>
<tr><td>2003</td><td align="right">943,292</td></tr>
<tr><td>2004</td><td align="right">4,541,586</td></tr>
<tr><td>2005</td><td align="right">15,822,408</td></tr>
<tr><td>2006</td><td align="right">50,794,048</td></tr>
<tr><td>2007</td><td align="right">137,564,807</td></tr>
<tr><td>2008</td><td align="right">214,970,426</td></tr>
<tr><td>2009</td><td align="right">336,771,549</td></tr>
<tr><td>2010</td><td align="right">407,679,266</td></tr>
</table>

The more complicated query below also obtains the number of <a href="http://freedomdefined.org/Definition">fully free/libre/</a><a href="http://www.opendefinition.org/okd/">open</a> works and the proportion of works that are such:

<blockquote>
<code style="font-size:xx-small">
select free.ym, freecount, totalcount, freecount/totalcount freeproportion from (select ym, sum(atleast) freecount from (select yahoo.ym, yahoo.license_uri, greatest(yahoo.ct, coalesce(flickr.ct,0)) atleast from (select extract(year_month from timestamp) ym, license_uri,round(avg(count)) ct from simple group by license_uri,extract(year_month from timestamp)) yahoo left join (select extract(year_month from utc_time_stamp) ym, license_uri,round(avg(count)) ct from site_specific group by license_uri,extract(year_month from utc_time_stamp)) flickr on flickr.ym = yahoo.ym and flickr.license_uri = yahoo.license_uri) x where license_uri regexp 'publicdomain' or license_uri regexp 'by/' or license_uri regexp 'by-sa/' group by ym) free, (select ym, sum(atleast) totalcount from (select yahoo.ym, yahoo.license_uri, greatest(yahoo.ct, coalesce(flickr.ct,0)) atleast from (select extract(year_month from timestamp) ym, license_uri,round(avg(count)) ct from simple group by license_uri,extract(year_month from timestamp)) yahoo left join (select extract(year_month from utc_time_stamp) ym, license_uri,round(avg(count)) ct from site_specific group by license_uri,extract(year_month from utc_time_stamp)) flickr on flickr.ym = yahoo.ym and flickr.license_uri = yahoo.license_uri) x group by ym) total where free.ym = total.ym and free.ym regexp '12$';
</code>
</blockquote>

The above query obtains the following:

<table border="1">
<tr><th>Year End</th><th>Free License Count</th><th>Total License Count</th><th>Free License %</th></tr>
<tr><td>2003</td><td align="right">208,939</td><td align="right">943,292</td><td align="right">22.15%</td></tr>
<tr><td>2004</td><td align="right">1,011,650</td><td align="right">4,541,586</td><td align="right">22.28%</td></tr>
<tr><td>2005</td><td align="right">4,369,938</td><td align="right">15,822,408</td><td align="right">27.62%</td></tr>
<tr><td>2006</td><td align="right">12,284,600</td><td align="right">50,794,048</td><td align="right">24.19%</td></tr>
<tr><td>2007</td><td align="right">40,020,147</td><td align="right">137,564,807</td><td align="right">29.09%</td></tr>
<tr><td>2008</td><td align="right">68,459,952</td><td align="right">214,970,426</td><td align="right">31.85%</td></tr>
<tr><td>2009</td><td align="right">136,938,501</td><td align="right">336,771,549</td><td align="right">40.66%</td></tr>
<tr><td>2010</td><td align="right">160,064,676</td><td align="right">407,679,266</td><td align="right">39.26%</td></tr>
</table>

The pretty graph in the book reflects the total number of CC licensed works and the number of fully free/libre/open CC licensed works at the end of each year; the legend and text note that the proportion of the latter has roughly doubled over the history of CC.

<a href="http://wiki.creativecommons.org/File:Metrics_Updated_Monthly.png"><img src="http://wiki.creativecommons.org/images/b/b7/Metrics_Updated_Monthly.png"/></a>

If we look at the average for each month, not only December (remove the regular expression matching '12' at the end of the year month datestring), the data is noisier (and it appears data collection failed for two months in mid-2007, which perhaps should be interpolated):

The results of the above queries and some additional charts may be <a href="http://wiki.creativecommons.org/images/0/02/CC-growth-mix.ods">downloaded as a spreadsheet</a>.

As noted previously, additional data is <a href="http://labs.creativecommons.org/2010/12/09/available-for-analysis/">available for analysis</a>. There's also more that could be done with the license-link and site-specific data used above, e.g., analysis of particular license classes, version update, and jurisdiction ports. Also see the <a href="http://creativecommons.org/weblog/entry/28041">non-technical post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1532</wp:post_id>
		<wp:post_date>2011-06-27 14:27:30</wp:post_date>
		<wp:post_date_gmt>2011-06-27 14:27:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>powerofopen-metrics</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Libre Graphics Magazine interview at Libre Graphics Meeting</title>
		<link>http://labs.creativecommons.org/2011/07/05/libre-graphics-magazine-interview-at-libre-graphics-meeting/</link>
		<pubDate>Tue, 05 Jul 2011 23:19:35 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1635</guid>
		<description></description>
		<content:encoded><![CDATA[<div style="float: right;margin: 1em"><a rel="cc:attributionURL" href="http://libregraphicsmag.com/"><img class="size-medium wp-image-21917 alignnone" src="http://labs.creativecommons.org/files/2011/07/lgmag_300px.jpg" alt="Libre Graphics Magazine issue 1.1 cover" width="300" height="424" /></a><br /><em><a href="http://libregraphicsmag.com/blog/2010/11/cover_uncovered/">Libre Graphics Magazine 1.1 cover</a></em> / <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a></div>

<p>As <a href="https://creativecommons.org/weblog/entry/27420">discussed previously</a>, I represented Creative Commons at <a href="http://libregraphicsmeeting.org/2011/">Libre Graphics Meeting 2011</a>.  Also attending were the people behind <a href="http://libregraphicsmag.com/">Libre Graphics Magazine</a>.  If you aren't already familiar with Libre Graphics Magazine, it's a cool project crossing free software and free cultural works.  It isn't as much a magazine of free software design tutorials (though to some extent it is that also) as it is a design magazine offering a critical perspective on and showcasing works made with such tools.</p>

<p>It's valuable that we have a magazine that can show off the strengths of libre graphics tools when put in the hands of capable artists.  But the people behind this magazine can probably describe this much better themselves.  On that note, Danny Piccirillo recorded an interview with the main people behind Libre Graphics Magazine (Ana Carvalho, ginger "all lowercase" coons, Ricardo Lafuente).  Amongst other things, the interview touched on why even the printing of the magazine itself is useful:</p>

<blockquote><b>Ana Carvalho:</b> In the professional world, one of the things that is usually pointed out to people that use FLOSS [Free/Libre/Open Source Software] for design is that it's not good for printing.</blockquote>
<blockquote><b>ginger coons:</b> We proved them wrong!</blockquote>
<blockquote><b>Ana Carvalho:</b> Yes.  And... you can see it's possible.  And you can do it with the same quality that you can do it with other kinds of tools.  So that's a very strong point.</blockquote>
<blockquote><b>ginger coons:</b> That really is a constant refrain even within our own community.  People always still talk about the printing problem.  So... what printing problem?</blockquote>
<blockquote><b>Ricardo Lafuente:</b>There's a lot of edges to be ironed out, but on the other hand we do get compliments from printers on how good our PDFs are constructed.  And that's thanks to the quality of FLOSS software.  There's still this kind of misconception that FLOSS software is not up to par with professional standards... that's not true, people still don't believe that, but that's their problem, and this is one of our ways to try and prove them wrong and actually try and get their interest toward alternate ways of making beautiful things.</blockquote>

<p>There are plenty of other gems in the interview.  Assuming we've piqued your interest, you can watch the whole thing below:</p>

<p style="text-align: center"><a href="http://www.youtube.com/watch?v=3ZduehNgirk"><img src="http://labs.creativecommons.org/files/2011/07/lgm_youtube.jpg" alt="Libre Graphics Magazine on YouTube screenshot" /></a><br />
View <a href="http://www.youtube.com/watch?v=3ZduehNgirk">on YouTube</a> or <a href="http://www.archive.org/details/LibreGraphicsMagazineInterviewAtLgm2011">archive.org</a> / <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a></p>

<p>And of course check out <a href="http://libregraphicsmag.com/">Libre Graphics Magazine</a> itself.  The magazine is licensed as <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a>, and PDFs are available at no cost on the site, but it really is a magazine that is designed for and shines best in print, so consider <a href="http://libregraphicsmag.com/buy.html">purchasing a physical copy</a>. Thanks to <a href="http://adaptstudio.ca/">ginger coons</a> and also Ana Carvalho and Ricardo Lafuente of <a href="http://manufacturaindependente.org/">Manufactura Independente</a> for taking the time to do this interview and to <a href="http://thesilentnumber.me/">Danny Piccirillo</a> for the large time investment in both filming it and editing it down.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1635</wp:post_id>
		<wp:post_date>2011-07-05 23:19:35</wp:post_date>
		<wp:post_date_gmt>2011-07-05 23:19:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>libre-graphics-magazine-interview-at-libre-graphics-meeting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>RDFaCE: an RDFa-enhanced TinyMCE rich editor</title>
		<link>http://labs.creativecommons.org/2011/07/09/rdface-rdfa-enhanced-tinymce-rich-editor/</link>
		<pubDate>Sat, 09 Jul 2011 19:02:34 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1650</guid>
		<description></description>
		<content:encoded><![CDATA[For a long time -- it feels like much longer than the <a href="http://wiki.creativecommons.org/RDFa_Plugin_for_WordPress">RDFa Plugin for WordPress tech challenge</a> has been on the wiki (28 months) -- the idea that there should be such a thing has been around. I recall multiple Summer of Code applications proposing to tackle the problem. However, it is a really hard UI problem.

I'm really happy to see the <a href="http://blog.aksw.org/2011/rdface-put-an-smile-on-the-face-of-semantic-content-authoring/">announcement</a> of <a href="http://aksw.org/Projects/RDFaCE">RDFaCE</a>, which does most of the hard work.

Without reading any documentation or watching their <a href="http://www.youtube.com/watch?v=9uVGbZIWYto">screencast</a> (still haven't watched it, no idea if it is any good!) I was able to add a cc:attributionName annotation specific to the image in their <a href="http://rdface.aksw.org/test/tinymce/examples/rdfaDemo.html">demo</a> on my first try:
<ul>
	<li>select the photographer name, insert cc:attributionName annotation with literal value already in the text. RDFaCE seems to already know the correct cc: namespace mapping.</li>
<li>select content around photo, set subject to photo URL</li>
<li>verify that triples produced are correct</li>
</ul>
Granted I more or less know what I'm doing. But, so do lots of other people. Contrary to some impressions, annotating stuff on the web with name-value pairs ("stuff" is the subject in the "triple") is hardly brain-twisting.

I look forward to seeing RDFaCE bundled in a WordPress plugin with some awareness of the WordPress media manager, and using on this very blog.

<a href="http://en.wikipedia.org/wiki/TinyMCE">TinyMCE</a> is the free software rich text editor used in lots of projects in addition to WordPress, so this is a great step forward!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1650</wp:post_id>
		<wp:post_date>2011-07-09 19:02:34</wp:post_date>
		<wp:post_date_gmt>2011-07-09 19:02:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rdface-rdfa-enhanced-tinymce-rich-editor</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="rdf"><![CDATA[rdf]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>230</wp:comment_id>
			<wp:comment_author><![CDATA[Ali Khalili]]></wp:comment_author>
			<wp:comment_author_email>hyperir@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://ali1k.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>78.55.58.41</wp:comment_author_IP>
			<wp:comment_date>2011-08-09 20:26:54</wp:comment_date>
			<wp:comment_date_gmt>2011-08-09 20:26:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[FYI: RDFaCE Wordpress plugin is available at http://wordpress.org/extend/plugins/rdface/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>CTO</title>
		<link>http://labs.creativecommons.org/2011/07/12/cto/</link>
		<pubDate>Tue, 12 Jul 2011 18:46:46 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1653</guid>
		<description></description>
		<content:encoded><![CDATA[<b><a href="http://creativecommons.org/weblog/entry/28240">Creative Commons is hiring its next Chief Technology Officer.</a></b>

If you follow the links in the post linked above, you can find out a <em>lot</em> about the technology we're looking for someone to be chief officer of. Why not submit a patch, bug report, or documentation edit with your resume? ;-)
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1653</wp:post_id>
		<wp:post_date>2011-07-12 18:46:46</wp:post_date>
		<wp:post_date_gmt>2011-07-12 18:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cto</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internal"><![CDATA[internal]]></category>
		<category domain="category" nicename="people"><![CDATA[people]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>LRMI tech WG CFP</title>
		<link>http://labs.creativecommons.org/2011/07/18/lrmi-tech-wg-cfp/</link>
		<pubDate>Mon, 18 Jul 2011 22:02:58 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1657</guid>
		<description></description>
		<content:encoded><![CDATA[If you know your stuff, the you might be able to guess from the subject what this is about. Perhaps LR = Learning Resource is not obvious. <a href="http://creativecommons.org/weblog/entry/28349">More on the main CC blog...</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1657</wp:post_id>
		<wp:post_date>2011-07-18 22:02:58</wp:post_date>
		<wp:post_date_gmt>2011-07-18 22:02:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lrmi-tech-wg-cfp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="lrmi"><![CDATA[LRMI]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="schema-org"><![CDATA[schema.org]]></category>
		<category domain="category" nicename="search"><![CDATA[search]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Not Panicking: switching to Virtualenv for deployment</title>
		<link>http://labs.creativecommons.org/2011/07/29/not-panicking-switching-to-virtualenv-for-deployment/</link>
		<pubDate>Fri, 29 Jul 2011 21:34:10 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1662</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've written about <a href="http://labs.creativecommons.org/2010/03/16/using-virtualenv-and-zc-buildout-together/">zc.buildout and virtualenv before</a> and how to use them both simultaneously, which I find to be useful for development on my own machine.  I really admire both of these tools; I especially think that buildout is really great for projects where you want developers to be able to get your package running quickly without having to understand how python packaging works.  (I <a href="http://docs.mediagoblin.org/hackinghowto.html">use buildout for this purpose</a> for one of my own personal projects, <a href="http://mediagoblin.org">MediaGoblin</a>, and I think it's served a wonderful purpose of getting new contributors up and going quickly.)</p>

<p>Anyway, in that previous blogpost about zc.buildout and virtualenv I erroneously suggested that virtualenv is best for multiple packages in development and zc.buildout is better for just one.  I was rightly corrected that you can use the develop line of a buildout config file to specify multiple python packages.  So this is what we've been doing for the last year roughly, running a meta-package with <a href="http://code.creativecommons.org/viewgit/cc.engine.git/">cc.engine</a> checked out of git and the rest running out of python packages.</p>

<p>We've been doing packaging and <a href="http://labs.creativecommons.org/2011/02/14/your-own-python-egg-baskets-package-repositories/">releasing to our own egg basket</a> for a while, and for the most part that has worked out, but our system administrator Nathan Kinkade pointed out that we don't really need packages, it's a bunch of extra steps to build, nobody outside of CC is using these packages, and it's a lot easier to rollback a git repository in case of an emergency than it is a python package.</p>

<p>That lead me to reconsider the way we're currently doing deployment and my growing feeling that maybe zc.buildout, while great for developing locally, really just isn't a good option for deployment.  Whenever I want to pull down new versions of packages, I would run buildout.  But buildout likes to do something which makes this period very, very painful: if for whatever reason it can't manage to install all packages, it tears down the entire environment.  It removes ./bin/python, it removes all other scripts.  I've found this to be highly stressful, especially because you never know if some package on <a href="http://pypi.python.org">PyPi</a> is going to time out and then suddenly as punishment <a href="https://bugs.launchpad.net/zc.buildout/+bug/516243">your environment no longer works</a>, suddenly parts of creativecommons.org aren't running, and you start to have a minor panic attack as you rush to get things up again.  That's not very great.</p>

<p>Anyway, I always stress out about this, which has lead me to adding coping mechanisms to <a href="http://code.creativecommons.org/viewgit/cc.controlpanel.git/tree/fabfile.py">our fabric deploy script</a>:



<img src="http://labs.creativecommons.org/files/2011/07/dont_panic_terminal.png" alt="Don't Panic! screenshot" />

<p>This helps reduce my blood pressure somewhat, but anyway, we decided to move from buildout to virtualenv for deployment.  Actually, there's not much more to say; it only took a couple of hours to make the switch and there really wasn't anything special to say about it.  It just works and generally seems a lot simpler.</p>

<p>In short: buildout is pretty great.  If you're looking for an option to make it really, <i>really</i> easy for people who want to try out your project to get something working or start contributing, it's the closest the python world has to an interface as simple as (or simpler than) `./configure &amp;&amp; make`.  But as for deployment... especially if you'd like to do code checkouts of your main packages, just go with virtualenv.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1662</wp:post_id>
		<wp:post_date>2011-07-29 21:34:10</wp:post_date>
		<wp:post_date_gmt>2011-07-29 21:34:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>not-panicking-switching-to-virtualenv-for-deployment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="buildout"><![CDATA[buildout]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="virtualenv"><![CDATA[virtualenv]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>CC license use in Latin America brief analysis</title>
		<link>http://labs.creativecommons.org/2011/08/12/cc-latam-analysis/</link>
		<pubDate>Fri, 12 Aug 2011 15:41:20 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1671</guid>
		<description></description>
		<content:encoded><![CDATA[Carolina Botero (of CC Colombia and now CC regional manager for Latin America) has posted a <a href="http://www.openbusinesslatinamerica.org/wp/2011/08/08/%C2%BFcomo-se-usan-las-licencias-creative-commons-en-latinoamerica/">brief analysis of CC license use in Latin America</a> (<a href="http://translate.google.com/translate?js=n&prev=_t&hl=en&ie=UTF-8&layout=2&eotf=1&sl=es&tl=en&u=http%3A%2F%2Fwww.openbusinesslatinamerica.org%2Fwp%2F2011%2F08%2F08%2F%25C2%25BFcomo-se-usan-las-licencias-creative-commons-en-latinoamerica%2F">es2en machine translation</a>).

As with <a href="http://web.si.umich.edu/tprc/papers/2007/805/CreateCommExp.pdf">previous</a> looks at CC licenses across different jurisdictions and <a href="http://www.slideshare.net/gcheliotis/assessing-cc-adoption-in-asia-manila">regions</a>, this one is based on search engine reported links to jurisdiction "ported" versions of licenses. It is great to see what researchers have done with this limited mechanism.

I am eager to explore other means of characterizing CC usage across regions and fields, and hope to provide more <a href="http://labs.creativecommons.org/2010/12/09/available-for-analysis/">data</a> that will enable researchers to do this. This will be increasingly important as we attempt to forge a universal license that does not call for porting in the same way, with version 4.0 <a href="http://wiki.creativecommons.org/Global_Summit_2011">over</a> the coming year (as well as with the increasing <a href="https://creativecommons.org/weblog/entry/28525">importance</a> of CC in the world).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1671</wp:post_id>
		<wp:post_date>2011-08-12 15:41:20</wp:post_date>
		<wp:post_date_gmt>2011-08-12 15:41:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-latam-analysis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="metrics"><![CDATA[Metrics]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Summary of current licensing tools</title>
		<link>http://labs.creativecommons.org/2011/08/31/summary-of-current-licensing-tools/</link>
		<pubDate>Wed, 31 Aug 2011 17:50:22 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1676</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've been considering license integration into a <a href="http://mediagoblin.org">personal project</a> of mine and thoughts of that have spilled over into work.  And so we've been talking at Creative Commons recently about the current methods for licensing content managed by applications and what the future might be.  The purpose of this post is to document the present state of licensing options.  (A post on the future of licensing tools may come shortly afterward.)</p>

<h2>Present, CC supported tools</h2>

<p>To begin with, there are these three CC-hosted options:</p>

<ul>
<li><b><a href="http://api.creativecommons.org/docs/">CC licensing web API</a></b> -- A mostly-RESTful interface for accessing CC licensing information.  Some language-specific abstraction layers are provided.  Supported and kept up to date.  Lacking a JSON layer, which people seem to want.  Making a request for every licensing action in your application may be a bit heavy.</li>
<li><b><a href="http://wiki.creativecommons.org/Partner_Interface">Partner interface</a></b> -- Oldest thing we support, part of the license engine.  Typical case is that you get a popup and when the popup closes the posting webpage can access the info that's chosen.  Still gets you your chooser based interface but on your own site.  Internet Archive uses it, among others.</li>
<li><b><a href="http://wiki.creativecommons.org/JsWidget">LicenseChooser.js</a></b> -- Allows you to get a local chooser user interface by dumping some javascript into your application, and has the advantage of not requiring making any web requests to Creative Commons' servers.  Works, though not recently updated.</li></ul>

<p>All of these have the problem that the chooser of CC licenses is only useful if you want exactly the choices we offer (and specifically the most current version of the licenses we provide).  You need to track those changes in the database anyway, which means you either are not keeping track of version used or you are and when we change you might be in for a surprise.</p>

<h2>Going it alone</h2>

<p>So instead there are these other routes that sites take:</p>

<ul>
<li><b>Don't use any tools and store license choices locally</b> -- What Flickr and every other major option does: reproduce everything yourself.  In the case of Flickr, the six core licenses at version 2.0.  In YouTube, just one license (CC BY 3.0).  That works when you have one service, when you know what you want, and what you want your users to use.  It doesn't work well when you want people to install a local copy and you don't know what they want to use.</li>
<li><b>Let any license you want as long as it fits site policy</b> -- and you don't facilitate it, and it gets kind of outside the workflow of the main CMS you're using&hellip; wiki sites are an example of this, but usually have a mechanism for adding a license to footer of media uploaded.  The licenses are handled by wiki templates, anyone can make a template for any license they choose.</li></ul>

<p>None of those are really useful for software you expect other people to install where you want to provide some assistance to either administrators of the software who are installing it to be used or where you want the administrator to give the user some choice or choices relevant to that particular site.</p>

<h2>The liblicense experiment</h2>

<p>This brings us to another solution that CC has persued:</p>

<ul><li><b><a href="http://wiki.creativecommons.org/Liblicense">liblicense</a></b> -- Packages all licenses we provide, give an api for users to get info and metadata about them.  Allows for web-request-free access to the cc licenses.  It doesn't address non-CC licenses, however, and is mostly unmaintained.</li></ul>

<p>So, these are the present options that application developers have at their disposal for doing licensing of application-managed content.  There's a tradeoff with each one of them though: either you have to rely on web requests to CC for each licensing decision you make, you go it alone, or you use something unmaintained which is CC-licensing-specific anyway.  Nonetheless, cc.api and the partner interface are supported if you want something from CC, and people do tend to make by with doing things offline.  But none of the tools we have are so flexible, so what can software like MediaGoblin or an extension for WordPress or etc do?</p>

<p>There's one more option, one that too my knowledge hasn't really been explored, and would be extremely flexible but also well structured.</p>

<h2>The semantic web / linked data option?</h2>

<p>It goes like this: let either users or admins specify licenses by their URL.  Assuming that page self-describes itself via some metadata (be it RDFa, providing a rel="alternate" RDF page in your headers, or microdata), information about that license could be extracted directly from the URL and stored in the database.  (This information could of course then be cached / recorded in the database.)  This provides a flexible way of adding new licenses, is language-agnostic, and allows for a canonical set of information about said licenses.  Libraries could be written to make the exctraction of said information easier, could even cache metadata for common licenses (and for common licenses which don't provide any metadata at their canonical URLs...).</p>

<p>I'm hoping that in the near future I'll have a post up here demonstrating how this could work with a prototypical tool and use case.</p>

<p>Thanks to Mike Linksvayer, for most of this post was just transforming a braindump of his into a readable blogpost.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1676</wp:post_id>
		<wp:post_date>2011-08-31 17:50:22</wp:post_date>
		<wp:post_date_gmt>2011-08-31 17:50:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summary-of-current-licensing-tools</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="ccrel"><![CDATA[ccrel]]></category>
		<category domain="post_tag" nicename="licence-tools"><![CDATA[licence tools]]></category>
		<category domain="post_tag" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>232</wp:comment_id>
			<wp:comment_author><![CDATA[David Haskiya]]></wp:comment_author>
			<wp:comment_author_email>david.haskiya@kb.nl</wp:comment_author_email>
			<wp:comment_author_url>http://www.europeana.eu</wp:comment_author_url>
			<wp:comment_author_IP>83.163.0.31</wp:comment_author_IP>
			<wp:comment_date>2011-08-31 19:45:33</wp:comment_date>
			<wp:comment_date_gmt>2011-08-31 19:45:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Apologies for banging my own drum:

Check out the Europeana Public Domain Calculators:
http://outofcopyright.eu/

Using it you can check whether a work is in the fallen domain according to 30 legislation.

An interesting prototype on how to possibly do this programmatically is:
http://outofcopyright.eu/hack4europe/

Where the PD-calculator mashes the Europeana Search API and the Dbpedia SPARQL-node to PD-calculate collections in batch.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>233</wp:comment_id>
			<wp:comment_author><![CDATA[Unique Gifts]]></wp:comment_author>
			<wp:comment_author_email>sumaiya_msa@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.urbanities.com.au </wp:comment_author_url>
			<wp:comment_author_IP>182.182.106.2</wp:comment_author_IP>
			<wp:comment_date>2012-05-06 14:47:08</wp:comment_date>
			<wp:comment_date_gmt>2012-05-06 14:47:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks to Mike Linksvayer, for most of this post was just transforming a braindump of his into a readable blogpost.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Converting cc.engine from ZPT to Jinja2 and i18n logical keys to english keys</title>
		<link>http://labs.creativecommons.org/2011/09/02/converting-cc-engine-from-zpt-to-jinja2-and-i18n-logical-keys-to-english-keys/</link>
		<pubDate>Fri, 02 Sep 2011 22:16:56 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1685</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Some CC-specfic background</h2>

<p>Right now I'm in the middle of retooling of our translation infrastructure.  <a href="http://code.creativecommons.org/viewgit/cc.engine.git/">cc.engine</a> and <a href="http://labs.creativecommons.org/2009/12/18/understanding-the-state-of-sanity-via-whiteboards-and-ascii-art/">related tools</a> have a long, complex history (dating back, as I understand, to <a href="http://en.wikipedia.org/wiki/Tcl">TCL</a> scripts running on <a href="http://www.aolserver.com/">AOL server</a> software).  The short of it is, CC's tools have evolved a lot over the years, and sometimes we're left with systems and tools that require a lot of organization-specific knowledge for historical reasons.</p>

<p>This has been the case with CC's translation tools.  Most of the world these days uses english-key translations.  CC used logical key translations.  This means that if you marked up a bit of text for translation, instead of the key being the actual text being translated (such as "About The Licenses"), the key would be an identifier code which mapped to said english string, like "util.View_Legal_Code".  What's the problem with this?  Actually, there are a number of benefits that I'll miss and that I won't get into here, but the real problem is that the rest of the translation world mostly doesn't work this way.  We use <a href="http://transifex.net">Transifex</a> (and previously used <a href="http://translate.sourceforge.net/wiki/pootle/index?redirect=1">Pootle</a>) as a tool for our translators managing our translations.  Since these tools don't expect logical keys we had to write tools to convert from logical keys to english keys on upload and english keys to logical keys back and a whole bunch of other crazy custom tooling.</p>

<p>Another time suck has been that we'd love to be able to just dynamically extract all translations from our python code and templates, but this also turns out to be impossible with our current setup.  A strange edge-case in ZPT means that certain situations with dynamic attributes in ZPT-translated-HTML means that we have to edit certain translations after they're extracted, meaning we can't rely on an auto-extracted set of translations.</p>

<p>So we'd like to move to a future with no or very few custom translation tools (which means we need English keys) and auto-extraction of translations (which means because of that edge case, no ZPT).  Since we need to move to a new templating engine, I decided that we should go with my personal favorite templating engine, <a href="http://jinja.pocoo.org/">Jinja2</a>.</p>

<h2>ZPT vs Jinja2</h2>

<p>Aside from the issue I've described above, briefly I'd like to describe the differences between ZPT and Jinja2, as they're actually my two favorite templating languages.</p>

<p><a href="http://zpt.sourceforge.net/">ZPT</a> (Zope Page Templates) is an XML-based templating system where your tags and elements actually become part of the templating logic and structure.  For example, here's an example of us looping over a list of license versions on our "helpful" 404 pages for when you type in the wrong license URL (like at <a href="http://creativecommons.org/by/2.33333/">http://creativecommons.org/by/2.33333/</a>):</p>

<pre>
&nbsp;&nbsp;&lt;h4&gt;Were you looking for:&lt;/h4&gt;

&nbsp;&nbsp;&lt;ul class="archives" id="suggested_licenses"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;li tal:repeat="license license_versions"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a tal:attributes="href license/uri"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;b tal:content="python: license.title(target_lang)"&gt;&lt;/b&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&lt;/ul&gt;
</pre>

<p>As you can see, the for loop, the attributes, and the content are actually elements of the (X)HTML tree.  The neat thing about this is that you can be mostly sure that you won't end up with <a href="http://en.wikipedia.org/wiki/Tag_soup">tag soup</a>.  It's also pretty neat conceptually.</p>

<p>Now, let's look at the same segment of code in Jinja2:</p>

<pre>
&nbsp;&nbsp;&lt;h4&gt;Were you looking for:&lt;/h4&gt;

&nbsp;&nbsp;&lt;ul class="archives" id="suggested_licenses"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;{% for license in license_versions %}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href="{{ license.uri }}"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;b&gt;{{ license.title(target_lang) }}&lt;/b&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;{% endfor %}
&nbsp;&nbsp;&lt;/ul&gt;
</pre>

<p>If you've used <a href="https://docs.djangoproject.com/en/dev/topics/templates/">Django's templating system</a> before, this should look very familiar, because that's the primary source of inspiration for Jinja2.  There are a few things I like about Jinja2 though that Django's templating system doesn't have, but the biggest and clearest of these things is the ability to pass arguments into functions, as you can see that we're doing here with license.title(target_lang).  Anyway, it massively beats making a template tag every time you want to pass an argument into a function.</p>

<h2>The conversion process</h2>

<p>Not too much to say about converting from ZPT to Jinja2.  It's really just a lot of manual work, combing through everything and moving it around.</p>

<p>More interestingly might be our translation conversion process.  Simply throwing out old translations and re-extracting with new ones is not an option... it's a lot of effort for translators to go through and translate things and asking them to do it all over again is simply too much to ask and just not going to happen.  Pass 1 was to simply get the templates moved over rather than try to both convert templates and the logical-&gt;english key system all at once (this move away from logical keys has been tried and fizzled before, probably because there are simply too many moving parts across our codebase... so we wanted to take this incrementally, and this seemed like the best place to go first).  We're simply doing stuff like this:</p>

<pre>
&nbsp;&nbsp;&lt;h3&gt;{{ cctrans(locale, "deed.retired")|safe }}&lt;/h3&gt;
</pre>

<p>Where cctrans is a simple logical key translation function.  Next steps:</p>

<ul>
  <li>Create a script that converts all our .po files to eliminate the logical keys and move them to English-only.</li>
  <li>Write a script to auto-interpolate {{ cctrans() }} calls in templates to {% trans %}{% endtrans %} Jinja2 tags.</li>
  <li>Do all the many manual changes to all our python codebases.</li>
</ul>

<p>At that point, we should be able to wrap this all up.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1685</wp:post_id>
		<wp:post_date>2011-09-02 22:16:56</wp:post_date>
		<wp:post_date_gmt>2011-09-02 22:16:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-cc-engine-from-zpt-to-jinja2-and-i18n-logical-keys-to-english-keys</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cc-engine"><![CDATA[cc.engine]]></category>
		<category domain="post_tag" nicename="jinja2"><![CDATA[jinja2]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="templates"><![CDATA[templates]]></category>
		<category domain="post_tag" nicename="translations"><![CDATA[translations]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="zpt"><![CDATA[zpt]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>235</wp:comment_id>
			<wp:comment_author><![CDATA[Lisa Duke]]></wp:comment_author>
			<wp:comment_author_email>ld@attglobal.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.CandidateChannel.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>109.158.24.57</wp:comment_author_IP>
			<wp:comment_date>2012-02-16 11:55:20</wp:comment_date>
			<wp:comment_date_gmt>2012-02-16 11:55:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm wondering if it's possible to speed up the conversion process by using Macros or some other pre-defined iterative program to translate the more commonly used ZPT classes.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Creative Commons: Using Provenance in the Context of Sharing Creative Works</title>
		<link>http://labs.creativecommons.org/2011/10/03/provenance/</link>
		<pubDate>Mon, 03 Oct 2011 16:09:49 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1698</guid>
		<description></description>
		<content:encoded><![CDATA[I provided a brief non-technical writeup on Creative Commons and provenance for the <a href="http://www.w3.org/2011/prov/wiki/Main_Page">W3C Provenance Working Group</a>'s Connection Task Force documenting "Communities Addressing Important Issues in Provenance".

See the <a href="http://www.w3.org/2011/prov/wiki/Connection_Task_Force_Informal_Report#Creative_Commons:_Using_Provenance_in_the_Context_of_Sharing_Creative_Works_.28.2A.2A.2A.2A.29">writeup on the Provenance WG wiki</a> (please suggest edits in comments below), current version follows.
<hr/>
Creative Commons Creative Commons (CC) provides licenses and public domain tools that can be used for any kind of creative works like texts, images, websites, or other media, as well as databases. CC tools are well known and used, especially in online publications. Each CC license and public domain tool is identified by a unique URL, allowing proper identification and reference of these as part of a work's provenance information.

Additionally, Creative Commons provides a vocabulary to describe its tools and works licensed or marked with those tools in a machine interpretable way: The Creative Commons Rights Expression Language (CC REL). CC REL can be expressed in RDF.

The provenance of assertions about a work's license or public domain status is of great important for licensors, licensees, curators, and future potential users. All CC licenses legally require certain information (attribution and license notice) be retained; even in the case of its public domain tools, retaining such information is a service to readers and in accordance with research and other norms. To the extent license and related information is not retained or cannot be trusted, users ability to find and rely upon freedoms to use such works is degraded. In many cases, the original publication location of a work will disappear (linkrot) or rights information will be removed, either unintentionally (eg template changes) or intentionally (here especially, provenance is important; CC licenses are irrevocable). In the degenerate case, a once CC-licensed work becomes just another orphan work.

The core statements needed are who licensed, dedicated to the public domain, or marked as being in the public domain, which work, and when? Each of these statements have sub-statements, eg the relationship of "who" to rights in the work or knowledge about the work, and exactly what work and at what granularity?

Provenance information is also necessary for discovering the uses of shared works and building new metrics of cultural relevance, scientific contribution, etc, that do not strictly require on centralized intermediaries.

Finally, in CC's broader context, an emphasis on machine-assisted provenance aligns with renewed interest in copyright formalities (eg work registries), puts a work's relationship to society's conception of knowledge in a different light (compare intellectual provenance and intellectual property), and is in contrast with technical restrictions which aim to make works less useful to users rather than more.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1698</wp:post_id>
		<wp:post_date>2011-10-03 16:09:49</wp:post_date>
		<wp:post_date_gmt>2011-10-03 16:09:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>provenance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="provenance"><![CDATA[provenance]]></category>
		<category domain="category" nicename="registry"><![CDATA[registry]]></category>
		<category domain="category" nicename="w3c"><![CDATA[w3c]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>See also roundup</title>
		<link>http://labs.creativecommons.org/2012/01/25/see-also-roundup/</link>
		<pubDate>Wed, 25 Jan 2012 17:26:51 +0000</pubDate>
		<dc:creator><![CDATA[ml]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1709</guid>
		<description></description>
		<content:encoded><![CDATA[The Learning Resource Metadata Initiative specification (which Creative Commons is coordinating) has entered its <a href="https://creativecommons.org/weblog/entry/31422">final public commenting period</a>. Please look if you're at all interested in education metadata and/or how efforts spurred by schema.org (which LRMI is) will shape up.

The W3C published drafts recently that ought be of great interest to the Creative Commons technology community: a <a href="http://www.w3.org/blog/SW/2012/01/11/feedback-welcome-an-overview-of-the-provenance-prov-family-of-specs/">family of documents regarding provenance</a> and a <a href="http://www.w3.org/blog/SW/2012/01/12/drafts-published-by-the-w3c-html-data-task-force-html-data-guide-and-microdata-to-rdf-transform/">guide to using microdata, microformats, and RDFa in HTML</a>. I mentioned these on my personal blog <a href="http://gondwanaland.com/mlog/2012/01/12/penumbra-of-provenance/">here</a> and <a href="http://gondwanaland.com/mlog/2012/01/12/html-data-guide/">here</a>.

Speaking of things mentioned on my personal blog, a couple days ago I posted <a href="http://gondwanaland.com/mlog/2012/01/23/attribution-crawl/">some analysis of how people are deploying CC related metadata</a> based on a structured data extracted by the <a href="http://page.mi.fu-berlin.de/muehleis/ccrdf/">Web Data Commons</a> project from a sample of the <a href="http://commoncrawl.org/">Common Crawl</a> corpus. Earlier this month I posted a marginally technical <a href="http://gondwanaland.com/mlog/2012/01/08/css-text-overlay-attribution/">explanation of using CSS text overlays to provide attribution</a> and a <a href="http://gondwanaland.com/mlog/2012/01/10/open-hardware-licenses-history/">brief historical overview of 'open hardware licensing'</a>, something which the CC technology team hasn't been involved in, but is vaguely labs-ish, and needs deep technical attention.

Other things needing deep technical attention: <a href="http://wiki.creativecommons.org/4.0/Technical_protection_measures">how CC addresses Digital Restrictions Management in version 4.0 of its licenses</a> is being discussed. We don't know enough about the technical details of <a href="http://lists.ibiblio.org/pipermail/cc-licenses/2012-January/006663.html">various restricted systems</a> (see last sentence) that CC licensed works are being distributed on/to/with every day, and ought to. Another needs-technical-attention issue is <a href="http://wiki.creativecommons.org/4.0/Games_3d_printing_and_functional_content">'functional content'</a> for example in games and <a href="http://creativecommons.org/weblog/entry/30605">3D printing</a>. And we're still <a href="https://creativecommons.org/weblog/entry/31227">looking for a new CTO</a>.

Finally, Jonathan Rees just posted on <a href="https://odontomachus.wordpress.com/2012/01/25/how-to-apply-a-cc0-waiver-to-an-ontology/">how to apply CC0 to an ontology</a>. You should <a href="https://odontomachus.wordpress.com/">subscribe to Jonathan's blog</a> as almost every post is of great interest if you've read this far.

<b>Addendum:</b> It seems remiss to not mention SOPA, so I'm adding it. <b>Thanks to the technology community</b> for rising up against this bad policy. CC promoted the campaign on its main website through banners and a number <a href="https://creativecommons.org/weblog/entry/30375">of</a> <a href="http://creativecommons.org/weblog/entry/30836">blog</a> <a href="http://creativecommons.org/weblog/entry/31286">posts</a>. Don't forget that SOPA/PIPA may well rise again, the so-called <a href="https://creativecommons.org/weblog/entry/31184">Research Works Act</a> is very different but is motivated by the same thinking, and ACTA threatens globally. Keep it up! In the long term, is not building a healthy commons (and thus technology needed to facilitate building a healthy commons) a big part of the solution? On that, see <a href="http://gondwanaland.com/mlog/2011/12/12/anti-sopa-commons/">yet another post on my personal blog...</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1709</wp:post_id>
		<wp:post_date>2012-01-25 17:26:51</wp:post_date>
		<wp:post_date_gmt>2012-01-25 17:26:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>see-also-roundup</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="drm"><![CDATA[drm]]></category>
		<category domain="category" nicename="lrmi"><![CDATA[LRMI]]></category>
		<category domain="category" nicename="metadata"><![CDATA[metadata]]></category>
		<category domain="category" nicename="microformats"><![CDATA[microformats]]></category>
		<category domain="category" nicename="people"><![CDATA[people]]></category>
		<category domain="category" nicename="provenance"><![CDATA[provenance]]></category>
		<category domain="category" nicename="rdfa"><![CDATA[rdfa]]></category>
		<category domain="category" nicename="schema-org"><![CDATA[schema.org]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>cc.legaleratta: errata annotations without republishing licenses</title>
		<link>http://labs.creativecommons.org/2012/02/22/cc-legaleratta-errata-annotations-without-republishing-licenses/</link>
		<pubDate>Wed, 22 Feb 2012 17:26:06 +0000</pubDate>
		<dc:creator><![CDATA[lunpa]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1717</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://labs.creativecommons.org/files/2012/02/errata_highlighted1.png"><img class="alignnone size-full wp-image-1726" src="http://labs.creativecommons.org/files/2012/02/errata_highlighted1.png" alt="Screenshot of the errata tool." width="796" height="461" /></a>

The html for the legalcode pages cannot be changed once they are published.  The reason for this is because we provide sha1 hashes of them so that they may be redistributed.  It also is a reason of credibility; that the license you've applied to your work today will still be the same one tomorrow.  However, sometimes there are errors.  They need to be accessible, yet they usually are too small to merit releasing a new version of the license.

The solution to this problem so far has been an errata page on our wiki.  But, that isn't apparent from just looking at the license; and the errata page is disorganized and confusing to read.

I'm proud to say that we're currently testing a tool I wrote last week that will fix this problem: cc.legalerrata.  This was originally intended to be implemented with the upcoming 4.0 licenses, but it turns out the 3.0 licenses have a hook for a tool like this already in place.  The 3.0 licenses include a script at the address <a href="http://creativecommons.org/includes/errata.js">http://creativecommons.org/includes/errata.js</a>, which was blank until a few days ago.  Now the script is used to bootstrap an application in the page.  Once bootstrapped, the tool queries the server for appropriate errata; if errata is returned, a toolbar appears and the user is presented with the option to apply the errata to the text of the page.  Additionally, the changes made can be highlighted via the toolbar.

Currently, this tool is disabled on the live site while we verify that the machine readable errata is actually correct.  You can however try out the tool while we test it, via our staging site.  For example, you can try our <a href="http://staging.creativecommons.org/licenses/by-sa/3.0/legalcode">BY-SA legalcode on staging here</a>.

If you're interested, you can read <a href="http://wiki.creativecommons.org/4.0_License_Errata_Annotation_Tool">the original proposal for the tool</a>. There are two versions of the tool described there, and some pretty ui diagrams that I drew of both versions.  Here is one of my diagrams:

<img class="alignnone" src="http://wiki.creativecommons.org/images/c/cc/Errata_tool_alternate.jpg" alt="UI mockup for the errata tool." width="834" height="978" />

The actual implementation of the tool ended up being much simpler than the proposed one.  Json is still used for storing the machine readable errata, but rather than a convoluted scheme of managing text diffs, machine readable errata is a collection of entries that contain a css selector, attribute overrides (optional), and html fragments.  The css selectors are used by jquery to select an element in the dom; the element's innerHTML attribute is then written over by the html fragment. The html fragment itself is the original innerHTML of the node, but with subtractions noted by &lt;del&gt;&lt;/del&gt; tags, and additions noted by &lt;ins&gt;&lt;/ins&gt; tags.  These files are maintained by hand at this current time, with no plans of writing a frontend for it.  The errata tool takes a snapshot of the page's html before and after overriding it, so that you can efficiently toggle between view modes.  CSS in both errata modes to either make the text look clean (subtractions hidden) or to accomplish highlighting.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1717</wp:post_id>
		<wp:post_date>2012-02-22 17:26:06</wp:post_date>
		<wp:post_date_gmt>2012-02-22 17:26:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cc-legaleratta-errata-annotations-without-republishing-licenses</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[cc-legaleratta-accesible-errata-annotations-without-republishing-licenses]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Converting a remote, headless server to RAID1</title>
		<link>http://labs.creativecommons.org/2012/04/06/converting-a-remote-headless-server-to-raid1/</link>
		<pubDate>Fri, 06 Apr 2012 17:36:33 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1737</guid>
		<description></description>
		<content:encoded><![CDATA[We have a particular server which has been running very well for the past few years, but I have had a certain amount of low-level anxiety that the hard disk in the machine might fail, causing the sites it hosts to go down.  We have backups, of course, but restoring a machine from backups would take hours, if for no other reason than transferring gigabytes of data to the restored disk.  So I had our hosting company add a second hard disk to the machine so that I could attempt to covert it to boot to a RAID1 array.  Playing around with how a system boots on a remote, headless machine to which you have no console access is a little nerve-racking, because it's very easy to make a small mistake and have the machine fail to boot.  You are then at the mercy of a data center technician, and the machine may be down for some time.

There are several documents on the Web to be found about how to go about doing this, but I found <a href="http://www.howtoforge.com/software-raid1-grub-boot-debian-etch">one in particular</a> to be the most useful.  I pretty much followed the instructions in that document line for line, until it broke down because that person was on a Debian Etch system running GRUB version 1, but our system is running Debian Squeeze with GRUB 2 (1.98).  The steps I followed differ from those in that document starting on <a href="http://www.howtoforge.com/software-raid1-grub-boot-debian-etch-p2">page two</a> around half way down where the person says "<em>Now up to the GRUB boot loader.</em>".  Here are the steps I used to configure GRUB 2:

The instructions below assume the following.  Things may be different on your system, so you will have to change device names to match those on your system:
<pre>
Current system:

/dev/sda1 = /boot
/dev/sd5 = swap
/dev/sd6 = /

New RAID1 arrays:

/dev/md0 = /boot
/dev/md1 = swap
/dev/md2 = /
</pre>

Create a file called <em>/etc/grub.d/06_raid</em> with the following contents.  Be sure to make the file executable:

<pre>
#!/bin/sh
exec tail -n +3 $0
# A custom file for CC to get system to boot to RAID1 array

menuentry "Debian GNU/Linux, with Linux 2.6.32-5-amd64, RAID1"
{
        insmod raid
        insmod mdraid
        insmod ext2
	set root='(md0)'
	search --no-floppy --fs-uuid --set 075a7fbf-eed4-4903-8988-983079658873
	echo 'Loading Linux 2.6.32-5-amd64 with RAID1 ...'
	linux /vmlinuz-2.6.32-5-amd64 root=/dev/md2 ro quiet panic=5
	echo 'Loading initial ramdisk ...'
	initrd  /initrd.img-2.6.32-5-amd64
}
</pre>

Of course, you are going to need to change the UUID in the <em>search</em> line, and also the kernel and initrd image names to match those on your system, and probably some other details.

We should tell GRUB to fall back on a known good boot scenario, just in case something doesn't work.  I will say up front that this <strong>completely saved my ass</strong>, since it took me numerous reboots before I found a working configuration, and if it weren't for this fall-back mechanism the machine would have stuck on a failed boot screen in GRUB.  I found <a href="http://translate.google.com/translate?sl=auto&tl=en&js=n&prev=_t&hl=en&ie=UTF-8&layout=2&eotf=1&u=http%3A%2F%2Fwiki.ubuntuusers.de%2FGRUB_2%2FSkripte%23Fallback-Skript">some instructions</a> about how to go about doing this in GRUB 2.  Create a file name <em>/etc/grub.d/01_fallback</em> and add the following contents.  Be sure to make the file executable:
<pre>
#! /bin/sh -e

if [ ! "x${GRUB_DEFAULT}" = "xsaved"  ] ; then
  if [ "x${GRUB_FALLBACK}" = "x" ] ; then 
      export  GRUB_FALLBACK = ""
     GRUB_FALLBACK = $( ls /boot | grep -c 'initrd.img' )
     [ ${ GRUB_DISABLE_LINUX_RECOVERY } ] || GRUB_FALLBACK = $(( ${ GRUB_FALLBACK } * 2 ))
  fi
   echo "fallback set to menuentry=${GRUB_FALLBACK}"  >&2

  cat << EOF
  set fallback="${GRUB_FALLBACK}"
EOF

fi
</pre>
Then add the following line to <em>/etc/default/grub</em>:
<pre>export GRUB_FALLBACK="1"</pre>
And while you are in there, also uncomment or add the following line, unless you plan to be using UUIDs everywhere.  I'm not sure if this is necessary, but since I was mostly using device names (e.g. <em>/dev/md0</em>) everywhere, I figured it couldn't hurt.
<pre>GRUB_DISABLE_LINUX_UUID=true</pre>

Update the GRUB configuration by executing the following command:
<pre># update-grub</pre>

Make sure GRUB is installed and configured in the MBR of each of our disks:
<pre>
# grub-install /dev/sda
# grub-install /dev/sdb
</pre>

Now we need to update the initramfs image so that it knows about our RAID set up.  You could do this by simply running <em>update-initramfs -u</em>, but I found that running the following command did this for me, and perhaps some other relevant things(?), and also it verified that my mdadm settings were where they needed to be:
<pre># dpkg-reconfigure mdadm</pre>

I used <em>rsync</em>, instead of <em>cp</em>, to move the data from the running system to the degraded arrays like so:
<pre>
# rsync -ax /boot/ /mnt/md0
# rsync -ax / /mnt/md2
</pre>

When rsync finishes moving <em>/</em> to <em>/mnt/md2</em>, then edit the following files, chaning any references to the current disk to our new mdX devices:
<pre>
# vi /mnt/md2/etc/fstab
# vi /mnt/md2/etc/mtab
</pre>
<strong>Warning</strong>: do not edit <em>/etc/fstab</em> and <em>/etc/mtab</em> on the currently running system, as the howtoforge.com instructions would seem to indicate, else if the new RAID configuration fails and the machine has to fall back to the current system, then it won't be able to boot that either.

I believe that was it, though it's possible I may have forgot to add a step here.  Don't run the following command unless you can afford to possibly have the machine down for a while. This is a good time to also make sure you have good backups. But if you're ready, then run:
<pre># shutdown -rf now</pre>
Now cross your fingers and hope the system comes back up on the RAID1 arrays, or at all.

If the machine comes back up on the RAID1 arrays, then you can now add the original disk to the new arrays with commands like the following:
<pre>
# mdadm --manage /dev/md0 --add /dev/sda1
# mdadm --manage /dev/md1 --add /dev/sda5
# mdadm --manage /dev/md2 --add /dev/sda6
</pre>

The arrays will automatically rebuild themselves, and you can check the status by running:
<pre>#cat /proc/mdstat</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1737</wp:post_id>
		<wp:post_date>2012-04-06 17:36:33</wp:post_date>
		<wp:post_date_gmt>2012-04-06 17:36:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>converting-a-remote-headless-server-to-raid1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian-2"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="system-administration"><![CDATA[system administration]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Setting kernel clocksource to HPET solves mysterious performance issues</title>
		<link>http://labs.creativecommons.org/2012/04/10/setting-kernel-clocksource-to-hpet-solves-mysterious-performance-issues/</link>
		<pubDate>Tue, 10 Apr 2012 22:11:06 +0000</pubDate>
		<dc:creator><![CDATA[nkinkade]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1756</guid>
		<description></description>
		<content:encoded><![CDATA[For quite a long time the server which runs this very site has had some performance issues.   This same server runs one or two instances of Mediawiki, and I have always just presumed that Mediawiki was the cause of the problems.  I really didn't give it too much more thought, since the issues weren't causing many horrible user-facing performance issues.  The server sort of hobbled along in the background, fairly loaded, but still managing to serve up pages decently.  However, the problem most seriously manifested itself for me personally when working in a remote shell.  Sometimes I'd go to save a file and the operation would take 10 or 15 seconds to complete.  I ignored this, too, for some time, but it reached a point where I couldn't take it any longer.

I watched the output of top for a while, sorting on various metrics, and noticed that <em>flush</em> and <em>kjournald</em> were pegged at the top when sorted by process state, both being in a disk-wait ("D") state.  This didn't make any sense to me, since the machine doesn't host any really busy sites and should have plenty of memory to handle what it has.  I decided to do a web search for "<em>linux flush kswapd</em>" to see what it would turn up.  As it turns out, the very <a href="http://old.nabble.com/Re%3A-kswapd-continuously-active-p27500336.html">first article</a> returned in the search ended up indirectly shedding light on this issue, even though it turned out to be mostly unrelated to my own problem.  However, what I did take away from it was learning of a utility that I didn't previous know about.  Namely, <em><a href="https://perf.wiki.kernel.org/">perf</a></em>, and specifically <em><a href="https://perf.wiki.kernel.org/articles/t/u/t/Tutorial.html#Live_analysis_with_perf_top">perf top -a</a></em>.

What I discovered upon running this command was that the kernel was spending a huge amount of time (60% to 80%) running the function <em>acpi_pm_read</em>.  A little investigation on this tracked it back to the kernel <em>clocksource</em> being set to <em>acpi_pm</em>.  The current, and available, clocksource(s) can be discovered by running the following, respectively:

<pre>
$ cat /sys/devices/system/clocksource/clocksource0/current_clocksource
$ cat /sys/devices/system/clocksource/clocksource0/available_clocksource
</pre>

I then went to another machine, also running Mediawiki, but one not having any performance issues, and found its <em>clocksource</em> to be <em>hpet</em>.  After a little more research, some experiementing, and a few reboots, I found that adding the kernel parameter <em>hpet=force</em> to the variable <em>GRUB_CMDLINE_LINUX_DEFAULT</em> in <em>/etc/default/grub</em> and then running <em>update-grub</em> got the system using <em>hpet</em> as the clocksource.  And this seems to have totally cleared up the issues on the machine.  Processor usage is way down, memory usage is way down, processes in the disk-wait state are down, and our Mediawiki site is returning pages much faster that it ever has.

For reference, here are a few machine specifications which might be useful for others investigating this:

<ul>
<li>OS: Debian Squeeze</li>
<li>Processors: 2 x AMD Opteron 246</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1756</wp:post_id>
		<wp:post_date>2012-04-10 22:11:06</wp:post_date>
		<wp:post_date_gmt>2012-04-10 22:11:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setting-kernel-clocksource-to-hpet-solves-mysterious-performance-issues</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian-2"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="system-administration"><![CDATA[system administration]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
				<title>Dissecting the Liberated Pixel Cup Demo</title>
		<link>http://labs.creativecommons.org/2012/07/10/dissecting_lpcd/</link>
		<pubDate>Tue, 10 Jul 2012 19:10:53 +0000</pubDate>
		<dc:creator><![CDATA[lunpa]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1766</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://labs.creativecommons.org/files/2012/07/dissecting_lpcd.png" alt="" title="screenshot" width="640" height="480" class="alignnone size-full wp-image-1781" style="margin: auto; display: block;"/>
<h3>ABSTRACT</h3>
<p>
The <a href="http://lpc.opengameart.org/static/lpc-style-guide/demo.html" target="_blank">Liberated Pixel Cup Demo</a> (LPCD) was written by yours truly over the course of two weeks, prior to the art phase of the Liberated Pixel Cup contest.  The demo had several intended purposes.  First, to test the usability of the base tile set for building levels.  Second, to show character sprites interacting with environments and to demonstrate animations.  And third, to inspire.  As there has been some interest in the construction of the demo, this article is an overview to how the demo was constructed.  Before I go into any detail, it is worth noting that this demo was put together without really knowing how much time would have been available to work on it.  Because of this, the demo progressed through several stages - each playable and a plausible endpoint - before arriving to what it is today.  This is reflected in a few places in the source code, either in code that was written with the best of intentions or in code that was written to be the foundation for something that never came to be.
</p>
<h3>STRUCTURE</h3>
<p>
Complex JavaScript programs get messy pretty fast.  This is largely because it is impractical to split a JavaScript program across several files.  Lack of namespaces and overly verbose language features (like Object.__defineGetter__) probably don't help the matter.  <a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank">There is a ridiculous amount of information</a> on how to organize your code and keep sane.  I've yet to fall madly in love with any of these solutions.
</p>
<p>
Here's what I usually do:<br/>
I start by defining a dummy module using the object notation (I call this the 'header'). Then I monkey patch all of my functions into it.  As I add function definitions and the like, I update the module to reflect the expected structure. Function stubs have comments next to them outlining the expected arguments.  I don't use a closure to fake a private scope for the module.  Instead, the module is organized to keep calls, callbacks, and different sorts of data separate.  It makes testing your code much easier.  If you want to scare people from touching something, throw some underscores in front of its name.
</p>
<p>
The program itself is split into several files, grouping code more or less by purpose.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/header.js" target="_blank">Header.js</a> contains the module object definition, and the starting point of execution for the game engine.  All of the remaining files are appended to the end of this file (the order doesn't really matter).  Assembly of the program (as well as minification) is automated via a make file.
</p>
<p>
The advantages of using this organizational scheme are:
<ul>
<li>The header provides a simple reference and easy visualization of the program's structure.</li>
<li>Doesn't do anything clever with language features to make it work.</li>
<li>Looks cleaner to me.</li>
</ul>
</p>
<p>
The only disadvantage I can think of is that the header must be maintained as the program is written. It isn't easy to tell if the header is maintained well, since the program can still run if function stubs are missing or some of the variables aren't defined.
</p>
<h3>GRAPHICS ENGINE</h3>
<p>
Levels are built using the program <a href="http://www.mapeditor.org/" target="_blank">Tiled</a>, with the level data exported to json.  The levels are tiled on a 32x32 grid, which turned out to be a mistake.  If I wrote this again, I would go with a 16x16 grid instead, to simplify the conversion of world coordinates <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/graphics.js#line58" target="_blank">to</a> and <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/controls.js#line121" target="_blank">from</a> screen space coordinates.  This is explained further in the section about the physics engine.
</p>
<p>
Tile boards are rendered upon two html5 canvas elements;  an iframe between the two is where the actors are drawn.  Level data may contain more than two layers, but will be automatically flattened into two layers <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line80" target="_blank">when the level is rendered</a>.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line80" target="_blank">Actors are represented with div elements</a>; css is used to <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line96" target="_blank">crop and position</a> them. For actors inheriting from VisibleKind, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line206" target="_blank">Z-index is used to do depth sorting</a>, which is why the actors are in an iframe.  Depth sorting behavior is done on the actor's _dirty method, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line263" target="_blank">which may be overridden</a>.
</p>
<p>
Art assets are fetched in the background by creating a new Image object in JavaScript.  The onload callback is used to inform the engine when the resource is ready for use.  When the json file for a level is being parsed, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line243" target="_blank">the number of pending downloads is incremented</a> when an image download is started, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line230" target="_blank">and decremented on its callback</a>.  This allows for the program to wait far all of the images to finish downloading <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line232" target="_blank">before drawing the tile boards</a>.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line133" target="_blank">A similar technique</a> is used with art assets for actors, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line98" target="_blank">but this is unnecessary because the asset is displayed using css</a>.  This is a throwback from when a third canvas element was used to draw the actors.
</p>
<p>
<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/graphics.js#line47" target="_blank">The redraw event is scheduled</a> when the focused character's coordinates change (it might still be when any actor's coordinates change, which would be a throwback from when all actors were drawn on a canvas).  Because a bunch of functions may request a redraw at once (some might do this multiple times), the first request is honored and the rest are ignored. This simplifies things quite a bit, because the request itself is inexpensive, it can be used when-in-doubt without worrying about a significant performance cost.  I'm thinking of generalizing this for another JavaScript game engine I am planning, where there are various engine functions that would make sense to schedule like this.  I'm thinking in that version, I'll have the scheduling function be named "please".  Eg, please("redraw scene"), etc.
</p>
<h3>PHYSICS ENGINE</h3>
<p>
Physics information is stored on a 16x16 conceptual grid.  Originally, this was to be 32x32, but proved to be a mistake: in some cases, this would prevent the character from walking right up to the edge of something. Because many hours of work already spent building levels would be lost by making the whole engine use a 16x16 grid, I opted for a flimsy workaround.  Physics info for tiles is now one of A, N, NE, E, SE, S, SW, W, NW;  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line100" target="_blank">which describes the wall coverage in a given graphical tile's conceptual subtiles</a>.
</p>
<p>
The physics grid is populated during level load.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/controls.js#line32" target="_blank">Several</a> <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/controls.js#line42" target="_blank">helper</a> <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/controls.js#line71" target="_blank">functions</a> <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/controls.js#line82" target="_blank">exist</a> to check if a given coordinate is blocked by a wall, an actor, or a warp point.
</p>
<p>
Actors that prototype AnimateKind (which also happens to be the actors which can be the focused player) have a <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line384" target="_blank">_move_to function</a> that initiates <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line415" target="_blank">the walk cycle</a>.  The walk cycle function is probably the most complex singular part of the game engine.  This is in part due to the fact that the character's coordinates are floating point values, not array indices.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line424" target="_blank">A good chunk of this code</a> is used to make sure the character doesn't appear to be walking through walls when cutting around a corner;  this had the added side effect of the movement trajectory appearing to be adaptive to obstructions despite the lack of a real path finding algorithm.  Part of the complexity of this function also comes from the fact that it is possible <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line467" target="_blank">to call events on other actors when colliding into them</a>.
</p>
<p>
The player character is an actor.  Any actor that prototypes AnimateKind can be focused as the main character.  This is used in the demo a bit, allowing you to play as Alice (<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/header.js#line147" target="_blank">by default</a>), Bobby Tables, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/dynamics/secret1.json.js" target="_blank">and a secret character</a>.  Using a JavaScript debugger <a href="http://pastebin.com/vGcsnRJY" target="_blank">and a little know-how</a>, you can take control of many other actors; such as any of the students or any of the monsters.
</p>
<h3>ACTOR MODEL</h3>
<p>
Each entity in gameplay is represented by a javascript object that contains data describing the actor, and event handler functions.  Actor objects are stored in LPCD.ACTORS.registry, and there exists <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line580" target="_blank">several helper functions</a> to be used to manage them.  If you use the api <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/api.js#line72" target="_blank">functions</a> to <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/api.js#line97" target="_blank">create</a> <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/api.js#line106" target="_blank">your</a> <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/api.js#line115" target="_blank">actors</a>, this process is entirely automatic.
</p>
<p>
There is an inheritance chain used in creating an actor, allowing different engine features to be implemented on the actors themselves while keeping the code isolated.  This means that the code for things like human characters, monsters, treasure boxes, and etc are all responsible for rendering themselves in the graphics engine.  These actor type constructors can be found on the header object in <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/header.js#line54" target="_blank">LPCD.ACTORS</a>, and defined in the file <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js" target="_blank">actor_model.js</a>.  For the most part, these constructors are fairly concise, with the exceptions of VisibleKind and AnimateKind.
</p>
<p>
All actors inherit from <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line31" target="_blank">AbstractKind</a>.  The most important aspect of this actor is the variable "_binding", which determines if an actor is cleared from memory or not when a new level is loaded.  This allows focused actors to travel from level to level.  There was going to be a feature for persistent actors, allowing for things like items and treasure, though this was never implemented.  Thus, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line68" target="_blank">PersistentKind</a> exists, though I don't believe anything actually uses it.
</p>
<p>
<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line80" target="_blank">VisibleKind</a> inherits from AbstractKind and is used to provide a presence for the actor in the graphics engine <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line119" target="_blank">by creating a div element</a> and <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line180" target="_blank">inserting it into the iframe</a> used to display actors. This object also provides world coordinates (since they're needed for drawing) to the actor. This object does not make an actor responsive to collision detection.
</p>
<p>
<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line221" target="_blank">ObjectKind</a> inherits from VisibleKind, and is used for inanimate objects.  It provides the <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line255" target="_blank">_blocking function</a>, so that the actor can be used in the physics system.
</p>
<p>
<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line282" target="_blank">AnimateKind</a> inherits from ObjectKind.  It provides the <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line303" target="_blank">_gain_input_focus</a> function, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line355" target="_blank">directional facing information</a>, a <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line364" target="_blank">_look_at</a> function, and the walk cycle via the <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line384" target="_blank">_move_to</a> function. This does not implement any animation features, but is simply for animate objects.  <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line509" target="_blank">CritterKind</a> and <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/actor_model.js#line553" target="_blank">HumonKind</a> both inherit from AnimateKind and implement animation specific features.
</p>
<h3>LEVEL SCRIPTING AND CHARACTER DEFINITIONS</h3>
<p>
Level scripts are found in the <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/trees/code_freeze/source/static/demogame/dynamics" target="_blank">dynamics folder</a>, and have the file name of the level they correspond to + ".js".  So for example, the starting level's file name is "start1.json" (level data is found in the <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/trees/code_freeze/source/static/demogame/levels" target="_blank">levels folder</a>.  I <strong>do not</strong> recommend viewing it via web browser), the corresponding dynamics script is "<a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/dynamics/start1.json.js" target="_blank">start1.json.js</a>".  To make it easy to clean things up when the level changes; when the level is loaded, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line155" target="_blank">an iframe is created and the level dynamics script is loaded within that iframe</a>.  It is <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/map_loader.js#line167" target="_blank">given access to LPCD.API</a> via a global variable named API; but is left blind to the rest of the engine.  This allows us to dispose of the script easily <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/graphics.js#line38" target="_blank">by deleting the iframe</a>.
</p>
<p>
An amusing side effect of this is if you define within a dynamics script an actor that inherits from AnimateKind, and change your input focus to this new actor and leave the level; the object for the actor remains, but none of its member functions may be called anymore.  However, anything in the prototype chain still works fine provided that it was defined in the engine itself.  Because of this, <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/characters.js" target="_blank">characters.js</a> is used to define game-specific characters and useful objects outside of the levels and <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/dynamics/house1.json.js#line6" target="_blank">instance them from the level dynamics script</a> via <a href="https://gitorious.org/liberated-pixel-cup/lpc_styleguide/blobs/code_freeze/source/static/demogame/js/api.js#line72" target="_blank">the API.instance function</a>.  Because the code was defined outside of the level, the object remains functional after the level has been flushed.
</p>
<p>
Conveniently, this behavior is consistent between Firefox and Chrome.  If this behavior for scripts in iframes is standardized, I imagine this was never an intended use case.
</p>
<h3>CLOSING THOUGHTS</h3>
<p>
Overall, I'm quite pleased with how the demo turned out.  There are some rough spots where it isn't clear where things are happening (eg, flushing the level actors by changing the innerHTML property of a DOM element), which I had forgotten about prior to writing this article.  Despite that, I think the code is pretty usable as a game engine, and should still be fairly easy to extend.  Hopefully this article serves as a guide for others to tinker with the engine, to use the code in their own projects, or even to study in building something entirely new.
</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1766</wp:post_id>
		<wp:post_date>2012-07-10 19:10:53</wp:post_date>
		<wp:post_date_gmt>2012-07-10 19:10:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dissecting_lpcd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[32]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>237</wp:comment_id>
			<wp:comment_author><![CDATA[Liberated Pixel Cup and distributed free culture projects - Creative Commons]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://labs.creativecommons.org/2012/07/11/liberated-pixel-cup-and-distributed-free-culture-projects/</wp:comment_author_url>
			<wp:comment_author_IP>64.34.161.33</wp:comment_author_IP>
			<wp:comment_date>2012-07-11 16:26:25</wp:comment_date>
			<wp:comment_date_gmt>2012-07-11 16:26:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] around this time, Jonathan Palecek (CC software engineer, and author of the Liberated Pixel Cup Demo) and I were speaking about an engine he was building and looking around on OpenGameArt for [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
				<title>Liberated Pixel Cup and distributed free culture projects</title>
		<link>http://labs.creativecommons.org/2012/07/11/liberated-pixel-cup-and-distributed-free-culture-projects/</link>
		<pubDate>Wed, 11 Jul 2012 16:26:11 +0000</pubDate>
		<dc:creator><![CDATA[cwebber]]></dc:creator>
		<guid isPermaLink="false">http://labs.creativecommons.org/?p=1790</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: center; font-style: italic"><a href="http://lpc.opengameart.org/static/lpc-style-guide/index.html"><img src="http://labs.creativecommons.org/files/2012/07/frontpage_3panels.png" alt="Screenshot of the LPC style guide navigation boxes" /></a><br />The <a href="http://lpc.opengameart.org/static/lpc-style-guide/index.html">Liberated Pixel Cup style guide</a>, which is the cornerstone of coordinating collaboration in <a href="http://lpc.opengameart.org">Liberated Pixel Cup</a> themed artwork.</p>

<p>We <a href="http://creativecommons.org/weblog/entry/32322">announced</a> <a href="http://lpc.opengameart.org">Liberated Pixel Cup</a> just a little over two months ago.  In the time since the announcement, a stunning number of things have happened: we hit&hellip; exceeded!&hellip; the fundraising goal for the project, completed a style guide, base asset repository, and interactive demo, wrapped up the art phase, and we are now well into the coding phase.</p>

<p>I'm happy to see things going so well.  Liberated Pixel Cup is an important project to me, and its success is near and dear to my heart. This isn't just because I think "games are cool" either: there are actually a lot of motivations behind Liberated Pixel Cup.  I discussed one of these in depth on my personal blog in a post titled "<a href="http://dustycloud.org/blog/why-faif-games-matter">Why games matter to free software and free culture</a>".  If you're looking for a larger-policy reason for working on free software and free culture games, you may wish to read that.</p>

<p>But there are other reasons why I think the Liberated Pixel Cup is important that were outside the scope of that post.  One of these is that games are one of the few direct intersections of free culture and free software (or otherwise directly functional) works (the other major instance of these I think of being 3d printing).  Ideally, we'll want to see only more and more of these combinations in the future, but what we see is that when we do, a lot of <a href="http://wiki.creativecommons.org/4.0/Games_3d_printing_and_functional_content">interesting questions</a> are raised.  And getting these movements to connect is surely important generally.  It's also true that getting into game development is presently extremely hard as you end up splitting your efforts between designing a game engine and designing artwork assets, so reducing the barrier for certain types of games seems to be a worthy goal.</p>

<p>But one of the biggest reasons for doing Liberated Pixel Cup was very specific: doing distributed free culture projects is hard and has barely happened at all in the way that distributed free software projects has.  I wanted to prove that there is a way to do distributed free culture projects and achieve a coherent result.</p>

<h2 id="sec-1">Background thinking on distributed free culture projects</h2>

<p>Free software projects have operated in a distributed fashion for some time.  But for whatever reason, there are few examples of successful distributed free culture projects.  Sure, there's the obvious exception of Wikipedia and wikis generally.  However, these are very much so the exception, and it's even arguable that while free culture projects, these fall more on the data and factual information side of things than on the highly creative and artistically directed projects side of things (one might argue that Wikimedia Commons is more on the side of creative works, but this is more of an aggregation of creative works than work to create a coherent and stylistically consistent whole).</p>

<p>Probably the most famous example of artistic free cultural works that comes close to free software works is the Blender Foundation's films.  There's a lot that comes close here: obviously first of all in that they use a major piece of free software (Blender) as the key part of their pipeline, but more specific to workflow aspects, the Blender Foundation films release their works in much the way that a free software project releases their works: with all the source files used to build the film attached under a free license so that anyone can build, modify, and study the project.</p>

<p>But for the most part, Blender films <i>aren't</i> developed in a decentralized manner (or haven't been, at the time of this writing).  For <a href="http://sintel.org">Sintel</a>, <a href="http://bigbuckbunny.org/">Big Buck Bunny</a>, and <a href="http://elephantsdream.org/">Elephants Dream</a>, the development of the work was done by a small and closely knit team of artists behind closed doors and the entirety of the film was released all at once at the end of the project.  This is not to say such a pattern would comparatively disqualify something from being called free software, but it would make it a non-distributed project along the lines of what we call in free software "throwing code over the wall".</p>

<p>This hasn't gone unnoticed by members of the community; if you frequent the <a href="http://www.blenderartists.org/forum/">BlenderArtists</a> forums, every now and then someone brings up the idea of doing a distributed open movie project that anyone can join and contribute to.  These projects tend to start with a bunch of enthusiasm but after not too long seem to generally fizzle out (I'm not going to point to any in particular because I don't want to make anyone feel on the spot, but it's easy enough to find on your own by doing a search for the terms "open movie" and browsing through the archives).</p>

<p>Why does this happen?  Is it simply that distributed free culture projects aren't possible in the way that free software projects are?  I don't believe this is true, and have been trying to think it through for some time.</p>

<p>One event occurred that lead to my thinking about how to approach a distributed free culture project: during the making of Sintel there was a period where they <a href="http://www.sintel.org/news/guardians-community-help/">asked for some outside help improving the characters</a>.  I was excited about this, but thought maybe with some more careful direction they could have better results.  I sent an email to the director Colin Levy and suggested that they do a sprint instead: it would give them the opportunity to pre-allocate a list of tasks so that multiple people could work on multiple things without conflicting with each others' work (resolving conflicts in 3d modeling is not as easy as it is to do with plaintext source code), they could set aside a series of time where they could give direct feedback to people working on things, and they could have a short timeline in which they could see how well things worked.  And the good news is that the Sintel team <a href="http://www.sintel.org/news/community-modeling-sprint/"> ran such a sprint</a> (I'm credited in the post as "cwebb") and it was a "<a href="http://www.sintel.org/news/modeling-sprint-a-stellar-success/">stellar success</a>".  (There was also later a animation sprint, but that went a bit less well&hellip; I did an <a href="http://creativecommons.org/weblog/entry/24149">interview with Ton Roosendaal</a> where he explained a bit why he thought that was.)  I'm not trying to take credit for any of Sintel's success here, even in the modeling sprint (I didn't participate, I just sent that email); that would be stupid.  But I was excited to see that when properly framing things, something collaborative was possible for a free culture project.  This was a small subset of a larger project (which was still mostly done in a throw-the-work-over-the-wall fashion), but maybe some lessons here could be expanded into something larger?</p>

<p>I've continued to think about this and whether or not things could be expanded to larger projects.  I had a call with a friend of mine, Bassam Kurdali, who is the director of the first open movie project, Elephants Dream, as well as <a href="http://tube.freefac.org">Tube</a>, a new and exciting open movie film project.  I picked his brains on what he thought about running a largeish distributed free culture project would work like.</p>
<p>We came up with the following points:</p>
<ul>
<li>For one thing, the idea that you just throw open a project and everyone shows up and just builds their piece of the universe and bam, your world is created! &hellip; is wrong.  In fact, it's even wrong for software: most free software projects that go far might have a lot of contributors with a large and varied set of interests, but there tends to be one or just a few people setting out a very specific set of "project vision" for the software.  If you don't have this, the software heads in all sorts of conflicting directions and falls apart under its own weight and lack of cohesion.</li>
<li>This is even <i>more so</i> a problem for free culture.  When you develop an animated film, a game, or whatever, you need clear stylistic direction.  If you don't have that, you end up with a ton of pieces that you can try to mash together but don't really look like they belong together at all.  Everyone has a different idea of where the project should go and a different preference in look, and eventually you hit creative difficulties, and the piece falls apart.  But is there a way to get past this?</li>
<li>There are probably two ways to get past this.  One is to have a strong "artistic director" of the project who coordinates the entire style of the project from start to finish.  And another is to borrow an idea from programming and set up a "style guide".  Bassam pointed out that python programmers are more than happy to conform to <a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>, the style guide that dictates the general look and feel of code.  And of course, there are plenty of other conventions in python code imposed by the language's design itself.  Could the same system work for artists?</li>
</ul>

<p>Relatedly, around this time, Jonathan Palecek (CC software engineer, and author of the <a href="http://labs.creativecommons.org/2012/07/10/dissecting_lpcd/">Liberated Pixel Cup Demo</a>) and I were speaking about an engine he was building and looking around on <a href="http://opengameart.org/">OpenGameArt</a> for resources to use when prototyping the engine.  The trouble we found is exactly the problem laid out above: there are tons of <i>wonderful</i> resources on OpenGameArt.  But the problem is that you simply can't use most of them together.  There's simply too much variance between the items.</p>
<p>&hellip; and then it became obvious.  This is the perfect space to try to prove distributed free culture projects are possible with enough direction and preparation&hellip;</p>

<h2 id="sec-2">Why we did what we did</h2>

<p>So that's the thinking that lead up to the point of Liberated Pixel Cup.  I approached OpenGameArt and the Free Software Foundation about the idea of a competition that bridged both free software and free culture with a specifically laid out style.  Once they were both on board (Mozilla would join later) and we knew our general direction it was time to figure out: how exactly would we structure the contest and the style guide specifically?</p>

<p>For one thing, we knew what building a style guide generally would look like, because there was a wonderful project called <a href="http://tango.freedesktop.org/Tango_Desktop_Project">Tango</a> which had already done the same for vectorish application icons.  They seemed to do it exactly right with their existing <a href="http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines">style guide</a> coupled with a <a href="http://tango.freedesktop.org/Tango_Icon_Library">base icon library</a>.  So we went this route: we built a <a href="http://lpc.opengameart.org/static/lpc-style-guide/styleguide.html">style guide</a>, we commissioned a series of <a href="http://lpc.opengameart.org/static/lpc-style-guide/assets.html">base assets</a>, and to show off that in fact that the Liberated Pixel Cup style dream was real, we even built an <a href="http://lpc.opengameart.org/static/lpc-style-guide/demo.html">interactive demo</a> that you can play with.</p>

<p>With that in mind, we had to make a decision on what style we wanted to shoot for.  We went with a raster-based top-down, orthographic view tiling at 32x32.  But why this specific style?  It was no accident; we had these very specific goals in mind:</p>
<ul>
<li>We wanted it to be adaptable to a wide variety of types of gameplay.  In the "16-bit era" of game consoles, there were a wide variety of games that used this perspective: adventure games, RPGs, real-time strategy games, farming simulations, civilization simulations, and so on.  We knew that it was flexible, and flexibility was critical to a design that could be useful for a variety of games for a long time to come.</li>
<li>We wanted it to be extendable to a variety of thematic genres.  Even though the base assets that we commissioned for Liberated Pixel Cup had some specific thematic elements to them (vaguely victorianesque interiors, some traditional fantasy game tropes), there was nothing specific about the elements described in the style guide towards one thematic genre or another.  (This was proven true in the art phase of the competition; we got some nice looking science fiction themed submissions.)</li>
<li>We wanted the style to be easy to collaborate on without a persistent "art director".  The style we were going for was fairly well understood by having a lot history of games with <i>similar</i> (though not exactly the same) styling.  The orthographic style and the abstracted and highly stylized proportions of the characters we had commissioned were done with clear intentions; for example, we had considered a character style that had more realistic proportions, but such a character style would require either a much more intensive set of art direction (which we could not handle such a resource with the kind of contest we wanted to run) or much longer and more specific descriptions and layouts around the characters.  Similarly, there are ways to do tiled games that have a more "faked" but high definition sense of perspective (even though on a flat grid you can't have real perspective lines by definition) but this would again require a lot more hand-holding than just "keep it in an orthographic projection."</li>
<li>We wanted artwork that looked beautiful but could have a low barrier to entry for a variety of artists.  The art style we chose was intended to have specific but easy to understand rules, but ones where fairly new artists could still accomplish nice things that seemed to match, and advanced artists could use their full skills.  This affected decisions like "just what kind of texturing/shading are we going to push for?"</li>
<li>Despite the above, we wanted something that looked nice and, even though borrowing from a long history of games with similar and well understood styling, had distinctive elements.  To this end, we laid out the base directions of the art style first, then commissioned a base set of artwork, then developed a clear style guide based on the existing set of work we had.  Decisions like the general "camera angle" we wanted, finalized shading directions, how to handle outlines (which are colored instead of black and white in our style), were made based on the artwork produced by our commissioned work.  And we do feel that the result was something that was easy to build things off of but had a clear and distinct "Liberated Pixel Cup look" to it.</li>
</ul>

<p>Knowing all this, we split out the contest into three phases.  First, we had a commission / style guide phase.  Bart Kelsey of OpenGameArt and I wrote out the core aspects of the style we knew we wanted and then brought on Lanea Zimmerman as our lead artist to work out initial tiles then gradually brought in four other artists (Stephen Challener developing the base characters, Charles Sanchez doing monsters, Manuel Riecke doing character hair/accessories, and Daniel Armstrong building us a bonus castle set).  With the artists coordinating we extrapolated what we had into a style guide.</p>
<p>At that point we were able to move into part two, the art phase, which <a href="http://lpc.opengameart.org/content/art-competition-entries-in-code-has-competition-begun">recently wrapped up</a>.  And I'm happy to say, it was a success!  We got a large variety of entries and for the large part, most of them look like they fit beautifully with the style we set out.  And it's hard not to feel validated: we've seen in Liberated Pixel Cup that it's possible to get a large, distributed set of people to collaborate on something big and make things that actually can work together.  And now we're finally moving on to stage three of the project, the coding phase; hopefully seeing contributions from the art contest being used in games will make that achievement seem more real.</p>

<h2 id="sec-3">In conclusion</h2>

<p>So among other agendas behind Liberated Pixel Cup was proving that distributed, collaborative free culture projects can be done if approached right.  And I believe we showed that it can in this case: with enough forethought, careful planning, and creating the kind of conditions that made artists <i>want</i> to create a cohesive set of works.</p>
<p>Can the approach we took with Liberated Pixel Cup work across all free culture projects?  I don't think it's quite that simple; we made some very specific choices as to the decisions we wanted to take given the kind of project we intended to run (eg, the choice for non-realistically proportioned characters being done because we knew with everyone working separately we couldn't have a careful "art director" type person&hellip; but if we were working on a film, we probably would go for something with a style that might need more negotiation).  But what I do think is that if you have people who know their field well and decide to take the forethought to give a project clear planning and direction, a "distributed, collaborative free culture project" is more than possible.  Creating something that's cohesive takes more work than just "throwing open the doors and letting everyone toss in whatever they feel like", but if you take the time to plan things out, you really can get people collaborating on something wonderful and even have it fit together beautifully.  And so, I hope we see more of such projects in the future!</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1790</wp:post_id>
		<wp:post_date>2012-07-11 16:26:11</wp:post_date>
		<wp:post_date_gmt>2012-07-11 16:26:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>liberated-pixel-cup-and-distributed-free-culture-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
